// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get file JSON
    ///
    /// Returns the document identified by `file_key` as a JSON object. The file key can be parsed from any Figma file url: `https://www.figma.com/file/{file_key}/{title}`.
    ///
    /// The `document` property contains a node of type `DOCUMENT`.
    ///
    /// The `components` property contains a mapping from node IDs to component metadata. This is to help you determine which components each instance comes from.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/get(getFile)`.
    func getFile(_ input: Operations.getFile.Input) async throws -> Operations.getFile.Output
    /// Get file JSON for specific nodes
    ///
    /// Returns the nodes referenced to by `ids` as a JSON object. The nodes are retrieved from the Figma file referenced to by `file_key`.
    ///
    /// The node ID and file key can be parsed from any Figma node url: `https://www.figma.com/file/{file_key}/{title}?node-id={id}`
    ///
    /// The `name`, `lastModified`, `thumbnailUrl`, `editorType`, and `version` attributes are all metadata of the specified file.
    ///
    /// The `linkAccess` field describes the file link share permission level. There are 5 types of permissions a shared link can have: `"inherit"`, `"view"`, `"edit"`, `"org_view"`, and `"org_edit"`. `"inherit"` is the default permission applied to files created in a team project, and will inherit the project's permissions. `"org_view"` and `"org_edit"` restrict the link to org users.
    ///
    /// The `document` attribute contains a Node of type `DOCUMENT`.
    ///
    /// The `components` key contains a mapping from node IDs to component metadata. This is to help you determine which components each instance comes from.
    ///
    /// By default, no vector data is returned. To return vector data, pass the geometry=paths parameter to the endpoint.
    /// Each node can also inherit properties from applicable styles. The styles key contains a mapping from style IDs to style metadata.
    ///
    /// Important: the nodes map may contain values that are `null`. This may be due to the node id not existing within the specified file.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/nodes`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/nodes/get(getFileNodes)`.
    func getFileNodes(_ input: Operations.getFileNodes.Input) async throws -> Operations.getFileNodes.Output
    /// Render images of file nodes
    ///
    /// Renders images from a file.
    ///
    /// If no error occurs, `"images"` will be populated with a map from node IDs to URLs of the rendered images, and `"status"` will be omitted. The image assets will expire after 30 days. Images up to 32 megapixels can be exported. Any images that are larger will be scaled down.
    ///
    /// Important: the image map may contain values that are `null`. This indicates that rendering of that specific node has failed. This may be due to the node id not existing, or other reasons such has the node having no renderable components. It is guaranteed that any node that was requested for rendering will be represented in this map whether or not the render succeeded.
    ///
    /// To render multiple images from the same file, use the `ids` query parameter to specify multiple node ids.
    ///
    /// ```
    /// GET /v1/images/:key?ids=1:2,1:3,1:4
    /// ```
    ///
    ///
    /// - Remark: HTTP `GET /v1/images/{file_key}`.
    /// - Remark: Generated from `#/paths//v1/images/{file_key}/get(getImages)`.
    func getImages(_ input: Operations.getImages.Input) async throws -> Operations.getImages.Output
    /// Get image fills
    ///
    /// Returns download links for all images present in image fills in a document. Image fills are how Figma represents any user supplied images. When you drag an image into Figma, we create a rectangle with a single fill that represents the image, and the user is able to transform the rectangle (and properties on the fill) as they wish.
    ///
    /// This endpoint returns a mapping from image references to the URLs at which the images may be download. Image URLs will expire after no more than 14 days. Image references are located in the output of the GET files endpoint under the `imageRef` attribute in a `Paint`.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/images`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/images/get(getImageFills)`.
    func getImageFills(_ input: Operations.getImageFills.Input) async throws -> Operations.getImageFills.Output
    /// Get projects in a team
    ///
    /// You can use this endpoint to get a list of all the Projects within the specified team. This will only return projects visible to the authenticated user or owner of the developer token. Note: it is not currently possible to programmatically obtain the team id of a user just from a token. To obtain a team id, navigate to a team page of a team you are a part of. The team id will be present in the URL after the word team and before your team name.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/projects`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/projects/get(getTeamProjects)`.
    func getTeamProjects(_ input: Operations.getTeamProjects.Input) async throws -> Operations.getTeamProjects.Output
    /// Get files in a project
    ///
    /// Get a list of all the Files within the specified project.
    ///
    /// - Remark: HTTP `GET /v1/projects/{project_id}/files`.
    /// - Remark: Generated from `#/paths//v1/projects/{project_id}/files/get(getProjectFiles)`.
    func getProjectFiles(_ input: Operations.getProjectFiles.Input) async throws -> Operations.getProjectFiles.Output
    /// Get versions of a file
    ///
    /// This endpoint fetches the version history of a file, allowing you to see the progression of a file over time. You can then use this information to render a specific version of the file, via another endpoint.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/versions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/versions/get(getFileVersions)`.
    func getFileVersions(_ input: Operations.getFileVersions.Input) async throws -> Operations.getFileVersions.Output
    /// Get comments in a file
    ///
    /// Gets a list of comments left on the file.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/comments`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/get(getComments)`.
    func getComments(_ input: Operations.getComments.Input) async throws -> Operations.getComments.Output
    /// Add a comment to a file
    ///
    /// Posts a new comment on the file.
    ///
    /// - Remark: HTTP `POST /v1/files/{file_key}/comments`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/post(postComment)`.
    func postComment(_ input: Operations.postComment.Input) async throws -> Operations.postComment.Output
    /// Delete a comment
    ///
    /// Deletes a specific comment. Only the person who made the comment is allowed to delete it.
    ///
    /// - Remark: HTTP `DELETE /v1/files/{file_key}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/delete(deleteComment)`.
    func deleteComment(_ input: Operations.deleteComment.Input) async throws -> Operations.deleteComment.Output
    /// Get reactions for a comment
    ///
    /// Gets a paginated list of reactions left on the comment.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/comments/{comment_id}/reactions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/get(getCommentReactions)`.
    func getCommentReactions(_ input: Operations.getCommentReactions.Input) async throws -> Operations.getCommentReactions.Output
    /// Add a reaction to a comment
    ///
    /// Posts a new comment reaction on a file comment.
    ///
    /// - Remark: HTTP `POST /v1/files/{file_key}/comments/{comment_id}/reactions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/post(postCommentReaction)`.
    func postCommentReaction(_ input: Operations.postCommentReaction.Input) async throws -> Operations.postCommentReaction.Output
    /// Delete a reaction
    ///
    /// Deletes a specific comment reaction. Only the person who made the reaction is allowed to delete it.
    ///
    /// - Remark: HTTP `DELETE /v1/files/{file_key}/comments/{comment_id}/reactions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/delete(deleteCommentReaction)`.
    func deleteCommentReaction(_ input: Operations.deleteCommentReaction.Input) async throws -> Operations.deleteCommentReaction.Output
    /// Get current user
    ///
    /// Returns the user information for the currently authenticated user.
    ///
    /// - Remark: HTTP `GET /v1/me`.
    /// - Remark: Generated from `#/paths//v1/me/get(getMe)`.
    func getMe(_ input: Operations.getMe.Input) async throws -> Operations.getMe.Output
    /// Get team components
    ///
    /// Get a paginated list of published components within a team library.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/components`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/components/get(getTeamComponents)`.
    func getTeamComponents(_ input: Operations.getTeamComponents.Input) async throws -> Operations.getTeamComponents.Output
    /// Get file components
    ///
    /// Get a list of published components within a file library.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/components`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/components/get(getFileComponents)`.
    func getFileComponents(_ input: Operations.getFileComponents.Input) async throws -> Operations.getFileComponents.Output
    /// Get component
    ///
    /// Get metadata on a component by key.
    ///
    /// - Remark: HTTP `GET /v1/components/{key}`.
    /// - Remark: Generated from `#/paths//v1/components/{key}/get(getComponent)`.
    func getComponent(_ input: Operations.getComponent.Input) async throws -> Operations.getComponent.Output
    /// Get team component sets
    ///
    /// Get a paginated list of published component sets within a team library.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/component_sets`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/component_sets/get(getTeamComponentSets)`.
    func getTeamComponentSets(_ input: Operations.getTeamComponentSets.Input) async throws -> Operations.getTeamComponentSets.Output
    /// Get file component sets
    ///
    /// Get a list of published component sets within a file library.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/component_sets`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/component_sets/get(getFileComponentSets)`.
    func getFileComponentSets(_ input: Operations.getFileComponentSets.Input) async throws -> Operations.getFileComponentSets.Output
    /// Get component set
    ///
    /// Get metadata on a component set by key.
    ///
    /// - Remark: HTTP `GET /v1/component_sets/{key}`.
    /// - Remark: Generated from `#/paths//v1/component_sets/{key}/get(getComponentSet)`.
    func getComponentSet(_ input: Operations.getComponentSet.Input) async throws -> Operations.getComponentSet.Output
    /// Get team styles
    ///
    /// Get a paginated list of published styles within a team library.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/styles`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/styles/get(getTeamStyles)`.
    func getTeamStyles(_ input: Operations.getTeamStyles.Input) async throws -> Operations.getTeamStyles.Output
    /// Get file styles
    ///
    /// Get a list of published styles within a file library.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/styles`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/styles/get(getFileStyles)`.
    func getFileStyles(_ input: Operations.getFileStyles.Input) async throws -> Operations.getFileStyles.Output
    /// Get style
    ///
    /// Get metadata on a style by key.
    ///
    /// - Remark: HTTP `GET /v1/styles/{key}`.
    /// - Remark: Generated from `#/paths//v1/styles/{key}/get(getStyle)`.
    func getStyle(_ input: Operations.getStyle.Input) async throws -> Operations.getStyle.Output
    /// Create a webhook
    ///
    /// Create a new webhook which will call the specified endpoint when the event triggers. By default, this webhook will automatically send a PING event to the endpoint when it is created. If this behavior is not desired, you can create the webhook and set the status to PAUSED and reactivate it later.
    ///
    /// - Remark: HTTP `POST /v2/webhooks`.
    /// - Remark: Generated from `#/paths//v2/webhooks/post(postWebhook)`.
    func postWebhook(_ input: Operations.postWebhook.Input) async throws -> Operations.postWebhook.Output
    /// Get a webhook
    ///
    /// Get a webhook by ID.
    ///
    /// - Remark: HTTP `GET /v2/webhooks/{webhook_id}`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/get(getWebhook)`.
    func getWebhook(_ input: Operations.getWebhook.Input) async throws -> Operations.getWebhook.Output
    /// Update a webhook
    ///
    /// Update a webhook by ID.
    ///
    /// - Remark: HTTP `PUT /v2/webhooks/{webhook_id}`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/put(putWebhook)`.
    func putWebhook(_ input: Operations.putWebhook.Input) async throws -> Operations.putWebhook.Output
    /// Delete a webhook
    ///
    /// Deletes the specified webhook. This operation cannot be reversed.
    ///
    /// - Remark: HTTP `DELETE /v2/webhooks/{webhook_id}`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/delete(deleteWebhook)`.
    func deleteWebhook(_ input: Operations.deleteWebhook.Input) async throws -> Operations.deleteWebhook.Output
    /// Get team webhooks
    ///
    /// Returns all webhooks registered under the specified team.
    ///
    /// - Remark: HTTP `GET /v2/teams/{team_id}/webhooks`.
    /// - Remark: Generated from `#/paths//v2/teams/{team_id}/webhooks/get(getTeamWebhooks)`.
    func getTeamWebhooks(_ input: Operations.getTeamWebhooks.Input) async throws -> Operations.getTeamWebhooks.Output
    /// Get webhook requests
    ///
    /// Returns all webhook requests sent within the last week. Useful for debugging.
    ///
    /// - Remark: HTTP `GET /v2/webhooks/{webhook_id}/requests`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/requests/get(getWebhookRequests)`.
    func getWebhookRequests(_ input: Operations.getWebhookRequests.Input) async throws -> Operations.getWebhookRequests.Output
    /// Get activity logs
    ///
    /// Returns a list of activity log events
    ///
    /// - Remark: HTTP `GET /v1/activity_logs`.
    /// - Remark: Generated from `#/paths//v1/activity_logs/get(getActivityLogs)`.
    func getActivityLogs(_ input: Operations.getActivityLogs.Input) async throws -> Operations.getActivityLogs.Output
    /// Get payments
    ///
    /// There are two methods to query for a user's payment information on a plugin, widget, or Community file. The first method, using plugin payment tokens, is typically used when making queries from a plugin's or widget's code. The second method, providing a user ID and resource ID, is typically used when making queries from anywhere else.
    ///
    /// Note that you can only query for resources that you own. In most cases, this means that you can only query resources that you originally created.
    ///
    /// - Remark: HTTP `GET /v1/payments`.
    /// - Remark: Generated from `#/paths//v1/payments/get(getPayments)`.
    func getPayments(_ input: Operations.getPayments.Input) async throws -> Operations.getPayments.Output
    /// Get local variables
    ///
    /// **This API is available to full members of Enterprise orgs.**
    ///
    /// The `GET /v1/files/:file_key/variables/local` endpoint lets you enumerate local variables created in the file and remote variables used in the file. Remote variables are referenced by their `subscribed_id`.
    ///
    /// As a part of the Variables related API additions, the `GET /v1/files/:file_key` endpoint now returns a `boundVariables` property, containing the `variableId` of the bound variable. The `GET /v1/files/:file_key/variables/local` endpoint can be used to get the full variable or variable collection object.
    ///
    /// Note that `GET /v1/files/:file_key/variables/published` does not return modes. Instead, you will need to use the `GET /v1/files/:file_key/variables/local` endpoint, in the same file, to examine the mode values.
    ///         
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/variables/local`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/local/get(getLocalVariables)`.
    func getLocalVariables(_ input: Operations.getLocalVariables.Input) async throws -> Operations.getLocalVariables.Output
    /// Get published variables
    ///
    /// **This API is available to full members of Enterprise orgs.**
    ///
    /// The `GET /v1/files/:file_key/variables/published` endpoint returns the variables that are published from the given file.
    ///
    /// The response for this endpoint contains some key differences compared to the `GET /v1/files/:file_key/variables/local` endpoint:
    ///
    /// - Each variable and variable collection contains a `subscribed_id`.
    /// - Modes are omitted for published variable collections
    ///
    /// Published variables have two ids: an id that is assigned in the file where it is created (`id`), and an id that is used by subscribing files (`subscribed_id`). The `id` and `key` are stable over the lifetime of the variable. The `subscribed_id` changes every time the variable is modified and published. The same is true for variable collections.
    ///
    /// The `updatedAt` fields are ISO 8601 timestamps that indicate the last time that a change to a variable was published. For variable collections, this timestamp will change any time a variable in the collection is changed.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/variables/published`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/published/get(getPublishedVariables)`.
    func getPublishedVariables(_ input: Operations.getPublishedVariables.Input) async throws -> Operations.getPublishedVariables.Output
    /// Create/modify/delete variables
    ///
    /// **This API is available to full members of Enterprise orgs with Editor seats.**
    ///
    /// The `POST /v1/files/:file_key/variables` endpoint lets you bulk create, update, and delete variables and variable collections.
    ///
    /// The request body supports the following 4 top-level arrays. Changes from these arrays will be applied in the below order, and within each array, by array order.
    ///
    /// - **variableCollections**: For creating, updating, and deleting variable collections
    /// - **variableModes**: For creating, updating, and deleting modes within variable collections
    ///   - Each collection can have a maximum of 40 modes
    ///   - Mode names cannot be longer than 40 characters
    /// - **variables**: For creating, updating, and deleting variables
    ///   - Each collection can have a maximum of 5000 variables
    ///   - Variable names must be unique within a collection and cannot contain certain special characters such as `.{}`
    /// - **variableModeValues**: For setting a variable value under a specific mode.
    ///   - When setting aliases, a variable cannot be aliased to itself or form an alias cycle
    ///
    /// Temporary ids can be used to reference an object later in the same POST request body. They can be used at create time in the `id` property of variable collections, modes, variables, and in the `initialModeId` property of variable collections. They are scoped to a single request body, and must be unique within the body. The mapping of temporary ids to real ids is returned in the response.
    ///
    /// This endpoint has the following key behaviors:
    ///
    /// - The request body must be 4MB or less.
    /// - Must include an `action` property for collections, modes, and variables to tell the API whether to create, update, or delete the object.
    /// - When creating a collection, mode, or variable, you can include a temporary `id` that can be referenced in dependent objects in the same request. For example, you can create a new collection with the id `"my_new_collection"`. You can then set `variableCollectionId` to `"my_new_collection"` in new modes or variables. Temporary ids must be unique in the request body.
    /// - New collections always come with one mode. You can reference this mode by setting `initialModeId` to a temporary id in the request body. This is useful if you want to set values for variables in the mode in the `variableModeValues` array.
    ///   - The `tempIdToRealId` array returns a mapping of the temporary ids in the request, to the real ids of the newly created objects.
    /// - When adding new modes or variables, default variable values will be applied, consistent with what happens in the UI.
    /// - Everything to be created, updated, and deleted in the request body is treated as one atomic operation. If there is any validation failure, you will get a 400 status code response, and no changes will be persisted.
    /// - You will not be able to update remote variables or variable collections. You can only update variables in the file where they were originally created.
    ///
    /// - Remark: HTTP `POST /v1/files/{file_key}/variables`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/post(postVariables)`.
    func postVariables(_ input: Operations.postVariables.Input) async throws -> Operations.postVariables.Output
    /// Get dev resources
    ///
    /// Get dev resources in a file
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/dev_resources`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/get(getDevResources)`.
    func getDevResources(_ input: Operations.getDevResources.Input) async throws -> Operations.getDevResources.Output
    /// Create dev resources
    ///
    /// Bulk create dev resources across multiple files.
    /// Dev resources that are successfully created will show up in the links_created array in the response.
    ///
    /// If there are any dev resources that cannot be created, you may still get a 200 response. These resources will show up in the errors array. Some reasons a dev resource cannot be created include:
    ///
    /// - Resource points to a `file_key` that cannot be found.
    /// - The node already has the maximum of 10 dev resources.
    /// - Another dev resource for the node has the same url.
    ///
    /// - Remark: HTTP `POST /v1/dev_resources`.
    /// - Remark: Generated from `#/paths//v1/dev_resources/post(postDevResources)`.
    func postDevResources(_ input: Operations.postDevResources.Input) async throws -> Operations.postDevResources.Output
    /// Update dev resources
    ///
    /// Bulk update dev resources across multiple files.
    ///
    /// Ids for dev resources that are successfully updated will show up in the `links_updated` array in the response.
    ///
    /// If there are any dev resources that cannot be updated, you may still get a 200 response. These resources will show up in the `errors` array.
    ///
    /// - Remark: HTTP `PUT /v1/dev_resources`.
    /// - Remark: Generated from `#/paths//v1/dev_resources/put(putDevResources)`.
    func putDevResources(_ input: Operations.putDevResources.Input) async throws -> Operations.putDevResources.Output
    /// Delete dev resource
    ///
    /// Delete a dev resource from a file
    ///
    /// - Remark: HTTP `DELETE /v1/files/{file_key}/dev_resources/{dev_resource_id}`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/{dev_resource_id}/delete(deleteDevResource)`.
    func deleteDevResource(_ input: Operations.deleteDevResource.Input) async throws -> Operations.deleteDevResource.Output
    /// Get library analytics action data.
    ///
    /// Returns a list of library analytics actions data broken down by the requested dimension.
    ///
    /// - Remark: HTTP `GET /v1/analytics/libraries/{file_key}/actions`.
    /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/actions/get(getLibraryAnalyticsActions)`.
    func getLibraryAnalyticsActions(_ input: Operations.getLibraryAnalyticsActions.Input) async throws -> Operations.getLibraryAnalyticsActions.Output
    /// Get library analytics usage data.
    ///
    /// Returns a list of library analytics usage data broken down by the requested dimension.
    ///
    /// - Remark: HTTP `GET /v1/analytics/libraries/{file_key}/usages`.
    /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/usages/get(getLibraryAnalyticsUsages)`.
    func getLibraryAnalyticsUsages(_ input: Operations.getLibraryAnalyticsUsages.Input) async throws -> Operations.getLibraryAnalyticsUsages.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get file JSON
    ///
    /// Returns the document identified by `file_key` as a JSON object. The file key can be parsed from any Figma file url: `https://www.figma.com/file/{file_key}/{title}`.
    ///
    /// The `document` property contains a node of type `DOCUMENT`.
    ///
    /// The `components` property contains a mapping from node IDs to component metadata. This is to help you determine which components each instance comes from.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/get(getFile)`.
    public func getFile(
        path: Operations.getFile.Input.Path,
        query: Operations.getFile.Input.Query = .init(),
        headers: Operations.getFile.Input.Headers = .init()
    ) async throws -> Operations.getFile.Output {
        try await getFile(Operations.getFile.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get file JSON for specific nodes
    ///
    /// Returns the nodes referenced to by `ids` as a JSON object. The nodes are retrieved from the Figma file referenced to by `file_key`.
    ///
    /// The node ID and file key can be parsed from any Figma node url: `https://www.figma.com/file/{file_key}/{title}?node-id={id}`
    ///
    /// The `name`, `lastModified`, `thumbnailUrl`, `editorType`, and `version` attributes are all metadata of the specified file.
    ///
    /// The `linkAccess` field describes the file link share permission level. There are 5 types of permissions a shared link can have: `"inherit"`, `"view"`, `"edit"`, `"org_view"`, and `"org_edit"`. `"inherit"` is the default permission applied to files created in a team project, and will inherit the project's permissions. `"org_view"` and `"org_edit"` restrict the link to org users.
    ///
    /// The `document` attribute contains a Node of type `DOCUMENT`.
    ///
    /// The `components` key contains a mapping from node IDs to component metadata. This is to help you determine which components each instance comes from.
    ///
    /// By default, no vector data is returned. To return vector data, pass the geometry=paths parameter to the endpoint.
    /// Each node can also inherit properties from applicable styles. The styles key contains a mapping from style IDs to style metadata.
    ///
    /// Important: the nodes map may contain values that are `null`. This may be due to the node id not existing within the specified file.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/nodes`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/nodes/get(getFileNodes)`.
    public func getFileNodes(
        path: Operations.getFileNodes.Input.Path,
        query: Operations.getFileNodes.Input.Query,
        headers: Operations.getFileNodes.Input.Headers = .init()
    ) async throws -> Operations.getFileNodes.Output {
        try await getFileNodes(Operations.getFileNodes.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Render images of file nodes
    ///
    /// Renders images from a file.
    ///
    /// If no error occurs, `"images"` will be populated with a map from node IDs to URLs of the rendered images, and `"status"` will be omitted. The image assets will expire after 30 days. Images up to 32 megapixels can be exported. Any images that are larger will be scaled down.
    ///
    /// Important: the image map may contain values that are `null`. This indicates that rendering of that specific node has failed. This may be due to the node id not existing, or other reasons such has the node having no renderable components. It is guaranteed that any node that was requested for rendering will be represented in this map whether or not the render succeeded.
    ///
    /// To render multiple images from the same file, use the `ids` query parameter to specify multiple node ids.
    ///
    /// ```
    /// GET /v1/images/:key?ids=1:2,1:3,1:4
    /// ```
    ///
    ///
    /// - Remark: HTTP `GET /v1/images/{file_key}`.
    /// - Remark: Generated from `#/paths//v1/images/{file_key}/get(getImages)`.
    public func getImages(
        path: Operations.getImages.Input.Path,
        query: Operations.getImages.Input.Query,
        headers: Operations.getImages.Input.Headers = .init()
    ) async throws -> Operations.getImages.Output {
        try await getImages(Operations.getImages.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get image fills
    ///
    /// Returns download links for all images present in image fills in a document. Image fills are how Figma represents any user supplied images. When you drag an image into Figma, we create a rectangle with a single fill that represents the image, and the user is able to transform the rectangle (and properties on the fill) as they wish.
    ///
    /// This endpoint returns a mapping from image references to the URLs at which the images may be download. Image URLs will expire after no more than 14 days. Image references are located in the output of the GET files endpoint under the `imageRef` attribute in a `Paint`.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/images`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/images/get(getImageFills)`.
    public func getImageFills(
        path: Operations.getImageFills.Input.Path,
        headers: Operations.getImageFills.Input.Headers = .init()
    ) async throws -> Operations.getImageFills.Output {
        try await getImageFills(Operations.getImageFills.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get projects in a team
    ///
    /// You can use this endpoint to get a list of all the Projects within the specified team. This will only return projects visible to the authenticated user or owner of the developer token. Note: it is not currently possible to programmatically obtain the team id of a user just from a token. To obtain a team id, navigate to a team page of a team you are a part of. The team id will be present in the URL after the word team and before your team name.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/projects`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/projects/get(getTeamProjects)`.
    public func getTeamProjects(
        path: Operations.getTeamProjects.Input.Path,
        headers: Operations.getTeamProjects.Input.Headers = .init()
    ) async throws -> Operations.getTeamProjects.Output {
        try await getTeamProjects(Operations.getTeamProjects.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get files in a project
    ///
    /// Get a list of all the Files within the specified project.
    ///
    /// - Remark: HTTP `GET /v1/projects/{project_id}/files`.
    /// - Remark: Generated from `#/paths//v1/projects/{project_id}/files/get(getProjectFiles)`.
    public func getProjectFiles(
        path: Operations.getProjectFiles.Input.Path,
        query: Operations.getProjectFiles.Input.Query = .init(),
        headers: Operations.getProjectFiles.Input.Headers = .init()
    ) async throws -> Operations.getProjectFiles.Output {
        try await getProjectFiles(Operations.getProjectFiles.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get versions of a file
    ///
    /// This endpoint fetches the version history of a file, allowing you to see the progression of a file over time. You can then use this information to render a specific version of the file, via another endpoint.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/versions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/versions/get(getFileVersions)`.
    public func getFileVersions(
        path: Operations.getFileVersions.Input.Path,
        query: Operations.getFileVersions.Input.Query = .init(),
        headers: Operations.getFileVersions.Input.Headers = .init()
    ) async throws -> Operations.getFileVersions.Output {
        try await getFileVersions(Operations.getFileVersions.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get comments in a file
    ///
    /// Gets a list of comments left on the file.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/comments`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/get(getComments)`.
    public func getComments(
        path: Operations.getComments.Input.Path,
        query: Operations.getComments.Input.Query = .init(),
        headers: Operations.getComments.Input.Headers = .init()
    ) async throws -> Operations.getComments.Output {
        try await getComments(Operations.getComments.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Add a comment to a file
    ///
    /// Posts a new comment on the file.
    ///
    /// - Remark: HTTP `POST /v1/files/{file_key}/comments`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/post(postComment)`.
    public func postComment(
        path: Operations.postComment.Input.Path,
        headers: Operations.postComment.Input.Headers = .init(),
        body: Operations.postComment.Input.Body
    ) async throws -> Operations.postComment.Output {
        try await postComment(Operations.postComment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a comment
    ///
    /// Deletes a specific comment. Only the person who made the comment is allowed to delete it.
    ///
    /// - Remark: HTTP `DELETE /v1/files/{file_key}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/delete(deleteComment)`.
    public func deleteComment(
        path: Operations.deleteComment.Input.Path,
        headers: Operations.deleteComment.Input.Headers = .init()
    ) async throws -> Operations.deleteComment.Output {
        try await deleteComment(Operations.deleteComment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get reactions for a comment
    ///
    /// Gets a paginated list of reactions left on the comment.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/comments/{comment_id}/reactions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/get(getCommentReactions)`.
    public func getCommentReactions(
        path: Operations.getCommentReactions.Input.Path,
        query: Operations.getCommentReactions.Input.Query = .init(),
        headers: Operations.getCommentReactions.Input.Headers = .init()
    ) async throws -> Operations.getCommentReactions.Output {
        try await getCommentReactions(Operations.getCommentReactions.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Add a reaction to a comment
    ///
    /// Posts a new comment reaction on a file comment.
    ///
    /// - Remark: HTTP `POST /v1/files/{file_key}/comments/{comment_id}/reactions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/post(postCommentReaction)`.
    public func postCommentReaction(
        path: Operations.postCommentReaction.Input.Path,
        headers: Operations.postCommentReaction.Input.Headers = .init(),
        body: Operations.postCommentReaction.Input.Body
    ) async throws -> Operations.postCommentReaction.Output {
        try await postCommentReaction(Operations.postCommentReaction.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a reaction
    ///
    /// Deletes a specific comment reaction. Only the person who made the reaction is allowed to delete it.
    ///
    /// - Remark: HTTP `DELETE /v1/files/{file_key}/comments/{comment_id}/reactions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/delete(deleteCommentReaction)`.
    public func deleteCommentReaction(
        path: Operations.deleteCommentReaction.Input.Path,
        query: Operations.deleteCommentReaction.Input.Query,
        headers: Operations.deleteCommentReaction.Input.Headers = .init()
    ) async throws -> Operations.deleteCommentReaction.Output {
        try await deleteCommentReaction(Operations.deleteCommentReaction.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get current user
    ///
    /// Returns the user information for the currently authenticated user.
    ///
    /// - Remark: HTTP `GET /v1/me`.
    /// - Remark: Generated from `#/paths//v1/me/get(getMe)`.
    public func getMe(headers: Operations.getMe.Input.Headers = .init()) async throws -> Operations.getMe.Output {
        try await getMe(Operations.getMe.Input(headers: headers))
    }
    /// Get team components
    ///
    /// Get a paginated list of published components within a team library.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/components`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/components/get(getTeamComponents)`.
    public func getTeamComponents(
        path: Operations.getTeamComponents.Input.Path,
        query: Operations.getTeamComponents.Input.Query = .init(),
        headers: Operations.getTeamComponents.Input.Headers = .init()
    ) async throws -> Operations.getTeamComponents.Output {
        try await getTeamComponents(Operations.getTeamComponents.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get file components
    ///
    /// Get a list of published components within a file library.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/components`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/components/get(getFileComponents)`.
    public func getFileComponents(
        path: Operations.getFileComponents.Input.Path,
        headers: Operations.getFileComponents.Input.Headers = .init()
    ) async throws -> Operations.getFileComponents.Output {
        try await getFileComponents(Operations.getFileComponents.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get component
    ///
    /// Get metadata on a component by key.
    ///
    /// - Remark: HTTP `GET /v1/components/{key}`.
    /// - Remark: Generated from `#/paths//v1/components/{key}/get(getComponent)`.
    public func getComponent(
        path: Operations.getComponent.Input.Path,
        headers: Operations.getComponent.Input.Headers = .init()
    ) async throws -> Operations.getComponent.Output {
        try await getComponent(Operations.getComponent.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get team component sets
    ///
    /// Get a paginated list of published component sets within a team library.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/component_sets`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/component_sets/get(getTeamComponentSets)`.
    public func getTeamComponentSets(
        path: Operations.getTeamComponentSets.Input.Path,
        query: Operations.getTeamComponentSets.Input.Query = .init(),
        headers: Operations.getTeamComponentSets.Input.Headers = .init()
    ) async throws -> Operations.getTeamComponentSets.Output {
        try await getTeamComponentSets(Operations.getTeamComponentSets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get file component sets
    ///
    /// Get a list of published component sets within a file library.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/component_sets`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/component_sets/get(getFileComponentSets)`.
    public func getFileComponentSets(
        path: Operations.getFileComponentSets.Input.Path,
        headers: Operations.getFileComponentSets.Input.Headers = .init()
    ) async throws -> Operations.getFileComponentSets.Output {
        try await getFileComponentSets(Operations.getFileComponentSets.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get component set
    ///
    /// Get metadata on a component set by key.
    ///
    /// - Remark: HTTP `GET /v1/component_sets/{key}`.
    /// - Remark: Generated from `#/paths//v1/component_sets/{key}/get(getComponentSet)`.
    public func getComponentSet(
        path: Operations.getComponentSet.Input.Path,
        headers: Operations.getComponentSet.Input.Headers = .init()
    ) async throws -> Operations.getComponentSet.Output {
        try await getComponentSet(Operations.getComponentSet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get team styles
    ///
    /// Get a paginated list of published styles within a team library.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/styles`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/styles/get(getTeamStyles)`.
    public func getTeamStyles(
        path: Operations.getTeamStyles.Input.Path,
        query: Operations.getTeamStyles.Input.Query = .init(),
        headers: Operations.getTeamStyles.Input.Headers = .init()
    ) async throws -> Operations.getTeamStyles.Output {
        try await getTeamStyles(Operations.getTeamStyles.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get file styles
    ///
    /// Get a list of published styles within a file library.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/styles`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/styles/get(getFileStyles)`.
    public func getFileStyles(
        path: Operations.getFileStyles.Input.Path,
        headers: Operations.getFileStyles.Input.Headers = .init()
    ) async throws -> Operations.getFileStyles.Output {
        try await getFileStyles(Operations.getFileStyles.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get style
    ///
    /// Get metadata on a style by key.
    ///
    /// - Remark: HTTP `GET /v1/styles/{key}`.
    /// - Remark: Generated from `#/paths//v1/styles/{key}/get(getStyle)`.
    public func getStyle(
        path: Operations.getStyle.Input.Path,
        headers: Operations.getStyle.Input.Headers = .init()
    ) async throws -> Operations.getStyle.Output {
        try await getStyle(Operations.getStyle.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a webhook
    ///
    /// Create a new webhook which will call the specified endpoint when the event triggers. By default, this webhook will automatically send a PING event to the endpoint when it is created. If this behavior is not desired, you can create the webhook and set the status to PAUSED and reactivate it later.
    ///
    /// - Remark: HTTP `POST /v2/webhooks`.
    /// - Remark: Generated from `#/paths//v2/webhooks/post(postWebhook)`.
    public func postWebhook(
        headers: Operations.postWebhook.Input.Headers = .init(),
        body: Operations.postWebhook.Input.Body
    ) async throws -> Operations.postWebhook.Output {
        try await postWebhook(Operations.postWebhook.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a webhook
    ///
    /// Get a webhook by ID.
    ///
    /// - Remark: HTTP `GET /v2/webhooks/{webhook_id}`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/get(getWebhook)`.
    public func getWebhook(
        path: Operations.getWebhook.Input.Path,
        headers: Operations.getWebhook.Input.Headers = .init()
    ) async throws -> Operations.getWebhook.Output {
        try await getWebhook(Operations.getWebhook.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a webhook
    ///
    /// Update a webhook by ID.
    ///
    /// - Remark: HTTP `PUT /v2/webhooks/{webhook_id}`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/put(putWebhook)`.
    public func putWebhook(
        path: Operations.putWebhook.Input.Path,
        headers: Operations.putWebhook.Input.Headers = .init(),
        body: Operations.putWebhook.Input.Body
    ) async throws -> Operations.putWebhook.Output {
        try await putWebhook(Operations.putWebhook.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a webhook
    ///
    /// Deletes the specified webhook. This operation cannot be reversed.
    ///
    /// - Remark: HTTP `DELETE /v2/webhooks/{webhook_id}`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/delete(deleteWebhook)`.
    public func deleteWebhook(
        path: Operations.deleteWebhook.Input.Path,
        headers: Operations.deleteWebhook.Input.Headers = .init()
    ) async throws -> Operations.deleteWebhook.Output {
        try await deleteWebhook(Operations.deleteWebhook.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get team webhooks
    ///
    /// Returns all webhooks registered under the specified team.
    ///
    /// - Remark: HTTP `GET /v2/teams/{team_id}/webhooks`.
    /// - Remark: Generated from `#/paths//v2/teams/{team_id}/webhooks/get(getTeamWebhooks)`.
    public func getTeamWebhooks(
        path: Operations.getTeamWebhooks.Input.Path,
        headers: Operations.getTeamWebhooks.Input.Headers = .init()
    ) async throws -> Operations.getTeamWebhooks.Output {
        try await getTeamWebhooks(Operations.getTeamWebhooks.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get webhook requests
    ///
    /// Returns all webhook requests sent within the last week. Useful for debugging.
    ///
    /// - Remark: HTTP `GET /v2/webhooks/{webhook_id}/requests`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/requests/get(getWebhookRequests)`.
    public func getWebhookRequests(
        path: Operations.getWebhookRequests.Input.Path,
        headers: Operations.getWebhookRequests.Input.Headers = .init()
    ) async throws -> Operations.getWebhookRequests.Output {
        try await getWebhookRequests(Operations.getWebhookRequests.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get activity logs
    ///
    /// Returns a list of activity log events
    ///
    /// - Remark: HTTP `GET /v1/activity_logs`.
    /// - Remark: Generated from `#/paths//v1/activity_logs/get(getActivityLogs)`.
    public func getActivityLogs(
        query: Operations.getActivityLogs.Input.Query = .init(),
        headers: Operations.getActivityLogs.Input.Headers = .init()
    ) async throws -> Operations.getActivityLogs.Output {
        try await getActivityLogs(Operations.getActivityLogs.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get payments
    ///
    /// There are two methods to query for a user's payment information on a plugin, widget, or Community file. The first method, using plugin payment tokens, is typically used when making queries from a plugin's or widget's code. The second method, providing a user ID and resource ID, is typically used when making queries from anywhere else.
    ///
    /// Note that you can only query for resources that you own. In most cases, this means that you can only query resources that you originally created.
    ///
    /// - Remark: HTTP `GET /v1/payments`.
    /// - Remark: Generated from `#/paths//v1/payments/get(getPayments)`.
    public func getPayments(
        query: Operations.getPayments.Input.Query = .init(),
        headers: Operations.getPayments.Input.Headers = .init()
    ) async throws -> Operations.getPayments.Output {
        try await getPayments(Operations.getPayments.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get local variables
    ///
    /// **This API is available to full members of Enterprise orgs.**
    ///
    /// The `GET /v1/files/:file_key/variables/local` endpoint lets you enumerate local variables created in the file and remote variables used in the file. Remote variables are referenced by their `subscribed_id`.
    ///
    /// As a part of the Variables related API additions, the `GET /v1/files/:file_key` endpoint now returns a `boundVariables` property, containing the `variableId` of the bound variable. The `GET /v1/files/:file_key/variables/local` endpoint can be used to get the full variable or variable collection object.
    ///
    /// Note that `GET /v1/files/:file_key/variables/published` does not return modes. Instead, you will need to use the `GET /v1/files/:file_key/variables/local` endpoint, in the same file, to examine the mode values.
    ///         
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/variables/local`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/local/get(getLocalVariables)`.
    public func getLocalVariables(
        path: Operations.getLocalVariables.Input.Path,
        headers: Operations.getLocalVariables.Input.Headers = .init()
    ) async throws -> Operations.getLocalVariables.Output {
        try await getLocalVariables(Operations.getLocalVariables.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get published variables
    ///
    /// **This API is available to full members of Enterprise orgs.**
    ///
    /// The `GET /v1/files/:file_key/variables/published` endpoint returns the variables that are published from the given file.
    ///
    /// The response for this endpoint contains some key differences compared to the `GET /v1/files/:file_key/variables/local` endpoint:
    ///
    /// - Each variable and variable collection contains a `subscribed_id`.
    /// - Modes are omitted for published variable collections
    ///
    /// Published variables have two ids: an id that is assigned in the file where it is created (`id`), and an id that is used by subscribing files (`subscribed_id`). The `id` and `key` are stable over the lifetime of the variable. The `subscribed_id` changes every time the variable is modified and published. The same is true for variable collections.
    ///
    /// The `updatedAt` fields are ISO 8601 timestamps that indicate the last time that a change to a variable was published. For variable collections, this timestamp will change any time a variable in the collection is changed.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/variables/published`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/published/get(getPublishedVariables)`.
    public func getPublishedVariables(
        path: Operations.getPublishedVariables.Input.Path,
        headers: Operations.getPublishedVariables.Input.Headers = .init()
    ) async throws -> Operations.getPublishedVariables.Output {
        try await getPublishedVariables(Operations.getPublishedVariables.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create/modify/delete variables
    ///
    /// **This API is available to full members of Enterprise orgs with Editor seats.**
    ///
    /// The `POST /v1/files/:file_key/variables` endpoint lets you bulk create, update, and delete variables and variable collections.
    ///
    /// The request body supports the following 4 top-level arrays. Changes from these arrays will be applied in the below order, and within each array, by array order.
    ///
    /// - **variableCollections**: For creating, updating, and deleting variable collections
    /// - **variableModes**: For creating, updating, and deleting modes within variable collections
    ///   - Each collection can have a maximum of 40 modes
    ///   - Mode names cannot be longer than 40 characters
    /// - **variables**: For creating, updating, and deleting variables
    ///   - Each collection can have a maximum of 5000 variables
    ///   - Variable names must be unique within a collection and cannot contain certain special characters such as `.{}`
    /// - **variableModeValues**: For setting a variable value under a specific mode.
    ///   - When setting aliases, a variable cannot be aliased to itself or form an alias cycle
    ///
    /// Temporary ids can be used to reference an object later in the same POST request body. They can be used at create time in the `id` property of variable collections, modes, variables, and in the `initialModeId` property of variable collections. They are scoped to a single request body, and must be unique within the body. The mapping of temporary ids to real ids is returned in the response.
    ///
    /// This endpoint has the following key behaviors:
    ///
    /// - The request body must be 4MB or less.
    /// - Must include an `action` property for collections, modes, and variables to tell the API whether to create, update, or delete the object.
    /// - When creating a collection, mode, or variable, you can include a temporary `id` that can be referenced in dependent objects in the same request. For example, you can create a new collection with the id `"my_new_collection"`. You can then set `variableCollectionId` to `"my_new_collection"` in new modes or variables. Temporary ids must be unique in the request body.
    /// - New collections always come with one mode. You can reference this mode by setting `initialModeId` to a temporary id in the request body. This is useful if you want to set values for variables in the mode in the `variableModeValues` array.
    ///   - The `tempIdToRealId` array returns a mapping of the temporary ids in the request, to the real ids of the newly created objects.
    /// - When adding new modes or variables, default variable values will be applied, consistent with what happens in the UI.
    /// - Everything to be created, updated, and deleted in the request body is treated as one atomic operation. If there is any validation failure, you will get a 400 status code response, and no changes will be persisted.
    /// - You will not be able to update remote variables or variable collections. You can only update variables in the file where they were originally created.
    ///
    /// - Remark: HTTP `POST /v1/files/{file_key}/variables`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/post(postVariables)`.
    public func postVariables(
        path: Operations.postVariables.Input.Path,
        headers: Operations.postVariables.Input.Headers = .init(),
        body: Operations.postVariables.Input.Body
    ) async throws -> Operations.postVariables.Output {
        try await postVariables(Operations.postVariables.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get dev resources
    ///
    /// Get dev resources in a file
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/dev_resources`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/get(getDevResources)`.
    public func getDevResources(
        path: Operations.getDevResources.Input.Path,
        query: Operations.getDevResources.Input.Query = .init(),
        headers: Operations.getDevResources.Input.Headers = .init()
    ) async throws -> Operations.getDevResources.Output {
        try await getDevResources(Operations.getDevResources.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create dev resources
    ///
    /// Bulk create dev resources across multiple files.
    /// Dev resources that are successfully created will show up in the links_created array in the response.
    ///
    /// If there are any dev resources that cannot be created, you may still get a 200 response. These resources will show up in the errors array. Some reasons a dev resource cannot be created include:
    ///
    /// - Resource points to a `file_key` that cannot be found.
    /// - The node already has the maximum of 10 dev resources.
    /// - Another dev resource for the node has the same url.
    ///
    /// - Remark: HTTP `POST /v1/dev_resources`.
    /// - Remark: Generated from `#/paths//v1/dev_resources/post(postDevResources)`.
    public func postDevResources(
        headers: Operations.postDevResources.Input.Headers = .init(),
        body: Operations.postDevResources.Input.Body
    ) async throws -> Operations.postDevResources.Output {
        try await postDevResources(Operations.postDevResources.Input(
            headers: headers,
            body: body
        ))
    }
    /// Update dev resources
    ///
    /// Bulk update dev resources across multiple files.
    ///
    /// Ids for dev resources that are successfully updated will show up in the `links_updated` array in the response.
    ///
    /// If there are any dev resources that cannot be updated, you may still get a 200 response. These resources will show up in the `errors` array.
    ///
    /// - Remark: HTTP `PUT /v1/dev_resources`.
    /// - Remark: Generated from `#/paths//v1/dev_resources/put(putDevResources)`.
    public func putDevResources(
        headers: Operations.putDevResources.Input.Headers = .init(),
        body: Operations.putDevResources.Input.Body
    ) async throws -> Operations.putDevResources.Output {
        try await putDevResources(Operations.putDevResources.Input(
            headers: headers,
            body: body
        ))
    }
    /// Delete dev resource
    ///
    /// Delete a dev resource from a file
    ///
    /// - Remark: HTTP `DELETE /v1/files/{file_key}/dev_resources/{dev_resource_id}`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/{dev_resource_id}/delete(deleteDevResource)`.
    public func deleteDevResource(
        path: Operations.deleteDevResource.Input.Path,
        headers: Operations.deleteDevResource.Input.Headers = .init()
    ) async throws -> Operations.deleteDevResource.Output {
        try await deleteDevResource(Operations.deleteDevResource.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get library analytics action data.
    ///
    /// Returns a list of library analytics actions data broken down by the requested dimension.
    ///
    /// - Remark: HTTP `GET /v1/analytics/libraries/{file_key}/actions`.
    /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/actions/get(getLibraryAnalyticsActions)`.
    public func getLibraryAnalyticsActions(
        path: Operations.getLibraryAnalyticsActions.Input.Path,
        query: Operations.getLibraryAnalyticsActions.Input.Query,
        headers: Operations.getLibraryAnalyticsActions.Input.Headers = .init()
    ) async throws -> Operations.getLibraryAnalyticsActions.Output {
        try await getLibraryAnalyticsActions(Operations.getLibraryAnalyticsActions.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get library analytics usage data.
    ///
    /// Returns a list of library analytics usage data broken down by the requested dimension.
    ///
    /// - Remark: HTTP `GET /v1/analytics/libraries/{file_key}/usages`.
    /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/usages/get(getLibraryAnalyticsUsages)`.
    public func getLibraryAnalyticsUsages(
        path: Operations.getLibraryAnalyticsUsages.Input.Path,
        query: Operations.getLibraryAnalyticsUsages.Input.Query,
        headers: Operations.getLibraryAnalyticsUsages.Input.Headers = .init()
    ) async throws -> Operations.getLibraryAnalyticsUsages.Output {
        try await getLibraryAnalyticsUsages(Operations.getLibraryAnalyticsUsages.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.figma.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/IsLayerTrait`.
        public struct IsLayerTrait: Codable, Hashable, Sendable {
            /// A string uniquely identifying this node within the document.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/id`.
            public var id: Swift.String
            /// The name given to the node by the user in the tool.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/name`.
            public var name: Swift.String
            /// The type of the node
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/type`.
            public var _type: Swift.String
            /// Whether or not the node is visible on the canvas.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/visible`.
            public var visible: Swift.Bool?
            /// If true, layer is locked and cannot be edited
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/locked`.
            public var locked: Swift.Bool?
            /// Whether the layer is fixed while the parent is scrolling
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/isFixed`.
            @available(*, deprecated)
            public var isFixed: Swift.Bool?
            /// How layer should be treated when the frame is resized
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/scrollBehavior`.
            @frozen public enum scrollBehaviorPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case SCROLLS = "SCROLLS"
                case FIXED = "FIXED"
                case STICKY_SCROLLS = "STICKY_SCROLLS"
            }
            /// How layer should be treated when the frame is resized
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/scrollBehavior`.
            public var scrollBehavior: Components.Schemas.IsLayerTrait.scrollBehaviorPayload
            /// The rotation of the node, if not 0.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/rotation`.
            public var rotation: Swift.Double?
            /// A mapping of a layer's property to component property name of component properties attached to this node. The component property name can be used to look up more information on the corresponding component's or component set's componentPropertyDefinitions.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/componentPropertyReferences`.
            public struct componentPropertyReferencesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `componentPropertyReferencesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A mapping of a layer's property to component property name of component properties attached to this node. The component property name can be used to look up more information on the corresponding component's or component set's componentPropertyDefinitions.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/componentPropertyReferences`.
            public var componentPropertyReferences: Components.Schemas.IsLayerTrait.componentPropertyReferencesPayload?
            /// Data written by plugins that is visible only to the plugin that wrote it. Requires the `pluginData` to include the ID of the plugin.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/pluginData`.
            public var pluginData: OpenAPIRuntime.OpenAPIValueContainer?
            /// Data written by plugins that is visible to all plugins. Requires the `pluginData` parameter to include the string "shared".
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/sharedPluginData`.
            public var sharedPluginData: OpenAPIRuntime.OpenAPIValueContainer?
            /// A mapping of field to the variables applied to this field. Most fields will only map to a single `VariableAlias`. However, for properties like `fills`, `strokes`, `size`, `componentProperties`, and `textRangeFills`, it is possible to have multiple variables bound to the field.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables`.
            public struct boundVariablesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/size`.
                public struct sizePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/size/x`.
                    public var x: Components.Schemas.VariableAlias?
                    /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/size/y`.
                    public var y: Components.Schemas.VariableAlias?
                    /// Creates a new `sizePayload`.
                    ///
                    /// - Parameters:
                    ///   - x:
                    ///   - y:
                    public init(
                        x: Components.Schemas.VariableAlias? = nil,
                        y: Components.Schemas.VariableAlias? = nil
                    ) {
                        self.x = x
                        self.y = y
                    }
                    public enum CodingKeys: String, CodingKey {
                        case x
                        case y
                    }
                }
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/size`.
                public var size: Components.Schemas.IsLayerTrait.boundVariablesPayload.sizePayload?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/individualStrokeWeights`.
                public struct individualStrokeWeightsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/individualStrokeWeights/top`.
                    public var top: Components.Schemas.VariableAlias?
                    /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/individualStrokeWeights/bottom`.
                    public var bottom: Components.Schemas.VariableAlias?
                    /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/individualStrokeWeights/left`.
                    public var left: Components.Schemas.VariableAlias?
                    /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/individualStrokeWeights/right`.
                    public var right: Components.Schemas.VariableAlias?
                    /// Creates a new `individualStrokeWeightsPayload`.
                    ///
                    /// - Parameters:
                    ///   - top:
                    ///   - bottom:
                    ///   - left:
                    ///   - right:
                    public init(
                        top: Components.Schemas.VariableAlias? = nil,
                        bottom: Components.Schemas.VariableAlias? = nil,
                        left: Components.Schemas.VariableAlias? = nil,
                        right: Components.Schemas.VariableAlias? = nil
                    ) {
                        self.top = top
                        self.bottom = bottom
                        self.left = left
                        self.right = right
                    }
                    public enum CodingKeys: String, CodingKey {
                        case top
                        case bottom
                        case left
                        case right
                    }
                }
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/individualStrokeWeights`.
                public var individualStrokeWeights: Components.Schemas.IsLayerTrait.boundVariablesPayload.individualStrokeWeightsPayload?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/characters`.
                public var characters: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/itemSpacing`.
                public var itemSpacing: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/paddingLeft`.
                public var paddingLeft: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/paddingRight`.
                public var paddingRight: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/paddingTop`.
                public var paddingTop: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/paddingBottom`.
                public var paddingBottom: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/visible`.
                public var visible: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/topLeftRadius`.
                public var topLeftRadius: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/topRightRadius`.
                public var topRightRadius: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/bottomLeftRadius`.
                public var bottomLeftRadius: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/bottomRightRadius`.
                public var bottomRightRadius: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/minWidth`.
                public var minWidth: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/maxWidth`.
                public var maxWidth: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/minHeight`.
                public var minHeight: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/maxHeight`.
                public var maxHeight: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/counterAxisSpacing`.
                public var counterAxisSpacing: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/opacity`.
                public var opacity: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/fontFamily`.
                public var fontFamily: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/fontSize`.
                public var fontSize: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/fontStyle`.
                public var fontStyle: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/fontWeight`.
                public var fontWeight: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/letterSpacing`.
                public var letterSpacing: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/lineHeight`.
                public var lineHeight: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/paragraphSpacing`.
                public var paragraphSpacing: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/paragraphIndent`.
                public var paragraphIndent: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/fills`.
                public var fills: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/strokes`.
                public var strokes: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/componentProperties`.
                public struct componentPropertiesPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Components.Schemas.VariableAlias]
                    /// Creates a new `componentPropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Components.Schemas.VariableAlias] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/componentProperties`.
                public var componentProperties: Components.Schemas.IsLayerTrait.boundVariablesPayload.componentPropertiesPayload?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/textRangeFills`.
                public var textRangeFills: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/effects`.
                public var effects: [Components.Schemas.VariableAlias]?
                /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables/layoutGrids`.
                public var layoutGrids: [Components.Schemas.VariableAlias]?
                /// Creates a new `boundVariablesPayload`.
                ///
                /// - Parameters:
                ///   - size:
                ///   - individualStrokeWeights:
                ///   - characters:
                ///   - itemSpacing:
                ///   - paddingLeft:
                ///   - paddingRight:
                ///   - paddingTop:
                ///   - paddingBottom:
                ///   - visible:
                ///   - topLeftRadius:
                ///   - topRightRadius:
                ///   - bottomLeftRadius:
                ///   - bottomRightRadius:
                ///   - minWidth:
                ///   - maxWidth:
                ///   - minHeight:
                ///   - maxHeight:
                ///   - counterAxisSpacing:
                ///   - opacity:
                ///   - fontFamily:
                ///   - fontSize:
                ///   - fontStyle:
                ///   - fontWeight:
                ///   - letterSpacing:
                ///   - lineHeight:
                ///   - paragraphSpacing:
                ///   - paragraphIndent:
                ///   - fills:
                ///   - strokes:
                ///   - componentProperties:
                ///   - textRangeFills:
                ///   - effects:
                ///   - layoutGrids:
                public init(
                    size: Components.Schemas.IsLayerTrait.boundVariablesPayload.sizePayload? = nil,
                    individualStrokeWeights: Components.Schemas.IsLayerTrait.boundVariablesPayload.individualStrokeWeightsPayload? = nil,
                    characters: Components.Schemas.VariableAlias? = nil,
                    itemSpacing: Components.Schemas.VariableAlias? = nil,
                    paddingLeft: Components.Schemas.VariableAlias? = nil,
                    paddingRight: Components.Schemas.VariableAlias? = nil,
                    paddingTop: Components.Schemas.VariableAlias? = nil,
                    paddingBottom: Components.Schemas.VariableAlias? = nil,
                    visible: Components.Schemas.VariableAlias? = nil,
                    topLeftRadius: Components.Schemas.VariableAlias? = nil,
                    topRightRadius: Components.Schemas.VariableAlias? = nil,
                    bottomLeftRadius: Components.Schemas.VariableAlias? = nil,
                    bottomRightRadius: Components.Schemas.VariableAlias? = nil,
                    minWidth: Components.Schemas.VariableAlias? = nil,
                    maxWidth: Components.Schemas.VariableAlias? = nil,
                    minHeight: Components.Schemas.VariableAlias? = nil,
                    maxHeight: Components.Schemas.VariableAlias? = nil,
                    counterAxisSpacing: Components.Schemas.VariableAlias? = nil,
                    opacity: Components.Schemas.VariableAlias? = nil,
                    fontFamily: [Components.Schemas.VariableAlias]? = nil,
                    fontSize: [Components.Schemas.VariableAlias]? = nil,
                    fontStyle: [Components.Schemas.VariableAlias]? = nil,
                    fontWeight: [Components.Schemas.VariableAlias]? = nil,
                    letterSpacing: [Components.Schemas.VariableAlias]? = nil,
                    lineHeight: [Components.Schemas.VariableAlias]? = nil,
                    paragraphSpacing: [Components.Schemas.VariableAlias]? = nil,
                    paragraphIndent: [Components.Schemas.VariableAlias]? = nil,
                    fills: [Components.Schemas.VariableAlias]? = nil,
                    strokes: [Components.Schemas.VariableAlias]? = nil,
                    componentProperties: Components.Schemas.IsLayerTrait.boundVariablesPayload.componentPropertiesPayload? = nil,
                    textRangeFills: [Components.Schemas.VariableAlias]? = nil,
                    effects: [Components.Schemas.VariableAlias]? = nil,
                    layoutGrids: [Components.Schemas.VariableAlias]? = nil
                ) {
                    self.size = size
                    self.individualStrokeWeights = individualStrokeWeights
                    self.characters = characters
                    self.itemSpacing = itemSpacing
                    self.paddingLeft = paddingLeft
                    self.paddingRight = paddingRight
                    self.paddingTop = paddingTop
                    self.paddingBottom = paddingBottom
                    self.visible = visible
                    self.topLeftRadius = topLeftRadius
                    self.topRightRadius = topRightRadius
                    self.bottomLeftRadius = bottomLeftRadius
                    self.bottomRightRadius = bottomRightRadius
                    self.minWidth = minWidth
                    self.maxWidth = maxWidth
                    self.minHeight = minHeight
                    self.maxHeight = maxHeight
                    self.counterAxisSpacing = counterAxisSpacing
                    self.opacity = opacity
                    self.fontFamily = fontFamily
                    self.fontSize = fontSize
                    self.fontStyle = fontStyle
                    self.fontWeight = fontWeight
                    self.letterSpacing = letterSpacing
                    self.lineHeight = lineHeight
                    self.paragraphSpacing = paragraphSpacing
                    self.paragraphIndent = paragraphIndent
                    self.fills = fills
                    self.strokes = strokes
                    self.componentProperties = componentProperties
                    self.textRangeFills = textRangeFills
                    self.effects = effects
                    self.layoutGrids = layoutGrids
                }
                public enum CodingKeys: String, CodingKey {
                    case size
                    case individualStrokeWeights
                    case characters
                    case itemSpacing
                    case paddingLeft
                    case paddingRight
                    case paddingTop
                    case paddingBottom
                    case visible
                    case topLeftRadius
                    case topRightRadius
                    case bottomLeftRadius
                    case bottomRightRadius
                    case minWidth
                    case maxWidth
                    case minHeight
                    case maxHeight
                    case counterAxisSpacing
                    case opacity
                    case fontFamily
                    case fontSize
                    case fontStyle
                    case fontWeight
                    case letterSpacing
                    case lineHeight
                    case paragraphSpacing
                    case paragraphIndent
                    case fills
                    case strokes
                    case componentProperties
                    case textRangeFills
                    case effects
                    case layoutGrids
                }
            }
            /// A mapping of field to the variables applied to this field. Most fields will only map to a single `VariableAlias`. However, for properties like `fills`, `strokes`, `size`, `componentProperties`, and `textRangeFills`, it is possible to have multiple variables bound to the field.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/boundVariables`.
            public var boundVariables: Components.Schemas.IsLayerTrait.boundVariablesPayload?
            /// A mapping of variable collection ID to mode ID representing the explicitly set modes for this node.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/explicitVariableModes`.
            public struct explicitVariableModesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `explicitVariableModesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A mapping of variable collection ID to mode ID representing the explicitly set modes for this node.
            ///
            /// - Remark: Generated from `#/components/schemas/IsLayerTrait/explicitVariableModes`.
            public var explicitVariableModes: Components.Schemas.IsLayerTrait.explicitVariableModesPayload?
            /// Creates a new `IsLayerTrait`.
            ///
            /// - Parameters:
            ///   - id: A string uniquely identifying this node within the document.
            ///   - name: The name given to the node by the user in the tool.
            ///   - _type: The type of the node
            ///   - visible: Whether or not the node is visible on the canvas.
            ///   - locked: If true, layer is locked and cannot be edited
            ///   - isFixed: Whether the layer is fixed while the parent is scrolling
            ///   - scrollBehavior: How layer should be treated when the frame is resized
            ///   - rotation: The rotation of the node, if not 0.
            ///   - componentPropertyReferences: A mapping of a layer's property to component property name of component properties attached to this node. The component property name can be used to look up more information on the corresponding component's or component set's componentPropertyDefinitions.
            ///   - pluginData: Data written by plugins that is visible only to the plugin that wrote it. Requires the `pluginData` to include the ID of the plugin.
            ///   - sharedPluginData: Data written by plugins that is visible to all plugins. Requires the `pluginData` parameter to include the string "shared".
            ///   - boundVariables: A mapping of field to the variables applied to this field. Most fields will only map to a single `VariableAlias`. However, for properties like `fills`, `strokes`, `size`, `componentProperties`, and `textRangeFills`, it is possible to have multiple variables bound to the field.
            ///   - explicitVariableModes: A mapping of variable collection ID to mode ID representing the explicitly set modes for this node.
            public init(
                id: Swift.String,
                name: Swift.String,
                _type: Swift.String,
                visible: Swift.Bool? = nil,
                locked: Swift.Bool? = nil,
                isFixed: Swift.Bool? = nil,
                scrollBehavior: Components.Schemas.IsLayerTrait.scrollBehaviorPayload,
                rotation: Swift.Double? = nil,
                componentPropertyReferences: Components.Schemas.IsLayerTrait.componentPropertyReferencesPayload? = nil,
                pluginData: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                sharedPluginData: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                boundVariables: Components.Schemas.IsLayerTrait.boundVariablesPayload? = nil,
                explicitVariableModes: Components.Schemas.IsLayerTrait.explicitVariableModesPayload? = nil
            ) {
                self.id = id
                self.name = name
                self._type = _type
                self.visible = visible
                self.locked = locked
                self.isFixed = isFixed
                self.scrollBehavior = scrollBehavior
                self.rotation = rotation
                self.componentPropertyReferences = componentPropertyReferences
                self.pluginData = pluginData
                self.sharedPluginData = sharedPluginData
                self.boundVariables = boundVariables
                self.explicitVariableModes = explicitVariableModes
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case _type = "type"
                case visible
                case locked
                case isFixed
                case scrollBehavior
                case rotation
                case componentPropertyReferences
                case pluginData
                case sharedPluginData
                case boundVariables
                case explicitVariableModes
            }
        }
        /// - Remark: Generated from `#/components/schemas/HasChildrenTrait`.
        public struct HasChildrenTrait: Codable, Hashable, Sendable {
            /// An array of nodes that are direct children of this node
            ///
            /// - Remark: Generated from `#/components/schemas/HasChildrenTrait/children`.
            public var children: [Components.Schemas.SubcanvasNode] {
                get  {
                    storage.value.children
                }
                _modify {
                    yield &storage.value.children
                }
            }
            /// Creates a new `HasChildrenTrait`.
            ///
            /// - Parameters:
            ///   - children: An array of nodes that are direct children of this node
            public init(children: [Components.Schemas.SubcanvasNode]) {
                storage = .init(value: .init(children: children))
            }
            public enum CodingKeys: String, CodingKey {
                case children
            }
            public init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// An array of nodes that are direct children of this node
                ///
                /// - Remark: Generated from `#/components/schemas/HasChildrenTrait/children`.
                var children: [Components.Schemas.SubcanvasNode]
                init(children: [Components.Schemas.SubcanvasNode]) {
                    self.children = children
                }
                typealias CodingKeys = Components.Schemas.HasChildrenTrait.CodingKeys
            }
        }
        /// - Remark: Generated from `#/components/schemas/HasLayoutTrait`.
        public struct HasLayoutTrait: Codable, Hashable, Sendable {
            /// Bounding box of the node in absolute space coordinates.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/absoluteBoundingBox`.
            @frozen public enum absoluteBoundingBoxPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/absoluteBoundingBox/case1`.
                case Rectangle(Components.Schemas.Rectangle)
                /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/absoluteBoundingBox/case2`.
                case case2(OpenAPIRuntime.OpenAPIValueContainer)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .Rectangle(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .Rectangle(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Bounding box of the node in absolute space coordinates.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/absoluteBoundingBox`.
            public var absoluteBoundingBox: Components.Schemas.HasLayoutTrait.absoluteBoundingBoxPayload
            /// The actual bounds of a node accounting for drop shadows, thick strokes, and anything else that may fall outside the node's regular bounding box defined in `x`, `y`, `width`, and `height`. The `x` and `y` inside this property represent the absolute position of the node on the page. This value will be `null` if the node is invisible.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/absoluteRenderBounds`.
            @frozen public enum absoluteRenderBoundsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/absoluteRenderBounds/case1`.
                case Rectangle(Components.Schemas.Rectangle)
                /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/absoluteRenderBounds/case2`.
                case case2(OpenAPIRuntime.OpenAPIValueContainer)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .Rectangle(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .Rectangle(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The actual bounds of a node accounting for drop shadows, thick strokes, and anything else that may fall outside the node's regular bounding box defined in `x`, `y`, `width`, and `height`. The `x` and `y` inside this property represent the absolute position of the node on the page. This value will be `null` if the node is invisible.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/absoluteRenderBounds`.
            public var absoluteRenderBounds: Components.Schemas.HasLayoutTrait.absoluteRenderBoundsPayload
            /// Keep height and width constrained to same ratio.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/preserveRatio`.
            public var preserveRatio: Swift.Bool?
            /// Horizontal and vertical layout constraints for node.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/constraints`.
            public var constraints: Components.Schemas.LayoutConstraint?
            /// The top two rows of a matrix that represents the 2D transform of this node relative to its parent. The bottom row of the matrix is implicitly always (0, 0, 1). Use to transform coordinates in geometry. Only present if `geometry=paths` is passed.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/relativeTransform`.
            public var relativeTransform: Components.Schemas.Transform?
            /// Width and height of element. This is different from the width and height of the bounding box in that the absolute bounding box represents the element after scaling and rotation. Only present if `geometry=paths` is passed.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/size`.
            public var size: Components.Schemas.Vector?
            ///
            /// Determines if the layer should stretch along the parent's counter axis. This property is only provided for direct children of auto-layout frames.
            ///
            /// - `INHERIT`
            /// - `STRETCH`
            ///
            /// In previous versions of auto layout, determined how the layer is aligned inside an auto-layout frame. This property is only provided for direct children of auto-layout frames.
            ///
            /// - `MIN`
            /// - `CENTER`
            /// - `MAX`
            /// - `STRETCH`
            ///
            /// In horizontal auto-layout frames, "MIN" and "MAX" correspond to "TOP" and "BOTTOM". In vertical auto-layout frames, "MIN" and "MAX" correspond to "LEFT" and "RIGHT".
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/layoutAlign`.
            @frozen public enum layoutAlignPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case INHERIT = "INHERIT"
                case STRETCH = "STRETCH"
                case MIN = "MIN"
                case CENTER = "CENTER"
                case MAX = "MAX"
            }
            ///
            /// Determines if the layer should stretch along the parent's counter axis. This property is only provided for direct children of auto-layout frames.
            ///
            /// - `INHERIT`
            /// - `STRETCH`
            ///
            /// In previous versions of auto layout, determined how the layer is aligned inside an auto-layout frame. This property is only provided for direct children of auto-layout frames.
            ///
            /// - `MIN`
            /// - `CENTER`
            /// - `MAX`
            /// - `STRETCH`
            ///
            /// In horizontal auto-layout frames, "MIN" and "MAX" correspond to "TOP" and "BOTTOM". In vertical auto-layout frames, "MIN" and "MAX" correspond to "LEFT" and "RIGHT".
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/layoutAlign`.
            public var layoutAlign: Components.Schemas.HasLayoutTrait.layoutAlignPayload?
            /// This property is applicable only for direct children of auto-layout frames, ignored otherwise. Determines whether a layer should stretch along the parent's primary axis. A `0` corresponds to a fixed size and `1` corresponds to stretch.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/layoutGrow`.
            public var layoutGrow: Swift.Double?
            /// Determines whether a layer's size and position should be determined by auto-layout settings or manually adjustable.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/layoutPositioning`.
            @frozen public enum layoutPositioningPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case AUTO = "AUTO"
                case ABSOLUTE = "ABSOLUTE"
            }
            /// Determines whether a layer's size and position should be determined by auto-layout settings or manually adjustable.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/layoutPositioning`.
            public var layoutPositioning: Components.Schemas.HasLayoutTrait.layoutPositioningPayload?
            /// The minimum width of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/minWidth`.
            public var minWidth: Swift.Double?
            /// The maximum width of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/maxWidth`.
            public var maxWidth: Swift.Double?
            /// The minimum height of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/minHeight`.
            public var minHeight: Swift.Double?
            /// The maximum height of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/maxHeight`.
            public var maxHeight: Swift.Double?
            /// The horizontal sizing setting on this auto-layout frame or frame child.
            /// - `FIXED`
            /// - `HUG`: only valid on auto-layout frames and text nodes
            /// - `FILL`: only valid on auto-layout frame children
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/layoutSizingHorizontal`.
            @frozen public enum layoutSizingHorizontalPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case FIXED = "FIXED"
                case HUG = "HUG"
                case FILL = "FILL"
            }
            /// The horizontal sizing setting on this auto-layout frame or frame child.
            /// - `FIXED`
            /// - `HUG`: only valid on auto-layout frames and text nodes
            /// - `FILL`: only valid on auto-layout frame children
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/layoutSizingHorizontal`.
            public var layoutSizingHorizontal: Components.Schemas.HasLayoutTrait.layoutSizingHorizontalPayload?
            /// The vertical sizing setting on this auto-layout frame or frame child.
            /// - `FIXED`
            /// - `HUG`: only valid on auto-layout frames and text nodes
            /// - `FILL`: only valid on auto-layout frame children
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/layoutSizingVertical`.
            @frozen public enum layoutSizingVerticalPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case FIXED = "FIXED"
                case HUG = "HUG"
                case FILL = "FILL"
            }
            /// The vertical sizing setting on this auto-layout frame or frame child.
            /// - `FIXED`
            /// - `HUG`: only valid on auto-layout frames and text nodes
            /// - `FILL`: only valid on auto-layout frame children
            ///
            /// - Remark: Generated from `#/components/schemas/HasLayoutTrait/layoutSizingVertical`.
            public var layoutSizingVertical: Components.Schemas.HasLayoutTrait.layoutSizingVerticalPayload?
            /// Creates a new `HasLayoutTrait`.
            ///
            /// - Parameters:
            ///   - absoluteBoundingBox: Bounding box of the node in absolute space coordinates.
            ///   - absoluteRenderBounds: The actual bounds of a node accounting for drop shadows, thick strokes, and anything else that may fall outside the node's regular bounding box defined in `x`, `y`, `width`, and `height`. The `x` and `y` inside this property represent the absolute position of the node on the page. This value will be `null` if the node is invisible.
            ///   - preserveRatio: Keep height and width constrained to same ratio.
            ///   - constraints: Horizontal and vertical layout constraints for node.
            ///   - relativeTransform: The top two rows of a matrix that represents the 2D transform of this node relative to its parent. The bottom row of the matrix is implicitly always (0, 0, 1). Use to transform coordinates in geometry. Only present if `geometry=paths` is passed.
            ///   - size: Width and height of element. This is different from the width and height of the bounding box in that the absolute bounding box represents the element after scaling and rotation. Only present if `geometry=paths` is passed.
            ///   - layoutAlign: Determines if the layer should stretch along the parent's counter axis. This property is only provided for direct children of auto-layout frames.
            ///   - layoutGrow: This property is applicable only for direct children of auto-layout frames, ignored otherwise. Determines whether a layer should stretch along the parent's primary axis. A `0` corresponds to a fixed size and `1` corresponds to stretch.
            ///   - layoutPositioning: Determines whether a layer's size and position should be determined by auto-layout settings or manually adjustable.
            ///   - minWidth: The minimum width of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
            ///   - maxWidth: The maximum width of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
            ///   - minHeight: The minimum height of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
            ///   - maxHeight: The maximum height of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
            ///   - layoutSizingHorizontal: The horizontal sizing setting on this auto-layout frame or frame child.
            ///   - layoutSizingVertical: The vertical sizing setting on this auto-layout frame or frame child.
            public init(
                absoluteBoundingBox: Components.Schemas.HasLayoutTrait.absoluteBoundingBoxPayload,
                absoluteRenderBounds: Components.Schemas.HasLayoutTrait.absoluteRenderBoundsPayload,
                preserveRatio: Swift.Bool? = nil,
                constraints: Components.Schemas.LayoutConstraint? = nil,
                relativeTransform: Components.Schemas.Transform? = nil,
                size: Components.Schemas.Vector? = nil,
                layoutAlign: Components.Schemas.HasLayoutTrait.layoutAlignPayload? = nil,
                layoutGrow: Swift.Double? = nil,
                layoutPositioning: Components.Schemas.HasLayoutTrait.layoutPositioningPayload? = nil,
                minWidth: Swift.Double? = nil,
                maxWidth: Swift.Double? = nil,
                minHeight: Swift.Double? = nil,
                maxHeight: Swift.Double? = nil,
                layoutSizingHorizontal: Components.Schemas.HasLayoutTrait.layoutSizingHorizontalPayload? = nil,
                layoutSizingVertical: Components.Schemas.HasLayoutTrait.layoutSizingVerticalPayload? = nil
            ) {
                self.absoluteBoundingBox = absoluteBoundingBox
                self.absoluteRenderBounds = absoluteRenderBounds
                self.preserveRatio = preserveRatio
                self.constraints = constraints
                self.relativeTransform = relativeTransform
                self.size = size
                self.layoutAlign = layoutAlign
                self.layoutGrow = layoutGrow
                self.layoutPositioning = layoutPositioning
                self.minWidth = minWidth
                self.maxWidth = maxWidth
                self.minHeight = minHeight
                self.maxHeight = maxHeight
                self.layoutSizingHorizontal = layoutSizingHorizontal
                self.layoutSizingVertical = layoutSizingVertical
            }
            public enum CodingKeys: String, CodingKey {
                case absoluteBoundingBox
                case absoluteRenderBounds
                case preserveRatio
                case constraints
                case relativeTransform
                case size
                case layoutAlign
                case layoutGrow
                case layoutPositioning
                case minWidth
                case maxWidth
                case minHeight
                case maxHeight
                case layoutSizingHorizontal
                case layoutSizingVertical
            }
        }
        /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait`.
        public struct HasFramePropertiesTrait: Codable, Hashable, Sendable {
            /// Whether or not this node clip content outside of its bounds
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/clipsContent`.
            public var clipsContent: Swift.Bool
            /// Background of the node. This is deprecated, as backgrounds for frames are now in the `fills` field.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/background`.
            @available(*, deprecated)
            public var background: [Components.Schemas.Paint]?
            /// Background color of the node. This is deprecated, as frames now support more than a solid color as a background. Please use the `fills` field instead.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/backgroundColor`.
            @available(*, deprecated)
            public var backgroundColor: Components.Schemas.RGBA?
            /// An array of layout grids attached to this node (see layout grids section for more details). GROUP nodes do not have this attribute
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/layoutGrids`.
            public var layoutGrids: [Components.Schemas.LayoutGrid]?
            /// Whether a node has primary axis scrolling, horizontal or vertical.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/overflowDirection`.
            @frozen public enum overflowDirectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case HORIZONTAL_SCROLLING = "HORIZONTAL_SCROLLING"
                case VERTICAL_SCROLLING = "VERTICAL_SCROLLING"
                case HORIZONTAL_AND_VERTICAL_SCROLLING = "HORIZONTAL_AND_VERTICAL_SCROLLING"
                case NONE = "NONE"
            }
            /// Whether a node has primary axis scrolling, horizontal or vertical.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/overflowDirection`.
            public var overflowDirection: Components.Schemas.HasFramePropertiesTrait.overflowDirectionPayload?
            /// Whether this layer uses auto-layout to position its children.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/layoutMode`.
            @frozen public enum layoutModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case NONE = "NONE"
                case HORIZONTAL = "HORIZONTAL"
                case VERTICAL = "VERTICAL"
            }
            /// Whether this layer uses auto-layout to position its children.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/layoutMode`.
            public var layoutMode: Components.Schemas.HasFramePropertiesTrait.layoutModePayload?
            /// Whether the primary axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine). This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/primaryAxisSizingMode`.
            @frozen public enum primaryAxisSizingModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case FIXED = "FIXED"
                case AUTO = "AUTO"
            }
            /// Whether the primary axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine). This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/primaryAxisSizingMode`.
            public var primaryAxisSizingMode: Components.Schemas.HasFramePropertiesTrait.primaryAxisSizingModePayload?
            /// Whether the counter axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine). This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/counterAxisSizingMode`.
            @frozen public enum counterAxisSizingModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case FIXED = "FIXED"
                case AUTO = "AUTO"
            }
            /// Whether the counter axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine). This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/counterAxisSizingMode`.
            public var counterAxisSizingMode: Components.Schemas.HasFramePropertiesTrait.counterAxisSizingModePayload?
            /// Determines how the auto-layout frame's children should be aligned in the primary axis direction. This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/primaryAxisAlignItems`.
            @frozen public enum primaryAxisAlignItemsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case MIN = "MIN"
                case CENTER = "CENTER"
                case MAX = "MAX"
                case SPACE_BETWEEN = "SPACE_BETWEEN"
            }
            /// Determines how the auto-layout frame's children should be aligned in the primary axis direction. This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/primaryAxisAlignItems`.
            public var primaryAxisAlignItems: Components.Schemas.HasFramePropertiesTrait.primaryAxisAlignItemsPayload?
            /// Determines how the auto-layout frame's children should be aligned in the counter axis direction. This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/counterAxisAlignItems`.
            @frozen public enum counterAxisAlignItemsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case MIN = "MIN"
                case CENTER = "CENTER"
                case MAX = "MAX"
                case BASELINE = "BASELINE"
            }
            /// Determines how the auto-layout frame's children should be aligned in the counter axis direction. This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/counterAxisAlignItems`.
            public var counterAxisAlignItems: Components.Schemas.HasFramePropertiesTrait.counterAxisAlignItemsPayload?
            /// The padding between the left border of the frame and its children. This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/paddingLeft`.
            public var paddingLeft: Swift.Double?
            /// The padding between the right border of the frame and its children. This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/paddingRight`.
            public var paddingRight: Swift.Double?
            /// The padding between the top border of the frame and its children. This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/paddingTop`.
            public var paddingTop: Swift.Double?
            /// The padding between the bottom border of the frame and its children. This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/paddingBottom`.
            public var paddingBottom: Swift.Double?
            /// The distance between children of the frame. Can be negative. This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/itemSpacing`.
            public var itemSpacing: Swift.Double?
            /// Determines the canvas stacking order of layers in this frame. When true, the first layer will be draw on top. This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/itemReverseZIndex`.
            public var itemReverseZIndex: Swift.Bool?
            /// Determines whether strokes are included in layout calculations. When true, auto-layout frames behave like css "box-sizing: border-box". This property is only applicable for auto-layout frames.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/strokesIncludedInLayout`.
            public var strokesIncludedInLayout: Swift.Bool?
            /// Whether this auto-layout frame has wrapping enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/layoutWrap`.
            @frozen public enum layoutWrapPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case NO_WRAP = "NO_WRAP"
                case WRAP = "WRAP"
            }
            /// Whether this auto-layout frame has wrapping enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/layoutWrap`.
            public var layoutWrap: Components.Schemas.HasFramePropertiesTrait.layoutWrapPayload?
            /// The distance between wrapped tracks of an auto-layout frame. This property is only applicable for auto-layout frames with `layoutWrap: "WRAP"`
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/counterAxisSpacing`.
            public var counterAxisSpacing: Swift.Double?
            /// Determines how the auto-layout frame’s wrapped tracks should be aligned in the counter axis direction. This property is only applicable for auto-layout frames with `layoutWrap: "WRAP"`.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/counterAxisAlignContent`.
            @frozen public enum counterAxisAlignContentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case AUTO = "AUTO"
                case SPACE_BETWEEN = "SPACE_BETWEEN"
            }
            /// Determines how the auto-layout frame’s wrapped tracks should be aligned in the counter axis direction. This property is only applicable for auto-layout frames with `layoutWrap: "WRAP"`.
            ///
            /// - Remark: Generated from `#/components/schemas/HasFramePropertiesTrait/counterAxisAlignContent`.
            public var counterAxisAlignContent: Components.Schemas.HasFramePropertiesTrait.counterAxisAlignContentPayload?
            /// Creates a new `HasFramePropertiesTrait`.
            ///
            /// - Parameters:
            ///   - clipsContent: Whether or not this node clip content outside of its bounds
            ///   - background: Background of the node. This is deprecated, as backgrounds for frames are now in the `fills` field.
            ///   - backgroundColor: Background color of the node. This is deprecated, as frames now support more than a solid color as a background. Please use the `fills` field instead.
            ///   - layoutGrids: An array of layout grids attached to this node (see layout grids section for more details). GROUP nodes do not have this attribute
            ///   - overflowDirection: Whether a node has primary axis scrolling, horizontal or vertical.
            ///   - layoutMode: Whether this layer uses auto-layout to position its children.
            ///   - primaryAxisSizingMode: Whether the primary axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine). This property is only applicable for auto-layout frames.
            ///   - counterAxisSizingMode: Whether the counter axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine). This property is only applicable for auto-layout frames.
            ///   - primaryAxisAlignItems: Determines how the auto-layout frame's children should be aligned in the primary axis direction. This property is only applicable for auto-layout frames.
            ///   - counterAxisAlignItems: Determines how the auto-layout frame's children should be aligned in the counter axis direction. This property is only applicable for auto-layout frames.
            ///   - paddingLeft: The padding between the left border of the frame and its children. This property is only applicable for auto-layout frames.
            ///   - paddingRight: The padding between the right border of the frame and its children. This property is only applicable for auto-layout frames.
            ///   - paddingTop: The padding between the top border of the frame and its children. This property is only applicable for auto-layout frames.
            ///   - paddingBottom: The padding between the bottom border of the frame and its children. This property is only applicable for auto-layout frames.
            ///   - itemSpacing: The distance between children of the frame. Can be negative. This property is only applicable for auto-layout frames.
            ///   - itemReverseZIndex: Determines the canvas stacking order of layers in this frame. When true, the first layer will be draw on top. This property is only applicable for auto-layout frames.
            ///   - strokesIncludedInLayout: Determines whether strokes are included in layout calculations. When true, auto-layout frames behave like css "box-sizing: border-box". This property is only applicable for auto-layout frames.
            ///   - layoutWrap: Whether this auto-layout frame has wrapping enabled.
            ///   - counterAxisSpacing: The distance between wrapped tracks of an auto-layout frame. This property is only applicable for auto-layout frames with `layoutWrap: "WRAP"`
            ///   - counterAxisAlignContent: Determines how the auto-layout frame’s wrapped tracks should be aligned in the counter axis direction. This property is only applicable for auto-layout frames with `layoutWrap: "WRAP"`.
            public init(
                clipsContent: Swift.Bool,
                background: [Components.Schemas.Paint]? = nil,
                backgroundColor: Components.Schemas.RGBA? = nil,
                layoutGrids: [Components.Schemas.LayoutGrid]? = nil,
                overflowDirection: Components.Schemas.HasFramePropertiesTrait.overflowDirectionPayload? = nil,
                layoutMode: Components.Schemas.HasFramePropertiesTrait.layoutModePayload? = nil,
                primaryAxisSizingMode: Components.Schemas.HasFramePropertiesTrait.primaryAxisSizingModePayload? = nil,
                counterAxisSizingMode: Components.Schemas.HasFramePropertiesTrait.counterAxisSizingModePayload? = nil,
                primaryAxisAlignItems: Components.Schemas.HasFramePropertiesTrait.primaryAxisAlignItemsPayload? = nil,
                counterAxisAlignItems: Components.Schemas.HasFramePropertiesTrait.counterAxisAlignItemsPayload? = nil,
                paddingLeft: Swift.Double? = nil,
                paddingRight: Swift.Double? = nil,
                paddingTop: Swift.Double? = nil,
                paddingBottom: Swift.Double? = nil,
                itemSpacing: Swift.Double? = nil,
                itemReverseZIndex: Swift.Bool? = nil,
                strokesIncludedInLayout: Swift.Bool? = nil,
                layoutWrap: Components.Schemas.HasFramePropertiesTrait.layoutWrapPayload? = nil,
                counterAxisSpacing: Swift.Double? = nil,
                counterAxisAlignContent: Components.Schemas.HasFramePropertiesTrait.counterAxisAlignContentPayload? = nil
            ) {
                self.clipsContent = clipsContent
                self.background = background
                self.backgroundColor = backgroundColor
                self.layoutGrids = layoutGrids
                self.overflowDirection = overflowDirection
                self.layoutMode = layoutMode
                self.primaryAxisSizingMode = primaryAxisSizingMode
                self.counterAxisSizingMode = counterAxisSizingMode
                self.primaryAxisAlignItems = primaryAxisAlignItems
                self.counterAxisAlignItems = counterAxisAlignItems
                self.paddingLeft = paddingLeft
                self.paddingRight = paddingRight
                self.paddingTop = paddingTop
                self.paddingBottom = paddingBottom
                self.itemSpacing = itemSpacing
                self.itemReverseZIndex = itemReverseZIndex
                self.strokesIncludedInLayout = strokesIncludedInLayout
                self.layoutWrap = layoutWrap
                self.counterAxisSpacing = counterAxisSpacing
                self.counterAxisAlignContent = counterAxisAlignContent
            }
            public enum CodingKeys: String, CodingKey {
                case clipsContent
                case background
                case backgroundColor
                case layoutGrids
                case overflowDirection
                case layoutMode
                case primaryAxisSizingMode
                case counterAxisSizingMode
                case primaryAxisAlignItems
                case counterAxisAlignItems
                case paddingLeft
                case paddingRight
                case paddingTop
                case paddingBottom
                case itemSpacing
                case itemReverseZIndex
                case strokesIncludedInLayout
                case layoutWrap
                case counterAxisSpacing
                case counterAxisAlignContent
            }
        }
        /// - Remark: Generated from `#/components/schemas/HasBlendModeAndOpacityTrait`.
        public struct HasBlendModeAndOpacityTrait: Codable, Hashable, Sendable {
            /// How this node blends with nodes behind it in the scene (see blend mode section for more details)
            ///
            /// - Remark: Generated from `#/components/schemas/HasBlendModeAndOpacityTrait/blendMode`.
            public var blendMode: Components.Schemas.BlendMode
            /// Opacity of the node
            ///
            /// - Remark: Generated from `#/components/schemas/HasBlendModeAndOpacityTrait/opacity`.
            public var opacity: Swift.Double?
            /// Creates a new `HasBlendModeAndOpacityTrait`.
            ///
            /// - Parameters:
            ///   - blendMode: How this node blends with nodes behind it in the scene (see blend mode section for more details)
            ///   - opacity: Opacity of the node
            public init(
                blendMode: Components.Schemas.BlendMode,
                opacity: Swift.Double? = nil
            ) {
                self.blendMode = blendMode
                self.opacity = opacity
            }
            public enum CodingKeys: String, CodingKey {
                case blendMode
                case opacity
            }
        }
        /// - Remark: Generated from `#/components/schemas/HasExportSettingsTrait`.
        public struct HasExportSettingsTrait: Codable, Hashable, Sendable {
            /// An array of export settings representing images to export from the node.
            ///
            /// - Remark: Generated from `#/components/schemas/HasExportSettingsTrait/exportSettings`.
            public var exportSettings: [Components.Schemas.ExportSetting]?
            /// Creates a new `HasExportSettingsTrait`.
            ///
            /// - Parameters:
            ///   - exportSettings: An array of export settings representing images to export from the node.
            public init(exportSettings: [Components.Schemas.ExportSetting]? = nil) {
                self.exportSettings = exportSettings
            }
            public enum CodingKeys: String, CodingKey {
                case exportSettings
            }
        }
        /// - Remark: Generated from `#/components/schemas/HasGeometryTrait`.
        public struct HasGeometryTrait: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value1`.
            public var value1: Components.Schemas.MinimalFillsTrait
            /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value2`.
            public var value2: Components.Schemas.MinimalStrokesTrait
            /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3`.
            public struct Value3Payload: Codable, Hashable, Sendable {
                /// Map from ID to PaintOverride for looking up fill overrides. To see which regions are overriden, you must use the `geometry=paths` option. Each path returned may have an `overrideID` which maps to this table.
                ///
                /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3/fillOverrideTable`.
                public struct fillOverrideTablePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3/fillOverrideTable/additionalProperties`.
                    @frozen public enum additionalPropertiesPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3/fillOverrideTable/additionalProperties/case1`.
                        case PaintOverride(Components.Schemas.PaintOverride)
                        /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3/fillOverrideTable/additionalProperties/case2`.
                        case case2(OpenAPIRuntime.OpenAPIValueContainer)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .PaintOverride(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .PaintOverride(value):
                                try value.encode(to: encoder)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Components.Schemas.HasGeometryTrait.Value3Payload.fillOverrideTablePayload.additionalPropertiesPayload]
                    /// Creates a new `fillOverrideTablePayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Components.Schemas.HasGeometryTrait.Value3Payload.fillOverrideTablePayload.additionalPropertiesPayload] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Map from ID to PaintOverride for looking up fill overrides. To see which regions are overriden, you must use the `geometry=paths` option. Each path returned may have an `overrideID` which maps to this table.
                ///
                /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3/fillOverrideTable`.
                public var fillOverrideTable: Components.Schemas.HasGeometryTrait.Value3Payload.fillOverrideTablePayload?
                /// Only specified if parameter `geometry=paths` is used. An array of paths representing the object fill.
                ///
                /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3/fillGeometry`.
                public var fillGeometry: [Components.Schemas.Path]?
                /// Only specified if parameter `geometry=paths` is used. An array of paths representing the object stroke.
                ///
                /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3/strokeGeometry`.
                public var strokeGeometry: [Components.Schemas.Path]?
                /// A string enum describing the end caps of vector paths.
                ///
                /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3/strokeCap`.
                @frozen public enum strokeCapPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case NONE = "NONE"
                    case ROUND = "ROUND"
                    case SQUARE = "SQUARE"
                    case LINE_ARROW = "LINE_ARROW"
                    case TRIANGLE_ARROW = "TRIANGLE_ARROW"
                    case DIAMOND_FILLED = "DIAMOND_FILLED"
                    case CIRCLE_FILLED = "CIRCLE_FILLED"
                    case TRIANGLE_FILLED = "TRIANGLE_FILLED"
                    case WASHI_TAPE_1 = "WASHI_TAPE_1"
                    case WASHI_TAPE_2 = "WASHI_TAPE_2"
                    case WASHI_TAPE_3 = "WASHI_TAPE_3"
                    case WASHI_TAPE_4 = "WASHI_TAPE_4"
                    case WASHI_TAPE_5 = "WASHI_TAPE_5"
                    case WASHI_TAPE_6 = "WASHI_TAPE_6"
                }
                /// A string enum describing the end caps of vector paths.
                ///
                /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3/strokeCap`.
                public var strokeCap: Components.Schemas.HasGeometryTrait.Value3Payload.strokeCapPayload?
                /// Only valid if `strokeJoin` is "MITER". The corner angle, in degrees, below which `strokeJoin` will be set to "BEVEL" to avoid super sharp corners. By default this is 28.96 degrees.
                ///
                /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3/strokeMiterAngle`.
                public var strokeMiterAngle: Swift.Double?
                /// Creates a new `Value3Payload`.
                ///
                /// - Parameters:
                ///   - fillOverrideTable: Map from ID to PaintOverride for looking up fill overrides. To see which regions are overriden, you must use the `geometry=paths` option. Each path returned may have an `overrideID` which maps to this table.
                ///   - fillGeometry: Only specified if parameter `geometry=paths` is used. An array of paths representing the object fill.
                ///   - strokeGeometry: Only specified if parameter `geometry=paths` is used. An array of paths representing the object stroke.
                ///   - strokeCap: A string enum describing the end caps of vector paths.
                ///   - strokeMiterAngle: Only valid if `strokeJoin` is "MITER". The corner angle, in degrees, below which `strokeJoin` will be set to "BEVEL" to avoid super sharp corners. By default this is 28.96 degrees.
                public init(
                    fillOverrideTable: Components.Schemas.HasGeometryTrait.Value3Payload.fillOverrideTablePayload? = nil,
                    fillGeometry: [Components.Schemas.Path]? = nil,
                    strokeGeometry: [Components.Schemas.Path]? = nil,
                    strokeCap: Components.Schemas.HasGeometryTrait.Value3Payload.strokeCapPayload? = nil,
                    strokeMiterAngle: Swift.Double? = nil
                ) {
                    self.fillOverrideTable = fillOverrideTable
                    self.fillGeometry = fillGeometry
                    self.strokeGeometry = strokeGeometry
                    self.strokeCap = strokeCap
                    self.strokeMiterAngle = strokeMiterAngle
                }
                public enum CodingKeys: String, CodingKey {
                    case fillOverrideTable
                    case fillGeometry
                    case strokeGeometry
                    case strokeCap
                    case strokeMiterAngle
                }
            }
            /// - Remark: Generated from `#/components/schemas/HasGeometryTrait/value3`.
            public var value3: Components.Schemas.HasGeometryTrait.Value3Payload
            /// Creates a new `HasGeometryTrait`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            public init(
                value1: Components.Schemas.MinimalFillsTrait,
                value2: Components.Schemas.MinimalStrokesTrait,
                value3: Components.Schemas.HasGeometryTrait.Value3Payload
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/MinimalFillsTrait`.
        public struct MinimalFillsTrait: Codable, Hashable, Sendable {
            /// An array of fill paints applied to the node.
            ///
            /// - Remark: Generated from `#/components/schemas/MinimalFillsTrait/fills`.
            public var fills: [Components.Schemas.Paint]
            /// A mapping of a StyleType to style ID (see Style) of styles present on this node. The style ID can be used to look up more information about the style in the top-level styles field.
            ///
            /// - Remark: Generated from `#/components/schemas/MinimalFillsTrait/styles`.
            public struct stylesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `stylesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A mapping of a StyleType to style ID (see Style) of styles present on this node. The style ID can be used to look up more information about the style in the top-level styles field.
            ///
            /// - Remark: Generated from `#/components/schemas/MinimalFillsTrait/styles`.
            public var styles: Components.Schemas.MinimalFillsTrait.stylesPayload?
            /// Creates a new `MinimalFillsTrait`.
            ///
            /// - Parameters:
            ///   - fills: An array of fill paints applied to the node.
            ///   - styles: A mapping of a StyleType to style ID (see Style) of styles present on this node. The style ID can be used to look up more information about the style in the top-level styles field.
            public init(
                fills: [Components.Schemas.Paint],
                styles: Components.Schemas.MinimalFillsTrait.stylesPayload? = nil
            ) {
                self.fills = fills
                self.styles = styles
            }
            public enum CodingKeys: String, CodingKey {
                case fills
                case styles
            }
        }
        /// - Remark: Generated from `#/components/schemas/MinimalStrokesTrait`.
        public struct MinimalStrokesTrait: Codable, Hashable, Sendable {
            /// An array of stroke paints applied to the node.
            ///
            /// - Remark: Generated from `#/components/schemas/MinimalStrokesTrait/strokes`.
            public var strokes: [Components.Schemas.Paint]?
            /// The weight of strokes on the node.
            ///
            /// - Remark: Generated from `#/components/schemas/MinimalStrokesTrait/strokeWeight`.
            public var strokeWeight: Swift.Double?
            /// Position of stroke relative to vector outline, as a string enum
            ///
            /// - `INSIDE`: stroke drawn inside the shape boundary
            /// - `OUTSIDE`: stroke drawn outside the shape boundary
            /// - `CENTER`: stroke drawn centered along the shape boundary
            ///
            /// - Remark: Generated from `#/components/schemas/MinimalStrokesTrait/strokeAlign`.
            @frozen public enum strokeAlignPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case INSIDE = "INSIDE"
                case OUTSIDE = "OUTSIDE"
                case CENTER = "CENTER"
            }
            /// Position of stroke relative to vector outline, as a string enum
            ///
            /// - `INSIDE`: stroke drawn inside the shape boundary
            /// - `OUTSIDE`: stroke drawn outside the shape boundary
            /// - `CENTER`: stroke drawn centered along the shape boundary
            ///
            /// - Remark: Generated from `#/components/schemas/MinimalStrokesTrait/strokeAlign`.
            public var strokeAlign: Components.Schemas.MinimalStrokesTrait.strokeAlignPayload?
            /// A string enum with value of "MITER", "BEVEL", or "ROUND", describing how corners in vector paths are rendered.
            ///
            /// - Remark: Generated from `#/components/schemas/MinimalStrokesTrait/strokeJoin`.
            @frozen public enum strokeJoinPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case MITER = "MITER"
                case BEVEL = "BEVEL"
                case ROUND = "ROUND"
            }
            /// A string enum with value of "MITER", "BEVEL", or "ROUND", describing how corners in vector paths are rendered.
            ///
            /// - Remark: Generated from `#/components/schemas/MinimalStrokesTrait/strokeJoin`.
            public var strokeJoin: Components.Schemas.MinimalStrokesTrait.strokeJoinPayload?
            /// An array of floating point numbers describing the pattern of dash length and gap lengths that the vector stroke will use when drawn.
            ///
            /// For example a value of [1, 2] indicates that the stroke will be drawn with a dash of length 1 followed by a gap of length 2, repeated.
            ///
            /// - Remark: Generated from `#/components/schemas/MinimalStrokesTrait/strokeDashes`.
            public var strokeDashes: [Swift.Double]?
            /// Creates a new `MinimalStrokesTrait`.
            ///
            /// - Parameters:
            ///   - strokes: An array of stroke paints applied to the node.
            ///   - strokeWeight: The weight of strokes on the node.
            ///   - strokeAlign: Position of stroke relative to vector outline, as a string enum
            ///   - strokeJoin: A string enum with value of "MITER", "BEVEL", or "ROUND", describing how corners in vector paths are rendered.
            ///   - strokeDashes: An array of floating point numbers describing the pattern of dash length and gap lengths that the vector stroke will use when drawn.
            public init(
                strokes: [Components.Schemas.Paint]? = nil,
                strokeWeight: Swift.Double? = nil,
                strokeAlign: Components.Schemas.MinimalStrokesTrait.strokeAlignPayload? = nil,
                strokeJoin: Components.Schemas.MinimalStrokesTrait.strokeJoinPayload? = nil,
                strokeDashes: [Swift.Double]? = nil
            ) {
                self.strokes = strokes
                self.strokeWeight = strokeWeight
                self.strokeAlign = strokeAlign
                self.strokeJoin = strokeJoin
                self.strokeDashes = strokeDashes
            }
            public enum CodingKeys: String, CodingKey {
                case strokes
                case strokeWeight
                case strokeAlign
                case strokeJoin
                case strokeDashes
            }
        }
        /// - Remark: Generated from `#/components/schemas/IndividualStrokesTrait`.
        public struct IndividualStrokesTrait: Codable, Hashable, Sendable {
            /// An object including the top, bottom, left, and right stroke weights. Only returned if individual stroke weights are used.
            ///
            /// - Remark: Generated from `#/components/schemas/IndividualStrokesTrait/individualStrokeWeights`.
            public var individualStrokeWeights: Components.Schemas.StrokeWeights?
            /// Creates a new `IndividualStrokesTrait`.
            ///
            /// - Parameters:
            ///   - individualStrokeWeights: An object including the top, bottom, left, and right stroke weights. Only returned if individual stroke weights are used.
            public init(individualStrokeWeights: Components.Schemas.StrokeWeights? = nil) {
                self.individualStrokeWeights = individualStrokeWeights
            }
            public enum CodingKeys: String, CodingKey {
                case individualStrokeWeights
            }
        }
        /// - Remark: Generated from `#/components/schemas/CornerTrait`.
        public struct CornerTrait: Codable, Hashable, Sendable {
            /// Radius of each corner if a single radius is set for all corners
            ///
            /// - Remark: Generated from `#/components/schemas/CornerTrait/cornerRadius`.
            public var cornerRadius: Swift.Double?
            /// A value that lets you control how "smooth" the corners are. Ranges from 0 to 1. 0 is the default and means that the corner is perfectly circular. A value of 0.6 means the corner matches the iOS 7 "squircle" icon shape. Other values produce various other curves.
            ///
            /// - Remark: Generated from `#/components/schemas/CornerTrait/cornerSmoothing`.
            public var cornerSmoothing: Swift.Double?
            /// Array of length 4 of the radius of each corner of the frame, starting in the top left and proceeding clockwise.
            ///
            /// Values are given in the order top-left, top-right, bottom-right, bottom-left.
            ///
            /// - Remark: Generated from `#/components/schemas/CornerTrait/rectangleCornerRadii`.
            public var rectangleCornerRadii: [Swift.Double]?
            /// Creates a new `CornerTrait`.
            ///
            /// - Parameters:
            ///   - cornerRadius: Radius of each corner if a single radius is set for all corners
            ///   - cornerSmoothing: A value that lets you control how "smooth" the corners are. Ranges from 0 to 1. 0 is the default and means that the corner is perfectly circular. A value of 0.6 means the corner matches the iOS 7 "squircle" icon shape. Other values produce various other curves.
            ///   - rectangleCornerRadii: Array of length 4 of the radius of each corner of the frame, starting in the top left and proceeding clockwise.
            public init(
                cornerRadius: Swift.Double? = nil,
                cornerSmoothing: Swift.Double? = nil,
                rectangleCornerRadii: [Swift.Double]? = nil
            ) {
                self.cornerRadius = cornerRadius
                self.cornerSmoothing = cornerSmoothing
                self.rectangleCornerRadii = rectangleCornerRadii
            }
            public enum CodingKeys: String, CodingKey {
                case cornerRadius
                case cornerSmoothing
                case rectangleCornerRadii
            }
        }
        /// - Remark: Generated from `#/components/schemas/HasEffectsTrait`.
        public struct HasEffectsTrait: Codable, Hashable, Sendable {
            /// An array of effects attached to this node (see effects section for more details)
            ///
            /// - Remark: Generated from `#/components/schemas/HasEffectsTrait/effects`.
            public var effects: [Components.Schemas.Effect]
            /// Creates a new `HasEffectsTrait`.
            ///
            /// - Parameters:
            ///   - effects: An array of effects attached to this node (see effects section for more details)
            public init(effects: [Components.Schemas.Effect]) {
                self.effects = effects
            }
            public enum CodingKeys: String, CodingKey {
                case effects
            }
        }
        /// - Remark: Generated from `#/components/schemas/HasMaskTrait`.
        public struct HasMaskTrait: Codable, Hashable, Sendable {
            /// Does this node mask sibling nodes in front of it?
            ///
            /// - Remark: Generated from `#/components/schemas/HasMaskTrait/isMask`.
            public var isMask: Swift.Bool?
            /// If this layer is a mask, this property describes the operation used to mask the layer's siblings. The value may be one of the following:
            ///
            /// - ALPHA: the mask node's alpha channel will be used to determine the opacity of each pixel in the masked result.
            /// - VECTOR: if the mask node has visible fill paints, every pixel inside the node's fill regions will be fully visible in the masked result. If the mask has visible stroke paints, every pixel inside the node's stroke regions will be fully visible in the masked result.
            /// - LUMINANCE: the luminance value of each pixel of the mask node will be used to determine the opacity of that pixel in the masked result.
            ///
            /// - Remark: Generated from `#/components/schemas/HasMaskTrait/maskType`.
            @frozen public enum maskTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ALPHA = "ALPHA"
                case VECTOR = "VECTOR"
                case LUMINANCE = "LUMINANCE"
            }
            /// If this layer is a mask, this property describes the operation used to mask the layer's siblings. The value may be one of the following:
            ///
            /// - ALPHA: the mask node's alpha channel will be used to determine the opacity of each pixel in the masked result.
            /// - VECTOR: if the mask node has visible fill paints, every pixel inside the node's fill regions will be fully visible in the masked result. If the mask has visible stroke paints, every pixel inside the node's stroke regions will be fully visible in the masked result.
            /// - LUMINANCE: the luminance value of each pixel of the mask node will be used to determine the opacity of that pixel in the masked result.
            ///
            /// - Remark: Generated from `#/components/schemas/HasMaskTrait/maskType`.
            public var maskType: Components.Schemas.HasMaskTrait.maskTypePayload?
            /// True if maskType is VECTOR. This field is deprecated; use maskType instead.
            ///
            /// - Remark: Generated from `#/components/schemas/HasMaskTrait/isMaskOutline`.
            @available(*, deprecated)
            public var isMaskOutline: Swift.Bool?
            /// Creates a new `HasMaskTrait`.
            ///
            /// - Parameters:
            ///   - isMask: Does this node mask sibling nodes in front of it?
            ///   - maskType: If this layer is a mask, this property describes the operation used to mask the layer's siblings. The value may be one of the following:
            ///   - isMaskOutline: True if maskType is VECTOR. This field is deprecated; use maskType instead.
            public init(
                isMask: Swift.Bool? = nil,
                maskType: Components.Schemas.HasMaskTrait.maskTypePayload? = nil,
                isMaskOutline: Swift.Bool? = nil
            ) {
                self.isMask = isMask
                self.maskType = maskType
                self.isMaskOutline = isMaskOutline
            }
            public enum CodingKeys: String, CodingKey {
                case isMask
                case maskType
                case isMaskOutline
            }
        }
        /// - Remark: Generated from `#/components/schemas/ComponentPropertiesTrait`.
        public struct ComponentPropertiesTrait: Codable, Hashable, Sendable {
            /// A mapping of name to `ComponentPropertyDefinition` for every component property on this component. Each property has a type, defaultValue, and other optional values.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentPropertiesTrait/componentPropertyDefinitions`.
            public struct componentPropertyDefinitionsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.ComponentPropertyDefinition]
                /// Creates a new `componentPropertyDefinitionsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.ComponentPropertyDefinition] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A mapping of name to `ComponentPropertyDefinition` for every component property on this component. Each property has a type, defaultValue, and other optional values.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentPropertiesTrait/componentPropertyDefinitions`.
            public var componentPropertyDefinitions: Components.Schemas.ComponentPropertiesTrait.componentPropertyDefinitionsPayload?
            /// Creates a new `ComponentPropertiesTrait`.
            ///
            /// - Parameters:
            ///   - componentPropertyDefinitions: A mapping of name to `ComponentPropertyDefinition` for every component property on this component. Each property has a type, defaultValue, and other optional values.
            public init(componentPropertyDefinitions: Components.Schemas.ComponentPropertiesTrait.componentPropertyDefinitionsPayload? = nil) {
                self.componentPropertyDefinitions = componentPropertyDefinitions
            }
            public enum CodingKeys: String, CodingKey {
                case componentPropertyDefinitions
            }
        }
        /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait`.
        public struct TypePropertiesTrait: Codable, Hashable, Sendable {
            /// The raw characters in the text node.
            ///
            /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait/characters`.
            public var characters: Swift.String
            /// Style of text including font family and weight.
            ///
            /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait/style`.
            public var style: Components.Schemas.TypeStyle
            /// The array corresponds to characters in the text box, where each element references the 'styleOverrideTable' to apply specific styles to each character. The array's length can be less than or equal to the number of characters due to the removal of trailing zeros. Elements with a value of 0 indicate characters that use the default type style. If the array is shorter than the total number of characters, the characters beyond the array's length also use the default style.
            ///
            /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait/characterStyleOverrides`.
            public var characterStyleOverrides: [Swift.Double]
            /// Internal property, preserved for backward compatibility. Avoid using this value.
            ///
            /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait/layoutVersion`.
            public var layoutVersion: Swift.Double?
            /// Map from ID to TypeStyle for looking up style overrides.
            ///
            /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait/styleOverrideTable`.
            public struct styleOverrideTablePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.TypeStyle]
                /// Creates a new `styleOverrideTablePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.TypeStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Map from ID to TypeStyle for looking up style overrides.
            ///
            /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait/styleOverrideTable`.
            public var styleOverrideTable: Components.Schemas.TypePropertiesTrait.styleOverrideTablePayload
            /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait/lineTypesPayload`.
            @frozen public enum lineTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case NONE = "NONE"
                case ORDERED = "ORDERED"
                case UNORDERED = "UNORDERED"
            }
            /// An array with the same number of elements as lines in the text node, where lines are delimited by newline or paragraph separator characters. Each element in the array corresponds to the list type of a specific line. List types are represented as string enums with one of these possible values:
            ///
            /// - `NONE`: Not a list item.
            /// - `ORDERED`: Text is an ordered list (numbered).
            /// - `UNORDERED`: Text is an unordered list (bulleted).
            ///
            /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait/lineTypes`.
            public typealias lineTypesPayload = [Components.Schemas.TypePropertiesTrait.lineTypesPayloadPayload]
            /// An array with the same number of elements as lines in the text node, where lines are delimited by newline or paragraph separator characters. Each element in the array corresponds to the list type of a specific line. List types are represented as string enums with one of these possible values:
            ///
            /// - `NONE`: Not a list item.
            /// - `ORDERED`: Text is an ordered list (numbered).
            /// - `UNORDERED`: Text is an unordered list (bulleted).
            ///
            /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait/lineTypes`.
            public var lineTypes: Components.Schemas.TypePropertiesTrait.lineTypesPayload
            /// An array with the same number of elements as lines in the text node, where lines are delimited by newline or paragraph separator characters. Each element in the array corresponds to the indentation level of a specific line.
            ///
            /// - Remark: Generated from `#/components/schemas/TypePropertiesTrait/lineIndentations`.
            public var lineIndentations: [Swift.Double]
            /// Creates a new `TypePropertiesTrait`.
            ///
            /// - Parameters:
            ///   - characters: The raw characters in the text node.
            ///   - style: Style of text including font family and weight.
            ///   - characterStyleOverrides: The array corresponds to characters in the text box, where each element references the 'styleOverrideTable' to apply specific styles to each character. The array's length can be less than or equal to the number of characters due to the removal of trailing zeros. Elements with a value of 0 indicate characters that use the default type style. If the array is shorter than the total number of characters, the characters beyond the array's length also use the default style.
            ///   - layoutVersion: Internal property, preserved for backward compatibility. Avoid using this value.
            ///   - styleOverrideTable: Map from ID to TypeStyle for looking up style overrides.
            ///   - lineTypes: An array with the same number of elements as lines in the text node, where lines are delimited by newline or paragraph separator characters. Each element in the array corresponds to the list type of a specific line. List types are represented as string enums with one of these possible values:
            ///   - lineIndentations: An array with the same number of elements as lines in the text node, where lines are delimited by newline or paragraph separator characters. Each element in the array corresponds to the indentation level of a specific line.
            public init(
                characters: Swift.String,
                style: Components.Schemas.TypeStyle,
                characterStyleOverrides: [Swift.Double],
                layoutVersion: Swift.Double? = nil,
                styleOverrideTable: Components.Schemas.TypePropertiesTrait.styleOverrideTablePayload,
                lineTypes: Components.Schemas.TypePropertiesTrait.lineTypesPayload,
                lineIndentations: [Swift.Double]
            ) {
                self.characters = characters
                self.style = style
                self.characterStyleOverrides = characterStyleOverrides
                self.layoutVersion = layoutVersion
                self.styleOverrideTable = styleOverrideTable
                self.lineTypes = lineTypes
                self.lineIndentations = lineIndentations
            }
            public enum CodingKeys: String, CodingKey {
                case characters
                case style
                case characterStyleOverrides
                case layoutVersion
                case styleOverrideTable
                case lineTypes
                case lineIndentations
            }
        }
        /// - Remark: Generated from `#/components/schemas/HasTextSublayerTrait`.
        public struct HasTextSublayerTrait: Codable, Hashable, Sendable {
            /// Text contained within a text box.
            ///
            /// - Remark: Generated from `#/components/schemas/HasTextSublayerTrait/characters`.
            public var characters: Swift.String
            /// Creates a new `HasTextSublayerTrait`.
            ///
            /// - Parameters:
            ///   - characters: Text contained within a text box.
            public init(characters: Swift.String) {
                self.characters = characters
            }
            public enum CodingKeys: String, CodingKey {
                case characters
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransitionSourceTrait`.
        public struct TransitionSourceTrait: Codable, Hashable, Sendable {
            /// Node ID of node to transition to in prototyping
            ///
            /// - Remark: Generated from `#/components/schemas/TransitionSourceTrait/transitionNodeID`.
            public var transitionNodeID: Swift.String?
            /// The duration of the prototyping transition on this node (in milliseconds). This will override the default transition duration on the prototype, for this node.
            ///
            /// - Remark: Generated from `#/components/schemas/TransitionSourceTrait/transitionDuration`.
            public var transitionDuration: Swift.Double?
            /// The easing curve used in the prototyping transition on this node.
            ///
            /// - Remark: Generated from `#/components/schemas/TransitionSourceTrait/transitionEasing`.
            public var transitionEasing: Components.Schemas.EasingType?
            /// - Remark: Generated from `#/components/schemas/TransitionSourceTrait/interactions`.
            public var interactions: [Components.Schemas.Interaction]?
            /// Creates a new `TransitionSourceTrait`.
            ///
            /// - Parameters:
            ///   - transitionNodeID: Node ID of node to transition to in prototyping
            ///   - transitionDuration: The duration of the prototyping transition on this node (in milliseconds). This will override the default transition duration on the prototype, for this node.
            ///   - transitionEasing: The easing curve used in the prototyping transition on this node.
            ///   - interactions:
            public init(
                transitionNodeID: Swift.String? = nil,
                transitionDuration: Swift.Double? = nil,
                transitionEasing: Components.Schemas.EasingType? = nil,
                interactions: [Components.Schemas.Interaction]? = nil
            ) {
                self.transitionNodeID = transitionNodeID
                self.transitionDuration = transitionDuration
                self.transitionEasing = transitionEasing
                self.interactions = interactions
            }
            public enum CodingKeys: String, CodingKey {
                case transitionNodeID
                case transitionDuration
                case transitionEasing
                case interactions
            }
        }
        /// - Remark: Generated from `#/components/schemas/DevStatusTrait`.
        public struct DevStatusTrait: Codable, Hashable, Sendable {
            /// Represents whether or not a node has a particular handoff (or dev) status applied to it.
            ///
            /// - Remark: Generated from `#/components/schemas/DevStatusTrait/devStatus`.
            public struct devStatusPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DevStatusTrait/devStatus/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case NONE = "NONE"
                    case READY_FOR_DEV = "READY_FOR_DEV"
                    case COMPLETED = "COMPLETED"
                }
                /// - Remark: Generated from `#/components/schemas/DevStatusTrait/devStatus/type`.
                public var _type: Components.Schemas.DevStatusTrait.devStatusPayload._typePayload
                /// An optional field where the designer can add more information about the design and what has changed.
                ///
                /// - Remark: Generated from `#/components/schemas/DevStatusTrait/devStatus/description`.
                public var description: Swift.String?
                /// Creates a new `devStatusPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - description: An optional field where the designer can add more information about the design and what has changed.
                public init(
                    _type: Components.Schemas.DevStatusTrait.devStatusPayload._typePayload,
                    description: Swift.String? = nil
                ) {
                    self._type = _type
                    self.description = description
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case description
                }
            }
            /// Represents whether or not a node has a particular handoff (or dev) status applied to it.
            ///
            /// - Remark: Generated from `#/components/schemas/DevStatusTrait/devStatus`.
            public var devStatus: Components.Schemas.DevStatusTrait.devStatusPayload?
            /// Creates a new `DevStatusTrait`.
            ///
            /// - Parameters:
            ///   - devStatus: Represents whether or not a node has a particular handoff (or dev) status applied to it.
            public init(devStatus: Components.Schemas.DevStatusTrait.devStatusPayload? = nil) {
                self.devStatus = devStatus
            }
            public enum CodingKeys: String, CodingKey {
                case devStatus
            }
        }
        /// - Remark: Generated from `#/components/schemas/FrameTraits`.
        public struct FrameTraits: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value1`.
            public var value1: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value2`.
            public var value2: Components.Schemas.HasBlendModeAndOpacityTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value3`.
            public var value3: Components.Schemas.HasChildrenTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value4`.
            public var value4: Components.Schemas.HasLayoutTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value5`.
            public var value5: Components.Schemas.HasFramePropertiesTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value6`.
            public var value6: Components.Schemas.CornerTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value7`.
            public var value7: Components.Schemas.HasGeometryTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value8`.
            public var value8: Components.Schemas.HasExportSettingsTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value9`.
            public var value9: Components.Schemas.HasEffectsTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value10`.
            public var value10: Components.Schemas.HasMaskTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value11`.
            public var value11: Components.Schemas.TransitionSourceTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value12`.
            public var value12: Components.Schemas.IndividualStrokesTrait
            /// - Remark: Generated from `#/components/schemas/FrameTraits/value13`.
            public var value13: Components.Schemas.DevStatusTrait
            /// Creates a new `FrameTraits`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            ///   - value11:
            ///   - value12:
            ///   - value13:
            public init(
                value1: Components.Schemas.IsLayerTrait,
                value2: Components.Schemas.HasBlendModeAndOpacityTrait,
                value3: Components.Schemas.HasChildrenTrait,
                value4: Components.Schemas.HasLayoutTrait,
                value5: Components.Schemas.HasFramePropertiesTrait,
                value6: Components.Schemas.CornerTrait,
                value7: Components.Schemas.HasGeometryTrait,
                value8: Components.Schemas.HasExportSettingsTrait,
                value9: Components.Schemas.HasEffectsTrait,
                value10: Components.Schemas.HasMaskTrait,
                value11: Components.Schemas.TransitionSourceTrait,
                value12: Components.Schemas.IndividualStrokesTrait,
                value13: Components.Schemas.DevStatusTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
                self.value11 = value11
                self.value12 = value12
                self.value13 = value13
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
                value4 = try .init(from: decoder)
                value5 = try .init(from: decoder)
                value6 = try .init(from: decoder)
                value7 = try .init(from: decoder)
                value8 = try .init(from: decoder)
                value9 = try .init(from: decoder)
                value10 = try .init(from: decoder)
                value11 = try .init(from: decoder)
                value12 = try .init(from: decoder)
                value13 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
                try value4.encode(to: encoder)
                try value5.encode(to: encoder)
                try value6.encode(to: encoder)
                try value7.encode(to: encoder)
                try value8.encode(to: encoder)
                try value9.encode(to: encoder)
                try value10.encode(to: encoder)
                try value11.encode(to: encoder)
                try value12.encode(to: encoder)
                try value13.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/DefaultShapeTraits`.
        public struct DefaultShapeTraits: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DefaultShapeTraits/value1`.
            public var value1: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/DefaultShapeTraits/value2`.
            public var value2: Components.Schemas.HasBlendModeAndOpacityTrait
            /// - Remark: Generated from `#/components/schemas/DefaultShapeTraits/value3`.
            public var value3: Components.Schemas.HasLayoutTrait
            /// - Remark: Generated from `#/components/schemas/DefaultShapeTraits/value4`.
            public var value4: Components.Schemas.HasGeometryTrait
            /// - Remark: Generated from `#/components/schemas/DefaultShapeTraits/value5`.
            public var value5: Components.Schemas.HasExportSettingsTrait
            /// - Remark: Generated from `#/components/schemas/DefaultShapeTraits/value6`.
            public var value6: Components.Schemas.HasEffectsTrait
            /// - Remark: Generated from `#/components/schemas/DefaultShapeTraits/value7`.
            public var value7: Components.Schemas.HasMaskTrait
            /// - Remark: Generated from `#/components/schemas/DefaultShapeTraits/value8`.
            public var value8: Components.Schemas.TransitionSourceTrait
            /// Creates a new `DefaultShapeTraits`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            public init(
                value1: Components.Schemas.IsLayerTrait,
                value2: Components.Schemas.HasBlendModeAndOpacityTrait,
                value3: Components.Schemas.HasLayoutTrait,
                value4: Components.Schemas.HasGeometryTrait,
                value5: Components.Schemas.HasExportSettingsTrait,
                value6: Components.Schemas.HasEffectsTrait,
                value7: Components.Schemas.HasMaskTrait,
                value8: Components.Schemas.TransitionSourceTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
                value4 = try .init(from: decoder)
                value5 = try .init(from: decoder)
                value6 = try .init(from: decoder)
                value7 = try .init(from: decoder)
                value8 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
                try value4.encode(to: encoder)
                try value5.encode(to: encoder)
                try value6.encode(to: encoder)
                try value7.encode(to: encoder)
                try value8.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/CornerRadiusShapeTraits`.
        public struct CornerRadiusShapeTraits: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CornerRadiusShapeTraits/value1`.
            public var value1: Components.Schemas.DefaultShapeTraits
            /// - Remark: Generated from `#/components/schemas/CornerRadiusShapeTraits/value2`.
            public var value2: Components.Schemas.CornerTrait
            /// Creates a new `CornerRadiusShapeTraits`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.DefaultShapeTraits,
                value2: Components.Schemas.CornerTrait
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/RectangularShapeTraits`.
        public struct RectangularShapeTraits: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RectangularShapeTraits/value1`.
            public var value1: Components.Schemas.DefaultShapeTraits
            /// - Remark: Generated from `#/components/schemas/RectangularShapeTraits/value2`.
            public var value2: Components.Schemas.CornerTrait
            /// - Remark: Generated from `#/components/schemas/RectangularShapeTraits/value3`.
            public var value3: Components.Schemas.IndividualStrokesTrait
            /// Creates a new `RectangularShapeTraits`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            public init(
                value1: Components.Schemas.DefaultShapeTraits,
                value2: Components.Schemas.CornerTrait,
                value3: Components.Schemas.IndividualStrokesTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/Node`.
        @frozen public enum Node: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Node/BooleanOperationNode`.
            case BOOLEAN_OPERATION(Components.Schemas.BooleanOperationNode)
            /// - Remark: Generated from `#/components/schemas/Node/CanvasNode`.
            case CANVAS(Components.Schemas.CanvasNode)
            /// - Remark: Generated from `#/components/schemas/Node/ComponentNode`.
            case COMPONENT(Components.Schemas.ComponentNode)
            /// - Remark: Generated from `#/components/schemas/Node/ComponentSetNode`.
            case COMPONENT_SET(Components.Schemas.ComponentSetNode)
            /// - Remark: Generated from `#/components/schemas/Node/ConnectorNode`.
            case CONNECTOR(Components.Schemas.ConnectorNode)
            /// - Remark: Generated from `#/components/schemas/Node/DocumentNode`.
            case DOCUMENT(Components.Schemas.DocumentNode)
            /// - Remark: Generated from `#/components/schemas/Node/EllipseNode`.
            case ELLIPSE(Components.Schemas.EllipseNode)
            /// - Remark: Generated from `#/components/schemas/Node/EmbedNode`.
            case EMBED(Components.Schemas.EmbedNode)
            /// - Remark: Generated from `#/components/schemas/Node/FrameNode`.
            case FRAME(Components.Schemas.FrameNode)
            /// - Remark: Generated from `#/components/schemas/Node/GroupNode`.
            case GROUP(Components.Schemas.GroupNode)
            /// - Remark: Generated from `#/components/schemas/Node/InstanceNode`.
            case INSTANCE(Components.Schemas.InstanceNode)
            /// - Remark: Generated from `#/components/schemas/Node/LineNode`.
            case LINE(Components.Schemas.LineNode)
            /// - Remark: Generated from `#/components/schemas/Node/LinkUnfurlNode`.
            case LINK_UNFURL(Components.Schemas.LinkUnfurlNode)
            /// - Remark: Generated from `#/components/schemas/Node/RectangleNode`.
            case RECTANGLE(Components.Schemas.RectangleNode)
            /// - Remark: Generated from `#/components/schemas/Node/RegularPolygonNode`.
            case REGULAR_POLYGON(Components.Schemas.RegularPolygonNode)
            /// - Remark: Generated from `#/components/schemas/Node/SectionNode`.
            case SECTION(Components.Schemas.SectionNode)
            /// - Remark: Generated from `#/components/schemas/Node/ShapeWithTextNode`.
            case SHAPE_WITH_TEXT(Components.Schemas.ShapeWithTextNode)
            /// - Remark: Generated from `#/components/schemas/Node/SliceNode`.
            case SLICE(Components.Schemas.SliceNode)
            /// - Remark: Generated from `#/components/schemas/Node/StarNode`.
            case STAR(Components.Schemas.StarNode)
            /// - Remark: Generated from `#/components/schemas/Node/StickyNode`.
            case STICKY(Components.Schemas.StickyNode)
            /// - Remark: Generated from `#/components/schemas/Node/TableNode`.
            case TABLE(Components.Schemas.TableNode)
            /// - Remark: Generated from `#/components/schemas/Node/TableCellNode`.
            case TABLE_CELL(Components.Schemas.TableCellNode)
            /// - Remark: Generated from `#/components/schemas/Node/TextNode`.
            case TEXT(Components.Schemas.TextNode)
            /// - Remark: Generated from `#/components/schemas/Node/VectorNode`.
            case VECTOR(Components.Schemas.VectorNode)
            /// - Remark: Generated from `#/components/schemas/Node/WashiTapeNode`.
            case WASHI_TAPE(Components.Schemas.WashiTapeNode)
            /// - Remark: Generated from `#/components/schemas/Node/WidgetNode`.
            case WIDGET(Components.Schemas.WidgetNode)
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                switch discriminator {
                case "BOOLEAN_OPERATION":
                    self = .BOOLEAN_OPERATION(try .init(from: decoder))
                case "CANVAS":
                    self = .CANVAS(try .init(from: decoder))
                case "COMPONENT":
                    self = .COMPONENT(try .init(from: decoder))
                case "COMPONENT_SET":
                    self = .COMPONENT_SET(try .init(from: decoder))
                case "CONNECTOR":
                    self = .CONNECTOR(try .init(from: decoder))
                case "DOCUMENT":
                    self = .DOCUMENT(try .init(from: decoder))
                case "ELLIPSE":
                    self = .ELLIPSE(try .init(from: decoder))
                case "EMBED":
                    self = .EMBED(try .init(from: decoder))
                case "FRAME":
                    self = .FRAME(try .init(from: decoder))
                case "GROUP":
                    self = .GROUP(try .init(from: decoder))
                case "INSTANCE":
                    self = .INSTANCE(try .init(from: decoder))
                case "LINE":
                    self = .LINE(try .init(from: decoder))
                case "LINK_UNFURL":
                    self = .LINK_UNFURL(try .init(from: decoder))
                case "RECTANGLE":
                    self = .RECTANGLE(try .init(from: decoder))
                case "REGULAR_POLYGON":
                    self = .REGULAR_POLYGON(try .init(from: decoder))
                case "SECTION":
                    self = .SECTION(try .init(from: decoder))
                case "SHAPE_WITH_TEXT":
                    self = .SHAPE_WITH_TEXT(try .init(from: decoder))
                case "SLICE":
                    self = .SLICE(try .init(from: decoder))
                case "STAR":
                    self = .STAR(try .init(from: decoder))
                case "STICKY":
                    self = .STICKY(try .init(from: decoder))
                case "TABLE":
                    self = .TABLE(try .init(from: decoder))
                case "TABLE_CELL":
                    self = .TABLE_CELL(try .init(from: decoder))
                case "TEXT":
                    self = .TEXT(try .init(from: decoder))
                case "VECTOR":
                    self = .VECTOR(try .init(from: decoder))
                case "WASHI_TAPE":
                    self = .WASHI_TAPE(try .init(from: decoder))
                case "WIDGET":
                    self = .WIDGET(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys._type,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .BOOLEAN_OPERATION(value):
                    try value.encode(to: encoder)
                case let .CANVAS(value):
                    try value.encode(to: encoder)
                case let .COMPONENT(value):
                    try value.encode(to: encoder)
                case let .COMPONENT_SET(value):
                    try value.encode(to: encoder)
                case let .CONNECTOR(value):
                    try value.encode(to: encoder)
                case let .DOCUMENT(value):
                    try value.encode(to: encoder)
                case let .ELLIPSE(value):
                    try value.encode(to: encoder)
                case let .EMBED(value):
                    try value.encode(to: encoder)
                case let .FRAME(value):
                    try value.encode(to: encoder)
                case let .GROUP(value):
                    try value.encode(to: encoder)
                case let .INSTANCE(value):
                    try value.encode(to: encoder)
                case let .LINE(value):
                    try value.encode(to: encoder)
                case let .LINK_UNFURL(value):
                    try value.encode(to: encoder)
                case let .RECTANGLE(value):
                    try value.encode(to: encoder)
                case let .REGULAR_POLYGON(value):
                    try value.encode(to: encoder)
                case let .SECTION(value):
                    try value.encode(to: encoder)
                case let .SHAPE_WITH_TEXT(value):
                    try value.encode(to: encoder)
                case let .SLICE(value):
                    try value.encode(to: encoder)
                case let .STAR(value):
                    try value.encode(to: encoder)
                case let .STICKY(value):
                    try value.encode(to: encoder)
                case let .TABLE(value):
                    try value.encode(to: encoder)
                case let .TABLE_CELL(value):
                    try value.encode(to: encoder)
                case let .TEXT(value):
                    try value.encode(to: encoder)
                case let .VECTOR(value):
                    try value.encode(to: encoder)
                case let .WASHI_TAPE(value):
                    try value.encode(to: encoder)
                case let .WIDGET(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/DocumentNode`.
        public struct DocumentNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DocumentNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DocumentNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case DOCUMENT = "DOCUMENT"
                }
                /// - Remark: Generated from `#/components/schemas/DocumentNode/value1/type`.
                public var _type: Components.Schemas.DocumentNode.Value1Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/DocumentNode/value1/children`.
                public var children: [Components.Schemas.CanvasNode]
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - children:
                public init(
                    _type: Components.Schemas.DocumentNode.Value1Payload._typePayload,
                    children: [Components.Schemas.CanvasNode]
                ) {
                    self._type = _type
                    self.children = children
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case children
                }
            }
            /// - Remark: Generated from `#/components/schemas/DocumentNode/value1`.
            public var value1: Components.Schemas.DocumentNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/DocumentNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// Creates a new `DocumentNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.DocumentNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/CanvasNode`.
        public struct CanvasNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CanvasNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CanvasNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case CANVAS = "CANVAS"
                }
                /// - Remark: Generated from `#/components/schemas/CanvasNode/value1/type`.
                public var _type: Components.Schemas.CanvasNode.Value1Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/CanvasNode/value1/children`.
                public var children: [Components.Schemas.SubcanvasNode]
                /// Background color of the canvas.
                ///
                /// - Remark: Generated from `#/components/schemas/CanvasNode/value1/backgroundColor`.
                public var backgroundColor: Components.Schemas.RGBA
                /// Node ID that corresponds to the start frame for prototypes. This is deprecated with the introduction of multiple flows. Please use the `flowStartingPoints` field.
                ///
                /// - Remark: Generated from `#/components/schemas/CanvasNode/value1/prototypeStartNodeID`.
                @available(*, deprecated)
                public var prototypeStartNodeID: Swift.String?
                /// An array of flow starting points sorted by its position in the prototype settings panel.
                ///
                /// - Remark: Generated from `#/components/schemas/CanvasNode/value1/flowStartingPoints`.
                public var flowStartingPoints: [Components.Schemas.FlowStartingPoint]
                /// The device used to view a prototype.
                ///
                /// - Remark: Generated from `#/components/schemas/CanvasNode/value1/prototypeDevice`.
                public var prototypeDevice: Components.Schemas.PrototypeDevice
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - children:
                ///   - backgroundColor: Background color of the canvas.
                ///   - prototypeStartNodeID: Node ID that corresponds to the start frame for prototypes. This is deprecated with the introduction of multiple flows. Please use the `flowStartingPoints` field.
                ///   - flowStartingPoints: An array of flow starting points sorted by its position in the prototype settings panel.
                ///   - prototypeDevice: The device used to view a prototype.
                public init(
                    _type: Components.Schemas.CanvasNode.Value1Payload._typePayload,
                    children: [Components.Schemas.SubcanvasNode],
                    backgroundColor: Components.Schemas.RGBA,
                    prototypeStartNodeID: Swift.String? = nil,
                    flowStartingPoints: [Components.Schemas.FlowStartingPoint],
                    prototypeDevice: Components.Schemas.PrototypeDevice
                ) {
                    self._type = _type
                    self.children = children
                    self.backgroundColor = backgroundColor
                    self.prototypeStartNodeID = prototypeStartNodeID
                    self.flowStartingPoints = flowStartingPoints
                    self.prototypeDevice = prototypeDevice
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case children
                    case backgroundColor
                    case prototypeStartNodeID
                    case flowStartingPoints
                    case prototypeDevice
                }
            }
            /// - Remark: Generated from `#/components/schemas/CanvasNode/value1`.
            public var value1: Components.Schemas.CanvasNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/CanvasNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/CanvasNode/value3`.
            public var value3: Components.Schemas.HasExportSettingsTrait
            /// Creates a new `CanvasNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            public init(
                value1: Components.Schemas.CanvasNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.HasExportSettingsTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubcanvasNode`.
        @frozen public enum SubcanvasNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/BooleanOperationNode`.
            case BOOLEAN_OPERATION(Components.Schemas.BooleanOperationNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/ComponentNode`.
            case COMPONENT(Components.Schemas.ComponentNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/ComponentSetNode`.
            case COMPONENT_SET(Components.Schemas.ComponentSetNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/ConnectorNode`.
            case CONNECTOR(Components.Schemas.ConnectorNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/EllipseNode`.
            case ELLIPSE(Components.Schemas.EllipseNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/EmbedNode`.
            case EMBED(Components.Schemas.EmbedNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/FrameNode`.
            case FRAME(Components.Schemas.FrameNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/GroupNode`.
            case GROUP(Components.Schemas.GroupNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/InstanceNode`.
            case INSTANCE(Components.Schemas.InstanceNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/LineNode`.
            case LINE(Components.Schemas.LineNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/LinkUnfurlNode`.
            case LINK_UNFURL(Components.Schemas.LinkUnfurlNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/RectangleNode`.
            case RECTANGLE(Components.Schemas.RectangleNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/RegularPolygonNode`.
            case REGULAR_POLYGON(Components.Schemas.RegularPolygonNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/SectionNode`.
            case SECTION(Components.Schemas.SectionNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/ShapeWithTextNode`.
            case SHAPE_WITH_TEXT(Components.Schemas.ShapeWithTextNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/SliceNode`.
            case SLICE(Components.Schemas.SliceNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/StarNode`.
            case STAR(Components.Schemas.StarNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/StickyNode`.
            case STICKY(Components.Schemas.StickyNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/TableNode`.
            case TABLE(Components.Schemas.TableNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/TableCellNode`.
            case TABLE_CELL(Components.Schemas.TableCellNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/TextNode`.
            case TEXT(Components.Schemas.TextNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/VectorNode`.
            case VECTOR(Components.Schemas.VectorNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/WashiTapeNode`.
            case WASHI_TAPE(Components.Schemas.WashiTapeNode)
            /// - Remark: Generated from `#/components/schemas/SubcanvasNode/WidgetNode`.
            case WIDGET(Components.Schemas.WidgetNode)
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                switch discriminator {
                case "BOOLEAN_OPERATION":
                    self = .BOOLEAN_OPERATION(try .init(from: decoder))
                case "COMPONENT":
                    self = .COMPONENT(try .init(from: decoder))
                case "COMPONENT_SET":
                    self = .COMPONENT_SET(try .init(from: decoder))
                case "CONNECTOR":
                    self = .CONNECTOR(try .init(from: decoder))
                case "ELLIPSE":
                    self = .ELLIPSE(try .init(from: decoder))
                case "EMBED":
                    self = .EMBED(try .init(from: decoder))
                case "FRAME":
                    self = .FRAME(try .init(from: decoder))
                case "GROUP":
                    self = .GROUP(try .init(from: decoder))
                case "INSTANCE":
                    self = .INSTANCE(try .init(from: decoder))
                case "LINE":
                    self = .LINE(try .init(from: decoder))
                case "LINK_UNFURL":
                    self = .LINK_UNFURL(try .init(from: decoder))
                case "RECTANGLE":
                    self = .RECTANGLE(try .init(from: decoder))
                case "REGULAR_POLYGON":
                    self = .REGULAR_POLYGON(try .init(from: decoder))
                case "SECTION":
                    self = .SECTION(try .init(from: decoder))
                case "SHAPE_WITH_TEXT":
                    self = .SHAPE_WITH_TEXT(try .init(from: decoder))
                case "SLICE":
                    self = .SLICE(try .init(from: decoder))
                case "STAR":
                    self = .STAR(try .init(from: decoder))
                case "STICKY":
                    self = .STICKY(try .init(from: decoder))
                case "TABLE":
                    self = .TABLE(try .init(from: decoder))
                case "TABLE_CELL":
                    self = .TABLE_CELL(try .init(from: decoder))
                case "TEXT":
                    self = .TEXT(try .init(from: decoder))
                case "VECTOR":
                    self = .VECTOR(try .init(from: decoder))
                case "WASHI_TAPE":
                    self = .WASHI_TAPE(try .init(from: decoder))
                case "WIDGET":
                    self = .WIDGET(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys._type,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .BOOLEAN_OPERATION(value):
                    try value.encode(to: encoder)
                case let .COMPONENT(value):
                    try value.encode(to: encoder)
                case let .COMPONENT_SET(value):
                    try value.encode(to: encoder)
                case let .CONNECTOR(value):
                    try value.encode(to: encoder)
                case let .ELLIPSE(value):
                    try value.encode(to: encoder)
                case let .EMBED(value):
                    try value.encode(to: encoder)
                case let .FRAME(value):
                    try value.encode(to: encoder)
                case let .GROUP(value):
                    try value.encode(to: encoder)
                case let .INSTANCE(value):
                    try value.encode(to: encoder)
                case let .LINE(value):
                    try value.encode(to: encoder)
                case let .LINK_UNFURL(value):
                    try value.encode(to: encoder)
                case let .RECTANGLE(value):
                    try value.encode(to: encoder)
                case let .REGULAR_POLYGON(value):
                    try value.encode(to: encoder)
                case let .SECTION(value):
                    try value.encode(to: encoder)
                case let .SHAPE_WITH_TEXT(value):
                    try value.encode(to: encoder)
                case let .SLICE(value):
                    try value.encode(to: encoder)
                case let .STAR(value):
                    try value.encode(to: encoder)
                case let .STICKY(value):
                    try value.encode(to: encoder)
                case let .TABLE(value):
                    try value.encode(to: encoder)
                case let .TABLE_CELL(value):
                    try value.encode(to: encoder)
                case let .TEXT(value):
                    try value.encode(to: encoder)
                case let .VECTOR(value):
                    try value.encode(to: encoder)
                case let .WASHI_TAPE(value):
                    try value.encode(to: encoder)
                case let .WIDGET(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/BooleanOperationNode`.
        public struct BooleanOperationNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "BOOLEAN_OPERATION"
                ///
                /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case BOOLEAN_OPERATION = "BOOLEAN_OPERATION"
                }
                /// The type of this node, represented by the string literal "BOOLEAN_OPERATION"
                ///
                /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value1/type`.
                public var _type: Components.Schemas.BooleanOperationNode.Value1Payload._typePayload
                /// A string enum indicating the type of boolean operation applied.
                ///
                /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value1/booleanOperation`.
                @frozen public enum booleanOperationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case UNION = "UNION"
                    case INTERSECT = "INTERSECT"
                    case SUBTRACT = "SUBTRACT"
                    case EXCLUDE = "EXCLUDE"
                }
                /// A string enum indicating the type of boolean operation applied.
                ///
                /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value1/booleanOperation`.
                public var booleanOperation: Components.Schemas.BooleanOperationNode.Value1Payload.booleanOperationPayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "BOOLEAN_OPERATION"
                ///   - booleanOperation: A string enum indicating the type of boolean operation applied.
                public init(
                    _type: Components.Schemas.BooleanOperationNode.Value1Payload._typePayload,
                    booleanOperation: Components.Schemas.BooleanOperationNode.Value1Payload.booleanOperationPayload
                ) {
                    self._type = _type
                    self.booleanOperation = booleanOperation
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case booleanOperation
                }
            }
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value1`.
            public var value1: Components.Schemas.BooleanOperationNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value3`.
            public var value3: Components.Schemas.HasBlendModeAndOpacityTrait
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value4`.
            public var value4: Components.Schemas.HasChildrenTrait
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value5`.
            public var value5: Components.Schemas.HasLayoutTrait
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value6`.
            public var value6: Components.Schemas.HasGeometryTrait
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value7`.
            public var value7: Components.Schemas.HasExportSettingsTrait
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value8`.
            public var value8: Components.Schemas.HasEffectsTrait
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value9`.
            public var value9: Components.Schemas.HasMaskTrait
            /// - Remark: Generated from `#/components/schemas/BooleanOperationNode/value10`.
            public var value10: Components.Schemas.TransitionSourceTrait
            /// Creates a new `BooleanOperationNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            public init(
                value1: Components.Schemas.BooleanOperationNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.HasBlendModeAndOpacityTrait,
                value4: Components.Schemas.HasChildrenTrait,
                value5: Components.Schemas.HasLayoutTrait,
                value6: Components.Schemas.HasGeometryTrait,
                value7: Components.Schemas.HasExportSettingsTrait,
                value8: Components.Schemas.HasEffectsTrait,
                value9: Components.Schemas.HasMaskTrait,
                value10: Components.Schemas.TransitionSourceTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
                value4 = try .init(from: decoder)
                value5 = try .init(from: decoder)
                value6 = try .init(from: decoder)
                value7 = try .init(from: decoder)
                value8 = try .init(from: decoder)
                value9 = try .init(from: decoder)
                value10 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
                try value4.encode(to: encoder)
                try value5.encode(to: encoder)
                try value6.encode(to: encoder)
                try value7.encode(to: encoder)
                try value8.encode(to: encoder)
                try value9.encode(to: encoder)
                try value10.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/SectionNode`.
        public struct SectionNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SectionNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "SECTION"
                ///
                /// - Remark: Generated from `#/components/schemas/SectionNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case SECTION = "SECTION"
                }
                /// The type of this node, represented by the string literal "SECTION"
                ///
                /// - Remark: Generated from `#/components/schemas/SectionNode/value1/type`.
                public var _type: Components.Schemas.SectionNode.Value1Payload._typePayload
                /// Whether the contents of the section are visible
                ///
                /// - Remark: Generated from `#/components/schemas/SectionNode/value1/sectionContentsHidden`.
                public var sectionContentsHidden: Swift.Bool
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "SECTION"
                ///   - sectionContentsHidden: Whether the contents of the section are visible
                public init(
                    _type: Components.Schemas.SectionNode.Value1Payload._typePayload,
                    sectionContentsHidden: Swift.Bool
                ) {
                    self._type = _type
                    self.sectionContentsHidden = sectionContentsHidden
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case sectionContentsHidden
                }
            }
            /// - Remark: Generated from `#/components/schemas/SectionNode/value1`.
            public var value1: Components.Schemas.SectionNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/SectionNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/SectionNode/value3`.
            public var value3: Components.Schemas.HasGeometryTrait
            /// - Remark: Generated from `#/components/schemas/SectionNode/value4`.
            public var value4: Components.Schemas.HasChildrenTrait
            /// - Remark: Generated from `#/components/schemas/SectionNode/value5`.
            public var value5: Components.Schemas.HasLayoutTrait
            /// - Remark: Generated from `#/components/schemas/SectionNode/value6`.
            public var value6: Components.Schemas.DevStatusTrait
            /// Creates a new `SectionNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            public init(
                value1: Components.Schemas.SectionNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.HasGeometryTrait,
                value4: Components.Schemas.HasChildrenTrait,
                value5: Components.Schemas.HasLayoutTrait,
                value6: Components.Schemas.DevStatusTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
                value4 = try .init(from: decoder)
                value5 = try .init(from: decoder)
                value6 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
                try value4.encode(to: encoder)
                try value5.encode(to: encoder)
                try value6.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/FrameNode`.
        public struct FrameNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FrameNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "FRAME"
                ///
                /// - Remark: Generated from `#/components/schemas/FrameNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case FRAME = "FRAME"
                }
                /// The type of this node, represented by the string literal "FRAME"
                ///
                /// - Remark: Generated from `#/components/schemas/FrameNode/value1/type`.
                public var _type: Components.Schemas.FrameNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "FRAME"
                public init(_type: Components.Schemas.FrameNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/FrameNode/value1`.
            public var value1: Components.Schemas.FrameNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/FrameNode/value2`.
            public var value2: Components.Schemas.FrameTraits
            /// Creates a new `FrameNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.FrameNode.Value1Payload,
                value2: Components.Schemas.FrameTraits
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/GroupNode`.
        public struct GroupNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GroupNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "GROUP"
                ///
                /// - Remark: Generated from `#/components/schemas/GroupNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case GROUP = "GROUP"
                }
                /// The type of this node, represented by the string literal "GROUP"
                ///
                /// - Remark: Generated from `#/components/schemas/GroupNode/value1/type`.
                public var _type: Components.Schemas.GroupNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "GROUP"
                public init(_type: Components.Schemas.GroupNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/GroupNode/value1`.
            public var value1: Components.Schemas.GroupNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/GroupNode/value2`.
            public var value2: Components.Schemas.FrameTraits
            /// Creates a new `GroupNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.GroupNode.Value1Payload,
                value2: Components.Schemas.FrameTraits
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ComponentNode`.
        public struct ComponentNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ComponentNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "COMPONENT"
                ///
                /// - Remark: Generated from `#/components/schemas/ComponentNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case COMPONENT = "COMPONENT"
                }
                /// The type of this node, represented by the string literal "COMPONENT"
                ///
                /// - Remark: Generated from `#/components/schemas/ComponentNode/value1/type`.
                public var _type: Components.Schemas.ComponentNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "COMPONENT"
                public init(_type: Components.Schemas.ComponentNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/ComponentNode/value1`.
            public var value1: Components.Schemas.ComponentNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/ComponentNode/value2`.
            public var value2: Components.Schemas.FrameTraits
            /// - Remark: Generated from `#/components/schemas/ComponentNode/value3`.
            public var value3: Components.Schemas.ComponentPropertiesTrait
            /// Creates a new `ComponentNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            public init(
                value1: Components.Schemas.ComponentNode.Value1Payload,
                value2: Components.Schemas.FrameTraits,
                value3: Components.Schemas.ComponentPropertiesTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ComponentSetNode`.
        public struct ComponentSetNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ComponentSetNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "COMPONENT_SET"
                ///
                /// - Remark: Generated from `#/components/schemas/ComponentSetNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case COMPONENT_SET = "COMPONENT_SET"
                }
                /// The type of this node, represented by the string literal "COMPONENT_SET"
                ///
                /// - Remark: Generated from `#/components/schemas/ComponentSetNode/value1/type`.
                public var _type: Components.Schemas.ComponentSetNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "COMPONENT_SET"
                public init(_type: Components.Schemas.ComponentSetNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/ComponentSetNode/value1`.
            public var value1: Components.Schemas.ComponentSetNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/ComponentSetNode/value2`.
            public var value2: Components.Schemas.FrameTraits
            /// - Remark: Generated from `#/components/schemas/ComponentSetNode/value3`.
            public var value3: Components.Schemas.ComponentPropertiesTrait
            /// Creates a new `ComponentSetNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            public init(
                value1: Components.Schemas.ComponentSetNode.Value1Payload,
                value2: Components.Schemas.FrameTraits,
                value3: Components.Schemas.ComponentPropertiesTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/VectorNode`.
        public struct VectorNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VectorNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "VECTOR"
                ///
                /// - Remark: Generated from `#/components/schemas/VectorNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case VECTOR = "VECTOR"
                }
                /// The type of this node, represented by the string literal "VECTOR"
                ///
                /// - Remark: Generated from `#/components/schemas/VectorNode/value1/type`.
                public var _type: Components.Schemas.VectorNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "VECTOR"
                public init(_type: Components.Schemas.VectorNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/VectorNode/value1`.
            public var value1: Components.Schemas.VectorNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/VectorNode/value2`.
            public var value2: Components.Schemas.CornerRadiusShapeTraits
            /// Creates a new `VectorNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.VectorNode.Value1Payload,
                value2: Components.Schemas.CornerRadiusShapeTraits
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/StarNode`.
        public struct StarNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StarNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "STAR"
                ///
                /// - Remark: Generated from `#/components/schemas/StarNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case STAR = "STAR"
                }
                /// The type of this node, represented by the string literal "STAR"
                ///
                /// - Remark: Generated from `#/components/schemas/StarNode/value1/type`.
                public var _type: Components.Schemas.StarNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "STAR"
                public init(_type: Components.Schemas.StarNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StarNode/value1`.
            public var value1: Components.Schemas.StarNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/StarNode/value2`.
            public var value2: Components.Schemas.CornerRadiusShapeTraits
            /// Creates a new `StarNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.StarNode.Value1Payload,
                value2: Components.Schemas.CornerRadiusShapeTraits
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/LineNode`.
        public struct LineNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LineNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "LINE"
                ///
                /// - Remark: Generated from `#/components/schemas/LineNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case LINE = "LINE"
                }
                /// The type of this node, represented by the string literal "LINE"
                ///
                /// - Remark: Generated from `#/components/schemas/LineNode/value1/type`.
                public var _type: Components.Schemas.LineNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "LINE"
                public init(_type: Components.Schemas.LineNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/LineNode/value1`.
            public var value1: Components.Schemas.LineNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/LineNode/value2`.
            public var value2: Components.Schemas.DefaultShapeTraits
            /// Creates a new `LineNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.LineNode.Value1Payload,
                value2: Components.Schemas.DefaultShapeTraits
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/EllipseNode`.
        public struct EllipseNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EllipseNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "ELLIPSE"
                ///
                /// - Remark: Generated from `#/components/schemas/EllipseNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case ELLIPSE = "ELLIPSE"
                }
                /// The type of this node, represented by the string literal "ELLIPSE"
                ///
                /// - Remark: Generated from `#/components/schemas/EllipseNode/value1/type`.
                public var _type: Components.Schemas.EllipseNode.Value1Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/EllipseNode/value1/arcData`.
                public var arcData: Components.Schemas.ArcData
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "ELLIPSE"
                ///   - arcData:
                public init(
                    _type: Components.Schemas.EllipseNode.Value1Payload._typePayload,
                    arcData: Components.Schemas.ArcData
                ) {
                    self._type = _type
                    self.arcData = arcData
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case arcData
                }
            }
            /// - Remark: Generated from `#/components/schemas/EllipseNode/value1`.
            public var value1: Components.Schemas.EllipseNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/EllipseNode/value2`.
            public var value2: Components.Schemas.DefaultShapeTraits
            /// Creates a new `EllipseNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.EllipseNode.Value1Payload,
                value2: Components.Schemas.DefaultShapeTraits
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/RegularPolygonNode`.
        public struct RegularPolygonNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RegularPolygonNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "REGULAR_POLYGON"
                ///
                /// - Remark: Generated from `#/components/schemas/RegularPolygonNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case REGULAR_POLYGON = "REGULAR_POLYGON"
                }
                /// The type of this node, represented by the string literal "REGULAR_POLYGON"
                ///
                /// - Remark: Generated from `#/components/schemas/RegularPolygonNode/value1/type`.
                public var _type: Components.Schemas.RegularPolygonNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "REGULAR_POLYGON"
                public init(_type: Components.Schemas.RegularPolygonNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/RegularPolygonNode/value1`.
            public var value1: Components.Schemas.RegularPolygonNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/RegularPolygonNode/value2`.
            public var value2: Components.Schemas.CornerRadiusShapeTraits
            /// Creates a new `RegularPolygonNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.RegularPolygonNode.Value1Payload,
                value2: Components.Schemas.CornerRadiusShapeTraits
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/RectangleNode`.
        public struct RectangleNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RectangleNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "RECTANGLE"
                ///
                /// - Remark: Generated from `#/components/schemas/RectangleNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case RECTANGLE = "RECTANGLE"
                }
                /// The type of this node, represented by the string literal "RECTANGLE"
                ///
                /// - Remark: Generated from `#/components/schemas/RectangleNode/value1/type`.
                public var _type: Components.Schemas.RectangleNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "RECTANGLE"
                public init(_type: Components.Schemas.RectangleNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/RectangleNode/value1`.
            public var value1: Components.Schemas.RectangleNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/RectangleNode/value2`.
            public var value2: Components.Schemas.RectangularShapeTraits
            /// Creates a new `RectangleNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.RectangleNode.Value1Payload,
                value2: Components.Schemas.RectangularShapeTraits
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/TextNode`.
        public struct TextNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TextNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "TEXT"
                ///
                /// - Remark: Generated from `#/components/schemas/TextNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case TEXT = "TEXT"
                }
                /// The type of this node, represented by the string literal "TEXT"
                ///
                /// - Remark: Generated from `#/components/schemas/TextNode/value1/type`.
                public var _type: Components.Schemas.TextNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "TEXT"
                public init(_type: Components.Schemas.TextNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/TextNode/value1`.
            public var value1: Components.Schemas.TextNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/TextNode/value2`.
            public var value2: Components.Schemas.DefaultShapeTraits
            /// - Remark: Generated from `#/components/schemas/TextNode/value3`.
            public var value3: Components.Schemas.TypePropertiesTrait
            /// Creates a new `TextNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            public init(
                value1: Components.Schemas.TextNode.Value1Payload,
                value2: Components.Schemas.DefaultShapeTraits,
                value3: Components.Schemas.TypePropertiesTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/TableNode`.
        public struct TableNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "TABLE"
                ///
                /// - Remark: Generated from `#/components/schemas/TableNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case TABLE = "TABLE"
                }
                /// The type of this node, represented by the string literal "TABLE"
                ///
                /// - Remark: Generated from `#/components/schemas/TableNode/value1/type`.
                public var _type: Components.Schemas.TableNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "TABLE"
                public init(_type: Components.Schemas.TableNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/TableNode/value1`.
            public var value1: Components.Schemas.TableNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/TableNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/TableNode/value3`.
            public var value3: Components.Schemas.HasChildrenTrait
            /// - Remark: Generated from `#/components/schemas/TableNode/value4`.
            public var value4: Components.Schemas.HasLayoutTrait
            /// - Remark: Generated from `#/components/schemas/TableNode/value5`.
            public var value5: Components.Schemas.MinimalStrokesTrait
            /// - Remark: Generated from `#/components/schemas/TableNode/value6`.
            public var value6: Components.Schemas.HasEffectsTrait
            /// - Remark: Generated from `#/components/schemas/TableNode/value7`.
            public var value7: Components.Schemas.HasBlendModeAndOpacityTrait
            /// - Remark: Generated from `#/components/schemas/TableNode/value8`.
            public var value8: Components.Schemas.HasExportSettingsTrait
            /// Creates a new `TableNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            public init(
                value1: Components.Schemas.TableNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.HasChildrenTrait,
                value4: Components.Schemas.HasLayoutTrait,
                value5: Components.Schemas.MinimalStrokesTrait,
                value6: Components.Schemas.HasEffectsTrait,
                value7: Components.Schemas.HasBlendModeAndOpacityTrait,
                value8: Components.Schemas.HasExportSettingsTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
                value4 = try .init(from: decoder)
                value5 = try .init(from: decoder)
                value6 = try .init(from: decoder)
                value7 = try .init(from: decoder)
                value8 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
                try value4.encode(to: encoder)
                try value5.encode(to: encoder)
                try value6.encode(to: encoder)
                try value7.encode(to: encoder)
                try value8.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/TableCellNode`.
        public struct TableCellNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableCellNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "TABLE_CELL"
                ///
                /// - Remark: Generated from `#/components/schemas/TableCellNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case TABLE_CELL = "TABLE_CELL"
                }
                /// The type of this node, represented by the string literal "TABLE_CELL"
                ///
                /// - Remark: Generated from `#/components/schemas/TableCellNode/value1/type`.
                public var _type: Components.Schemas.TableCellNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "TABLE_CELL"
                public init(_type: Components.Schemas.TableCellNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/TableCellNode/value1`.
            public var value1: Components.Schemas.TableCellNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/TableCellNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/TableCellNode/value3`.
            public var value3: Components.Schemas.MinimalFillsTrait
            /// - Remark: Generated from `#/components/schemas/TableCellNode/value4`.
            public var value4: Components.Schemas.HasLayoutTrait
            /// - Remark: Generated from `#/components/schemas/TableCellNode/value5`.
            public var value5: Components.Schemas.HasTextSublayerTrait
            /// Creates a new `TableCellNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            public init(
                value1: Components.Schemas.TableCellNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.MinimalFillsTrait,
                value4: Components.Schemas.HasLayoutTrait,
                value5: Components.Schemas.HasTextSublayerTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
                value4 = try .init(from: decoder)
                value5 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
                try value4.encode(to: encoder)
                try value5.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/SliceNode`.
        public struct SliceNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SliceNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "SLICE"
                ///
                /// - Remark: Generated from `#/components/schemas/SliceNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case SLICE = "SLICE"
                }
                /// The type of this node, represented by the string literal "SLICE"
                ///
                /// - Remark: Generated from `#/components/schemas/SliceNode/value1/type`.
                public var _type: Components.Schemas.SliceNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "SLICE"
                public init(_type: Components.Schemas.SliceNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/SliceNode/value1`.
            public var value1: Components.Schemas.SliceNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/SliceNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// Creates a new `SliceNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.SliceNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/InstanceNode`.
        public struct InstanceNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InstanceNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "INSTANCE"
                ///
                /// - Remark: Generated from `#/components/schemas/InstanceNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case INSTANCE = "INSTANCE"
                }
                /// The type of this node, represented by the string literal "INSTANCE"
                ///
                /// - Remark: Generated from `#/components/schemas/InstanceNode/value1/type`.
                public var _type: Components.Schemas.InstanceNode.Value1Payload._typePayload
                /// ID of component that this instance came from.
                ///
                /// - Remark: Generated from `#/components/schemas/InstanceNode/value1/componentId`.
                public var componentId: Swift.String
                /// If true, this node has been marked as exposed to its containing component or component set.
                ///
                /// - Remark: Generated from `#/components/schemas/InstanceNode/value1/isExposedInstance`.
                public var isExposedInstance: Swift.Bool?
                /// IDs of instances that have been exposed to this node's level.
                ///
                /// - Remark: Generated from `#/components/schemas/InstanceNode/value1/exposedInstances`.
                public var exposedInstances: [Swift.String]?
                /// A mapping of name to `ComponentProperty` for all component properties on this instance. Each property has a type, value, and other optional values.
                ///
                /// - Remark: Generated from `#/components/schemas/InstanceNode/value1/componentProperties`.
                public struct componentPropertiesPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Components.Schemas.ComponentProperty]
                    /// Creates a new `componentPropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Components.Schemas.ComponentProperty] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// A mapping of name to `ComponentProperty` for all component properties on this instance. Each property has a type, value, and other optional values.
                ///
                /// - Remark: Generated from `#/components/schemas/InstanceNode/value1/componentProperties`.
                public var componentProperties: Components.Schemas.InstanceNode.Value1Payload.componentPropertiesPayload?
                /// An array of all of the fields directly overridden on this instance. Inherited overrides are not included.
                ///
                /// - Remark: Generated from `#/components/schemas/InstanceNode/value1/overrides`.
                public var overrides: [Components.Schemas.Overrides]
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "INSTANCE"
                ///   - componentId: ID of component that this instance came from.
                ///   - isExposedInstance: If true, this node has been marked as exposed to its containing component or component set.
                ///   - exposedInstances: IDs of instances that have been exposed to this node's level.
                ///   - componentProperties: A mapping of name to `ComponentProperty` for all component properties on this instance. Each property has a type, value, and other optional values.
                ///   - overrides: An array of all of the fields directly overridden on this instance. Inherited overrides are not included.
                public init(
                    _type: Components.Schemas.InstanceNode.Value1Payload._typePayload,
                    componentId: Swift.String,
                    isExposedInstance: Swift.Bool? = nil,
                    exposedInstances: [Swift.String]? = nil,
                    componentProperties: Components.Schemas.InstanceNode.Value1Payload.componentPropertiesPayload? = nil,
                    overrides: [Components.Schemas.Overrides]
                ) {
                    self._type = _type
                    self.componentId = componentId
                    self.isExposedInstance = isExposedInstance
                    self.exposedInstances = exposedInstances
                    self.componentProperties = componentProperties
                    self.overrides = overrides
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case componentId
                    case isExposedInstance
                    case exposedInstances
                    case componentProperties
                    case overrides
                }
            }
            /// - Remark: Generated from `#/components/schemas/InstanceNode/value1`.
            public var value1: Components.Schemas.InstanceNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/InstanceNode/value2`.
            public var value2: Components.Schemas.FrameTraits
            /// Creates a new `InstanceNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.InstanceNode.Value1Payload,
                value2: Components.Schemas.FrameTraits
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/EmbedNode`.
        public struct EmbedNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EmbedNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "EMBED"
                ///
                /// - Remark: Generated from `#/components/schemas/EmbedNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case EMBED = "EMBED"
                }
                /// The type of this node, represented by the string literal "EMBED"
                ///
                /// - Remark: Generated from `#/components/schemas/EmbedNode/value1/type`.
                public var _type: Components.Schemas.EmbedNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "EMBED"
                public init(_type: Components.Schemas.EmbedNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/EmbedNode/value1`.
            public var value1: Components.Schemas.EmbedNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/EmbedNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/EmbedNode/value3`.
            public var value3: Components.Schemas.HasExportSettingsTrait
            /// Creates a new `EmbedNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            public init(
                value1: Components.Schemas.EmbedNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.HasExportSettingsTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/LinkUnfurlNode`.
        public struct LinkUnfurlNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LinkUnfurlNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "LINK_UNFURL"
                ///
                /// - Remark: Generated from `#/components/schemas/LinkUnfurlNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case LINK_UNFURL = "LINK_UNFURL"
                }
                /// The type of this node, represented by the string literal "LINK_UNFURL"
                ///
                /// - Remark: Generated from `#/components/schemas/LinkUnfurlNode/value1/type`.
                public var _type: Components.Schemas.LinkUnfurlNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "LINK_UNFURL"
                public init(_type: Components.Schemas.LinkUnfurlNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/LinkUnfurlNode/value1`.
            public var value1: Components.Schemas.LinkUnfurlNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/LinkUnfurlNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/LinkUnfurlNode/value3`.
            public var value3: Components.Schemas.HasExportSettingsTrait
            /// Creates a new `LinkUnfurlNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            public init(
                value1: Components.Schemas.LinkUnfurlNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.HasExportSettingsTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/StickyNode`.
        public struct StickyNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StickyNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "STICKY"
                ///
                /// - Remark: Generated from `#/components/schemas/StickyNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case STICKY = "STICKY"
                }
                /// The type of this node, represented by the string literal "STICKY"
                ///
                /// - Remark: Generated from `#/components/schemas/StickyNode/value1/type`.
                public var _type: Components.Schemas.StickyNode.Value1Payload._typePayload
                /// If true, author name is visible.
                ///
                /// - Remark: Generated from `#/components/schemas/StickyNode/value1/authorVisible`.
                public var authorVisible: Swift.Bool?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "STICKY"
                ///   - authorVisible: If true, author name is visible.
                public init(
                    _type: Components.Schemas.StickyNode.Value1Payload._typePayload,
                    authorVisible: Swift.Bool? = nil
                ) {
                    self._type = _type
                    self.authorVisible = authorVisible
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case authorVisible
                }
            }
            /// - Remark: Generated from `#/components/schemas/StickyNode/value1`.
            public var value1: Components.Schemas.StickyNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/StickyNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/StickyNode/value3`.
            public var value3: Components.Schemas.HasLayoutTrait
            /// - Remark: Generated from `#/components/schemas/StickyNode/value4`.
            public var value4: Components.Schemas.HasBlendModeAndOpacityTrait
            /// - Remark: Generated from `#/components/schemas/StickyNode/value5`.
            public var value5: Components.Schemas.MinimalFillsTrait
            /// - Remark: Generated from `#/components/schemas/StickyNode/value6`.
            public var value6: Components.Schemas.HasMaskTrait
            /// - Remark: Generated from `#/components/schemas/StickyNode/value7`.
            public var value7: Components.Schemas.HasEffectsTrait
            /// - Remark: Generated from `#/components/schemas/StickyNode/value8`.
            public var value8: Components.Schemas.HasExportSettingsTrait
            /// - Remark: Generated from `#/components/schemas/StickyNode/value9`.
            public var value9: Components.Schemas.HasTextSublayerTrait
            /// Creates a new `StickyNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            public init(
                value1: Components.Schemas.StickyNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.HasLayoutTrait,
                value4: Components.Schemas.HasBlendModeAndOpacityTrait,
                value5: Components.Schemas.MinimalFillsTrait,
                value6: Components.Schemas.HasMaskTrait,
                value7: Components.Schemas.HasEffectsTrait,
                value8: Components.Schemas.HasExportSettingsTrait,
                value9: Components.Schemas.HasTextSublayerTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
                value4 = try .init(from: decoder)
                value5 = try .init(from: decoder)
                value6 = try .init(from: decoder)
                value7 = try .init(from: decoder)
                value8 = try .init(from: decoder)
                value9 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
                try value4.encode(to: encoder)
                try value5.encode(to: encoder)
                try value6.encode(to: encoder)
                try value7.encode(to: encoder)
                try value8.encode(to: encoder)
                try value9.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode`.
        public struct ShapeWithTextNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "SHAPE_WITH_TEXT"
                ///
                /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case SHAPE_WITH_TEXT = "SHAPE_WITH_TEXT"
                }
                /// The type of this node, represented by the string literal "SHAPE_WITH_TEXT"
                ///
                /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value1/type`.
                public var _type: Components.Schemas.ShapeWithTextNode.Value1Payload._typePayload
                /// Geometric shape type. Most shape types have the same name as their tooltip but there are a few exceptions. ENG_DATABASE: Cylinder, ENG_QUEUE: Horizontal cylinder, ENG_FILE: File, ENG_FOLDER: Folder.
                ///
                /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value1/shapeType`.
                public var shapeType: Components.Schemas.ShapeType
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "SHAPE_WITH_TEXT"
                ///   - shapeType: Geometric shape type. Most shape types have the same name as their tooltip but there are a few exceptions. ENG_DATABASE: Cylinder, ENG_QUEUE: Horizontal cylinder, ENG_FILE: File, ENG_FOLDER: Folder.
                public init(
                    _type: Components.Schemas.ShapeWithTextNode.Value1Payload._typePayload,
                    shapeType: Components.Schemas.ShapeType
                ) {
                    self._type = _type
                    self.shapeType = shapeType
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case shapeType
                }
            }
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value1`.
            public var value1: Components.Schemas.ShapeWithTextNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value3`.
            public var value3: Components.Schemas.HasLayoutTrait
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value4`.
            public var value4: Components.Schemas.HasBlendModeAndOpacityTrait
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value5`.
            public var value5: Components.Schemas.MinimalFillsTrait
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value6`.
            public var value6: Components.Schemas.HasMaskTrait
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value7`.
            public var value7: Components.Schemas.HasEffectsTrait
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value8`.
            public var value8: Components.Schemas.HasExportSettingsTrait
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value9`.
            public var value9: Components.Schemas.HasTextSublayerTrait
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value10`.
            public var value10: Components.Schemas.CornerTrait
            /// - Remark: Generated from `#/components/schemas/ShapeWithTextNode/value11`.
            public var value11: Components.Schemas.MinimalStrokesTrait
            /// Creates a new `ShapeWithTextNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            ///   - value11:
            public init(
                value1: Components.Schemas.ShapeWithTextNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.HasLayoutTrait,
                value4: Components.Schemas.HasBlendModeAndOpacityTrait,
                value5: Components.Schemas.MinimalFillsTrait,
                value6: Components.Schemas.HasMaskTrait,
                value7: Components.Schemas.HasEffectsTrait,
                value8: Components.Schemas.HasExportSettingsTrait,
                value9: Components.Schemas.HasTextSublayerTrait,
                value10: Components.Schemas.CornerTrait,
                value11: Components.Schemas.MinimalStrokesTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
                self.value11 = value11
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
                value4 = try .init(from: decoder)
                value5 = try .init(from: decoder)
                value6 = try .init(from: decoder)
                value7 = try .init(from: decoder)
                value8 = try .init(from: decoder)
                value9 = try .init(from: decoder)
                value10 = try .init(from: decoder)
                value11 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
                try value4.encode(to: encoder)
                try value5.encode(to: encoder)
                try value6.encode(to: encoder)
                try value7.encode(to: encoder)
                try value8.encode(to: encoder)
                try value9.encode(to: encoder)
                try value10.encode(to: encoder)
                try value11.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConnectorNode`.
        public struct ConnectorNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "CONNECTOR"
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case CONNECTOR = "CONNECTOR"
                }
                /// The type of this node, represented by the string literal "CONNECTOR"
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1/type`.
                public var _type: Components.Schemas.ConnectorNode.Value1Payload._typePayload
                /// The starting point of the connector.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1/connectorStart`.
                public var connectorStart: Components.Schemas.ConnectorEndpoint
                /// The ending point of the connector.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1/connectorEnd`.
                public var connectorEnd: Components.Schemas.ConnectorEndpoint
                /// A string enum describing the end cap of the start of the connector.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1/connectorStartStrokeCap`.
                @frozen public enum connectorStartStrokeCapPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case NONE = "NONE"
                    case LINE_ARROW = "LINE_ARROW"
                    case TRIANGLE_ARROW = "TRIANGLE_ARROW"
                    case DIAMOND_FILLED = "DIAMOND_FILLED"
                    case CIRCLE_FILLED = "CIRCLE_FILLED"
                    case TRIANGLE_FILLED = "TRIANGLE_FILLED"
                }
                /// A string enum describing the end cap of the start of the connector.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1/connectorStartStrokeCap`.
                public var connectorStartStrokeCap: Components.Schemas.ConnectorNode.Value1Payload.connectorStartStrokeCapPayload
                /// A string enum describing the end cap of the end of the connector.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1/connectorEndStrokeCap`.
                @frozen public enum connectorEndStrokeCapPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case NONE = "NONE"
                    case LINE_ARROW = "LINE_ARROW"
                    case TRIANGLE_ARROW = "TRIANGLE_ARROW"
                    case DIAMOND_FILLED = "DIAMOND_FILLED"
                    case CIRCLE_FILLED = "CIRCLE_FILLED"
                    case TRIANGLE_FILLED = "TRIANGLE_FILLED"
                }
                /// A string enum describing the end cap of the end of the connector.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1/connectorEndStrokeCap`.
                public var connectorEndStrokeCap: Components.Schemas.ConnectorNode.Value1Payload.connectorEndStrokeCapPayload
                /// Connector line type.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1/connectorLineType`.
                public var connectorLineType: Components.Schemas.ConnectorLineType
                /// Connector text background.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1/textBackground`.
                public var textBackground: Components.Schemas.ConnectorTextBackground?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "CONNECTOR"
                ///   - connectorStart: The starting point of the connector.
                ///   - connectorEnd: The ending point of the connector.
                ///   - connectorStartStrokeCap: A string enum describing the end cap of the start of the connector.
                ///   - connectorEndStrokeCap: A string enum describing the end cap of the end of the connector.
                ///   - connectorLineType: Connector line type.
                ///   - textBackground: Connector text background.
                public init(
                    _type: Components.Schemas.ConnectorNode.Value1Payload._typePayload,
                    connectorStart: Components.Schemas.ConnectorEndpoint,
                    connectorEnd: Components.Schemas.ConnectorEndpoint,
                    connectorStartStrokeCap: Components.Schemas.ConnectorNode.Value1Payload.connectorStartStrokeCapPayload,
                    connectorEndStrokeCap: Components.Schemas.ConnectorNode.Value1Payload.connectorEndStrokeCapPayload,
                    connectorLineType: Components.Schemas.ConnectorLineType,
                    textBackground: Components.Schemas.ConnectorTextBackground? = nil
                ) {
                    self._type = _type
                    self.connectorStart = connectorStart
                    self.connectorEnd = connectorEnd
                    self.connectorStartStrokeCap = connectorStartStrokeCap
                    self.connectorEndStrokeCap = connectorEndStrokeCap
                    self.connectorLineType = connectorLineType
                    self.textBackground = textBackground
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case connectorStart
                    case connectorEnd
                    case connectorStartStrokeCap
                    case connectorEndStrokeCap
                    case connectorLineType
                    case textBackground
                }
            }
            /// - Remark: Generated from `#/components/schemas/ConnectorNode/value1`.
            public var value1: Components.Schemas.ConnectorNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/ConnectorNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/ConnectorNode/value3`.
            public var value3: Components.Schemas.HasLayoutTrait
            /// - Remark: Generated from `#/components/schemas/ConnectorNode/value4`.
            public var value4: Components.Schemas.HasBlendModeAndOpacityTrait
            /// - Remark: Generated from `#/components/schemas/ConnectorNode/value5`.
            public var value5: Components.Schemas.HasEffectsTrait
            /// - Remark: Generated from `#/components/schemas/ConnectorNode/value6`.
            public var value6: Components.Schemas.HasExportSettingsTrait
            /// - Remark: Generated from `#/components/schemas/ConnectorNode/value7`.
            public var value7: Components.Schemas.HasTextSublayerTrait
            /// - Remark: Generated from `#/components/schemas/ConnectorNode/value8`.
            public var value8: Components.Schemas.MinimalStrokesTrait
            /// Creates a new `ConnectorNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            public init(
                value1: Components.Schemas.ConnectorNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.HasLayoutTrait,
                value4: Components.Schemas.HasBlendModeAndOpacityTrait,
                value5: Components.Schemas.HasEffectsTrait,
                value6: Components.Schemas.HasExportSettingsTrait,
                value7: Components.Schemas.HasTextSublayerTrait,
                value8: Components.Schemas.MinimalStrokesTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
                value4 = try .init(from: decoder)
                value5 = try .init(from: decoder)
                value6 = try .init(from: decoder)
                value7 = try .init(from: decoder)
                value8 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
                try value4.encode(to: encoder)
                try value5.encode(to: encoder)
                try value6.encode(to: encoder)
                try value7.encode(to: encoder)
                try value8.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/WashiTapeNode`.
        public struct WashiTapeNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WashiTapeNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "WASHI_TAPE"
                ///
                /// - Remark: Generated from `#/components/schemas/WashiTapeNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case WASHI_TAPE = "WASHI_TAPE"
                }
                /// The type of this node, represented by the string literal "WASHI_TAPE"
                ///
                /// - Remark: Generated from `#/components/schemas/WashiTapeNode/value1/type`.
                public var _type: Components.Schemas.WashiTapeNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "WASHI_TAPE"
                public init(_type: Components.Schemas.WashiTapeNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/WashiTapeNode/value1`.
            public var value1: Components.Schemas.WashiTapeNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/WashiTapeNode/value2`.
            public var value2: Components.Schemas.DefaultShapeTraits
            /// Creates a new `WashiTapeNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.WashiTapeNode.Value1Payload,
                value2: Components.Schemas.DefaultShapeTraits
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/WidgetNode`.
        public struct WidgetNode: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WidgetNode/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The type of this node, represented by the string literal "WIDGET"
                ///
                /// - Remark: Generated from `#/components/schemas/WidgetNode/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case WIDGET = "WIDGET"
                }
                /// The type of this node, represented by the string literal "WIDGET"
                ///
                /// - Remark: Generated from `#/components/schemas/WidgetNode/value1/type`.
                public var _type: Components.Schemas.WidgetNode.Value1Payload._typePayload
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The type of this node, represented by the string literal "WIDGET"
                public init(_type: Components.Schemas.WidgetNode.Value1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/WidgetNode/value1`.
            public var value1: Components.Schemas.WidgetNode.Value1Payload
            /// - Remark: Generated from `#/components/schemas/WidgetNode/value2`.
            public var value2: Components.Schemas.IsLayerTrait
            /// - Remark: Generated from `#/components/schemas/WidgetNode/value3`.
            public var value3: Components.Schemas.HasExportSettingsTrait
            /// - Remark: Generated from `#/components/schemas/WidgetNode/value4`.
            public var value4: Components.Schemas.HasChildrenTrait
            /// Creates a new `WidgetNode`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            public init(
                value1: Components.Schemas.WidgetNode.Value1Payload,
                value2: Components.Schemas.IsLayerTrait,
                value3: Components.Schemas.HasExportSettingsTrait,
                value4: Components.Schemas.HasChildrenTrait
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
                value3 = try .init(from: decoder)
                value4 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
                try value3.encode(to: encoder)
                try value4.encode(to: encoder)
            }
        }
        /// An RGB color
        ///
        /// - Remark: Generated from `#/components/schemas/RGB`.
        public struct RGB: Codable, Hashable, Sendable {
            /// Red channel value, between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RGB/r`.
            public var r: Swift.Double
            /// Green channel value, between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RGB/g`.
            public var g: Swift.Double
            /// Blue channel value, between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RGB/b`.
            public var b: Swift.Double
            /// Creates a new `RGB`.
            ///
            /// - Parameters:
            ///   - r: Red channel value, between 0 and 1.
            ///   - g: Green channel value, between 0 and 1.
            ///   - b: Blue channel value, between 0 and 1.
            public init(
                r: Swift.Double,
                g: Swift.Double,
                b: Swift.Double
            ) {
                self.r = r
                self.g = g
                self.b = b
            }
            public enum CodingKeys: String, CodingKey {
                case r
                case g
                case b
            }
        }
        /// An RGBA color
        ///
        /// - Remark: Generated from `#/components/schemas/RGBA`.
        public struct RGBA: Codable, Hashable, Sendable {
            /// Red channel value, between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RGBA/r`.
            public var r: Swift.Double
            /// Green channel value, between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RGBA/g`.
            public var g: Swift.Double
            /// Blue channel value, between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RGBA/b`.
            public var b: Swift.Double
            /// Alpha channel value, between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RGBA/a`.
            public var a: Swift.Double
            /// Creates a new `RGBA`.
            ///
            /// - Parameters:
            ///   - r: Red channel value, between 0 and 1.
            ///   - g: Green channel value, between 0 and 1.
            ///   - b: Blue channel value, between 0 and 1.
            ///   - a: Alpha channel value, between 0 and 1.
            public init(
                r: Swift.Double,
                g: Swift.Double,
                b: Swift.Double,
                a: Swift.Double
            ) {
                self.r = r
                self.g = g
                self.b = b
                self.a = a
            }
            public enum CodingKeys: String, CodingKey {
                case r
                case g
                case b
                case a
            }
        }
        /// A flow starting point used when launching a prototype to enter Presentation view.
        ///
        /// - Remark: Generated from `#/components/schemas/FlowStartingPoint`.
        public struct FlowStartingPoint: Codable, Hashable, Sendable {
            /// Unique identifier specifying the frame.
            ///
            /// - Remark: Generated from `#/components/schemas/FlowStartingPoint/nodeId`.
            public var nodeId: Swift.String
            /// Name of flow.
            ///
            /// - Remark: Generated from `#/components/schemas/FlowStartingPoint/name`.
            public var name: Swift.String
            /// Creates a new `FlowStartingPoint`.
            ///
            /// - Parameters:
            ///   - nodeId: Unique identifier specifying the frame.
            ///   - name: Name of flow.
            public init(
                nodeId: Swift.String,
                name: Swift.String
            ) {
                self.nodeId = nodeId
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case nodeId
                case name
            }
        }
        /// A width and a height.
        ///
        /// - Remark: Generated from `#/components/schemas/Size`.
        public struct Size: Codable, Hashable, Sendable {
            /// The width of a size.
            ///
            /// - Remark: Generated from `#/components/schemas/Size/width`.
            public var width: Swift.Double
            /// the height of a size.
            ///
            /// - Remark: Generated from `#/components/schemas/Size/height`.
            public var height: Swift.Double
            /// Creates a new `Size`.
            ///
            /// - Parameters:
            ///   - width: The width of a size.
            ///   - height: the height of a size.
            public init(
                width: Swift.Double,
                height: Swift.Double
            ) {
                self.width = width
                self.height = height
            }
            public enum CodingKeys: String, CodingKey {
                case width
                case height
            }
        }
        /// The device used to view a prototype.
        ///
        /// - Remark: Generated from `#/components/schemas/PrototypeDevice`.
        public struct PrototypeDevice: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PrototypeDevice/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case NONE = "NONE"
                case PRESET = "PRESET"
                case CUSTOM = "CUSTOM"
                case PRESENTATION = "PRESENTATION"
            }
            /// - Remark: Generated from `#/components/schemas/PrototypeDevice/type`.
            public var _type: Components.Schemas.PrototypeDevice._typePayload
            /// - Remark: Generated from `#/components/schemas/PrototypeDevice/size`.
            public var size: Components.Schemas.Size?
            /// - Remark: Generated from `#/components/schemas/PrototypeDevice/presetIdentifier`.
            public var presetIdentifier: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PrototypeDevice/rotation`.
            @frozen public enum rotationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case NONE = "NONE"
                case CCW_90 = "CCW_90"
            }
            /// - Remark: Generated from `#/components/schemas/PrototypeDevice/rotation`.
            public var rotation: Components.Schemas.PrototypeDevice.rotationPayload
            /// Creates a new `PrototypeDevice`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - size:
            ///   - presetIdentifier:
            ///   - rotation:
            public init(
                _type: Components.Schemas.PrototypeDevice._typePayload,
                size: Components.Schemas.Size? = nil,
                presetIdentifier: Swift.String? = nil,
                rotation: Components.Schemas.PrototypeDevice.rotationPayload
            ) {
                self._type = _type
                self.size = size
                self.presetIdentifier = presetIdentifier
                self.rotation = rotation
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case size
                case presetIdentifier
                case rotation
            }
        }
        /// Sizing constraint for exports.
        ///
        /// - Remark: Generated from `#/components/schemas/Constraint`.
        public struct Constraint: Codable, Hashable, Sendable {
            /// Type of constraint to apply:
            ///
            /// - `SCALE`: Scale by `value`.
            /// - `WIDTH`: Scale proportionally and set width to `value`.
            /// - `HEIGHT`: Scale proportionally and set height to `value`.
            ///
            /// - Remark: Generated from `#/components/schemas/Constraint/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case SCALE = "SCALE"
                case WIDTH = "WIDTH"
                case HEIGHT = "HEIGHT"
            }
            /// Type of constraint to apply:
            ///
            /// - `SCALE`: Scale by `value`.
            /// - `WIDTH`: Scale proportionally and set width to `value`.
            /// - `HEIGHT`: Scale proportionally and set height to `value`.
            ///
            /// - Remark: Generated from `#/components/schemas/Constraint/type`.
            public var _type: Components.Schemas.Constraint._typePayload
            /// See type property for effect of this field.
            ///
            /// - Remark: Generated from `#/components/schemas/Constraint/value`.
            public var value: Swift.Double
            /// Creates a new `Constraint`.
            ///
            /// - Parameters:
            ///   - _type: Type of constraint to apply:
            ///   - value: See type property for effect of this field.
            public init(
                _type: Components.Schemas.Constraint._typePayload,
                value: Swift.Double
            ) {
                self._type = _type
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case value
            }
        }
        /// An export setting.
        ///
        /// - Remark: Generated from `#/components/schemas/ExportSetting`.
        public struct ExportSetting: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ExportSetting/suffix`.
            public var suffix: Swift.String
            /// - Remark: Generated from `#/components/schemas/ExportSetting/format`.
            @frozen public enum formatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case JPG = "JPG"
                case PNG = "PNG"
                case SVG = "SVG"
                case PDF = "PDF"
            }
            /// - Remark: Generated from `#/components/schemas/ExportSetting/format`.
            public var format: Components.Schemas.ExportSetting.formatPayload
            /// - Remark: Generated from `#/components/schemas/ExportSetting/constraint`.
            public var constraint: Components.Schemas.Constraint
            /// Creates a new `ExportSetting`.
            ///
            /// - Parameters:
            ///   - suffix:
            ///   - format:
            ///   - constraint:
            public init(
                suffix: Swift.String,
                format: Components.Schemas.ExportSetting.formatPayload,
                constraint: Components.Schemas.Constraint
            ) {
                self.suffix = suffix
                self.format = format
                self.constraint = constraint
            }
            public enum CodingKeys: String, CodingKey {
                case suffix
                case format
                case constraint
            }
        }
        /// This type is a string enum with the following possible values
        ///
        /// Normal blends:
        /// - `PASS_THROUGH` (only applicable to objects with children)
        /// - `NORMAL`
        ///
        /// Darken:
        /// - `DARKEN`
        /// - `MULTIPLY`
        /// - `LINEAR_BURN`
        /// - `COLOR_BURN`
        ///
        /// Lighten:
        /// - `LIGHTEN`
        /// - `SCREEN`
        /// - `LINEAR_DODGE`
        /// - `COLOR_DODGE`
        ///
        /// Contrast:
        /// - `OVERLAY`
        /// - `SOFT_LIGHT`
        /// - `HARD_LIGHT`
        ///
        /// Inversion:
        /// - `DIFFERENCE`
        /// - `EXCLUSION`
        ///
        /// Component:
        /// - `HUE`
        /// - `SATURATION`
        /// - `COLOR`
        /// - `LUMINOSITY`
        ///
        /// - Remark: Generated from `#/components/schemas/BlendMode`.
        @frozen public enum BlendMode: String, Codable, Hashable, Sendable, CaseIterable {
            case PASS_THROUGH = "PASS_THROUGH"
            case NORMAL = "NORMAL"
            case DARKEN = "DARKEN"
            case MULTIPLY = "MULTIPLY"
            case LINEAR_BURN = "LINEAR_BURN"
            case COLOR_BURN = "COLOR_BURN"
            case LIGHTEN = "LIGHTEN"
            case SCREEN = "SCREEN"
            case LINEAR_DODGE = "LINEAR_DODGE"
            case COLOR_DODGE = "COLOR_DODGE"
            case OVERLAY = "OVERLAY"
            case SOFT_LIGHT = "SOFT_LIGHT"
            case HARD_LIGHT = "HARD_LIGHT"
            case DIFFERENCE = "DIFFERENCE"
            case EXCLUSION = "EXCLUSION"
            case HUE = "HUE"
            case SATURATION = "SATURATION"
            case COLOR = "COLOR"
            case LUMINOSITY = "LUMINOSITY"
        }
        /// A 2d vector.
        ///
        /// - Remark: Generated from `#/components/schemas/Vector`.
        public struct Vector: Codable, Hashable, Sendable {
            /// X coordinate of the vector.
            ///
            /// - Remark: Generated from `#/components/schemas/Vector/x`.
            public var x: Swift.Double
            /// Y coordinate of the vector.
            ///
            /// - Remark: Generated from `#/components/schemas/Vector/y`.
            public var y: Swift.Double
            /// Creates a new `Vector`.
            ///
            /// - Parameters:
            ///   - x: X coordinate of the vector.
            ///   - y: Y coordinate of the vector.
            public init(
                x: Swift.Double,
                y: Swift.Double
            ) {
                self.x = x
                self.y = y
            }
            public enum CodingKeys: String, CodingKey {
                case x
                case y
            }
        }
        /// A single color stop with its position along the gradient axis, color, and bound variables if any
        ///
        /// - Remark: Generated from `#/components/schemas/ColorStop`.
        public struct ColorStop: Codable, Hashable, Sendable {
            /// Value between 0 and 1 representing position along gradient axis.
            ///
            /// - Remark: Generated from `#/components/schemas/ColorStop/position`.
            public var position: Swift.Double
            /// Color attached to corresponding position.
            ///
            /// - Remark: Generated from `#/components/schemas/ColorStop/color`.
            public var color: Components.Schemas.RGBA
            /// The variables bound to a particular gradient stop
            ///
            /// - Remark: Generated from `#/components/schemas/ColorStop/boundVariables`.
            public struct boundVariablesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ColorStop/boundVariables/color`.
                public var color: Components.Schemas.VariableAlias?
                /// Creates a new `boundVariablesPayload`.
                ///
                /// - Parameters:
                ///   - color:
                public init(color: Components.Schemas.VariableAlias? = nil) {
                    self.color = color
                }
                public enum CodingKeys: String, CodingKey {
                    case color
                }
            }
            /// The variables bound to a particular gradient stop
            ///
            /// - Remark: Generated from `#/components/schemas/ColorStop/boundVariables`.
            public var boundVariables: Components.Schemas.ColorStop.boundVariablesPayload?
            /// Creates a new `ColorStop`.
            ///
            /// - Parameters:
            ///   - position: Value between 0 and 1 representing position along gradient axis.
            ///   - color: Color attached to corresponding position.
            ///   - boundVariables: The variables bound to a particular gradient stop
            public init(
                position: Swift.Double,
                color: Components.Schemas.RGBA,
                boundVariables: Components.Schemas.ColorStop.boundVariablesPayload? = nil
            ) {
                self.position = position
                self.color = color
                self.boundVariables = boundVariables
            }
            public enum CodingKeys: String, CodingKey {
                case position
                case color
                case boundVariables
            }
        }
        /// A transformation matrix is standard way in computer graphics to represent translation and rotation. These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1]. This is known as an affine transform and is enough to represent translation, rotation, and skew.
        ///
        /// The identity transform is [[1, 0, 0], [0, 1, 0]].
        ///
        /// A translation matrix will typically look like:
        ///
        /// ```
        /// [[1, 0, tx],
        ///   [0, 1, ty]]
        /// ```
        ///
        /// and a rotation matrix will typically look like:
        ///
        /// ```
        /// [[cos(angle), sin(angle), 0],
        ///   [-sin(angle), cos(angle), 0]]
        /// ```
        ///
        /// Another way to think about this transform is as three vectors:
        ///
        /// - The x axis (t[0][0], t[1][0])
        /// - The y axis (t[0][1], t[1][1])
        /// - The translation offset (t[0][2], t[1][2])
        ///
        /// The most common usage of the Transform matrix is the `relativeTransform property`. This particular usage of the matrix has a few additional restrictions. The translation offset can take on any value but we do enforce that the axis vectors are unit vectors (i.e. have length 1). The axes are not required to be at 90° angles to each other.
        ///
        /// - Remark: Generated from `#/components/schemas/Transform`.
        public typealias Transform = [[Swift.Double]]
        /// Image filters to apply to the node.
        ///
        /// - Remark: Generated from `#/components/schemas/ImageFilters`.
        public struct ImageFilters: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImageFilters/exposure`.
            public var exposure: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ImageFilters/contrast`.
            public var contrast: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ImageFilters/saturation`.
            public var saturation: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ImageFilters/temperature`.
            public var temperature: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ImageFilters/tint`.
            public var tint: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ImageFilters/highlights`.
            public var highlights: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ImageFilters/shadows`.
            public var shadows: Swift.Double?
            /// Creates a new `ImageFilters`.
            ///
            /// - Parameters:
            ///   - exposure:
            ///   - contrast:
            ///   - saturation:
            ///   - temperature:
            ///   - tint:
            ///   - highlights:
            ///   - shadows:
            public init(
                exposure: Swift.Double? = nil,
                contrast: Swift.Double? = nil,
                saturation: Swift.Double? = nil,
                temperature: Swift.Double? = nil,
                tint: Swift.Double? = nil,
                highlights: Swift.Double? = nil,
                shadows: Swift.Double? = nil
            ) {
                self.exposure = exposure
                self.contrast = contrast
                self.saturation = saturation
                self.temperature = temperature
                self.tint = tint
                self.highlights = highlights
                self.shadows = shadows
            }
            public enum CodingKeys: String, CodingKey {
                case exposure
                case contrast
                case saturation
                case temperature
                case tint
                case highlights
                case shadows
            }
        }
        /// - Remark: Generated from `#/components/schemas/BasePaint`.
        public struct BasePaint: Codable, Hashable, Sendable {
            /// Is the paint enabled?
            ///
            /// - Remark: Generated from `#/components/schemas/BasePaint/visible`.
            public var visible: Swift.Bool?
            /// Overall opacity of paint (colors within the paint can also have opacity values which would blend with this)
            ///
            /// - Remark: Generated from `#/components/schemas/BasePaint/opacity`.
            public var opacity: Swift.Double?
            /// How this node blends with nodes behind it in the scene
            ///
            /// - Remark: Generated from `#/components/schemas/BasePaint/blendMode`.
            public var blendMode: Components.Schemas.BlendMode
            /// Creates a new `BasePaint`.
            ///
            /// - Parameters:
            ///   - visible: Is the paint enabled?
            ///   - opacity: Overall opacity of paint (colors within the paint can also have opacity values which would blend with this)
            ///   - blendMode: How this node blends with nodes behind it in the scene
            public init(
                visible: Swift.Bool? = nil,
                opacity: Swift.Double? = nil,
                blendMode: Components.Schemas.BlendMode
            ) {
                self.visible = visible
                self.opacity = opacity
                self.blendMode = blendMode
            }
            public enum CodingKeys: String, CodingKey {
                case visible
                case opacity
                case blendMode
            }
        }
        /// - Remark: Generated from `#/components/schemas/SolidPaint`.
        public struct SolidPaint: Codable, Hashable, Sendable {
            /// A solid color
            ///
            /// - Remark: Generated from `#/components/schemas/SolidPaint/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The string literal "SOLID" representing the paint's type. Always check the `type` before reading other properties.
                ///
                /// - Remark: Generated from `#/components/schemas/SolidPaint/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case SOLID = "SOLID"
                }
                /// The string literal "SOLID" representing the paint's type. Always check the `type` before reading other properties.
                ///
                /// - Remark: Generated from `#/components/schemas/SolidPaint/value1/type`.
                public var _type: Components.Schemas.SolidPaint.Value1Payload._typePayload
                /// Solid color of the paint
                ///
                /// - Remark: Generated from `#/components/schemas/SolidPaint/value1/color`.
                public var color: Components.Schemas.RGBA
                /// The variables bound to a particular field on this paint
                ///
                /// - Remark: Generated from `#/components/schemas/SolidPaint/value1/boundVariables`.
                public struct boundVariablesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/SolidPaint/value1/boundVariables/color`.
                    public var color: Components.Schemas.VariableAlias?
                    /// Creates a new `boundVariablesPayload`.
                    ///
                    /// - Parameters:
                    ///   - color:
                    public init(color: Components.Schemas.VariableAlias? = nil) {
                        self.color = color
                    }
                    public enum CodingKeys: String, CodingKey {
                        case color
                    }
                }
                /// The variables bound to a particular field on this paint
                ///
                /// - Remark: Generated from `#/components/schemas/SolidPaint/value1/boundVariables`.
                public var boundVariables: Components.Schemas.SolidPaint.Value1Payload.boundVariablesPayload?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The string literal "SOLID" representing the paint's type. Always check the `type` before reading other properties.
                ///   - color: Solid color of the paint
                ///   - boundVariables: The variables bound to a particular field on this paint
                public init(
                    _type: Components.Schemas.SolidPaint.Value1Payload._typePayload,
                    color: Components.Schemas.RGBA,
                    boundVariables: Components.Schemas.SolidPaint.Value1Payload.boundVariablesPayload? = nil
                ) {
                    self._type = _type
                    self.color = color
                    self.boundVariables = boundVariables
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case color
                    case boundVariables
                }
            }
            /// A solid color
            ///
            /// - Remark: Generated from `#/components/schemas/SolidPaint/value1`.
            public var value1: Components.Schemas.SolidPaint.Value1Payload
            /// - Remark: Generated from `#/components/schemas/SolidPaint/value2`.
            public var value2: Components.Schemas.BasePaint
            /// Creates a new `SolidPaint`.
            ///
            /// - Parameters:
            ///   - value1: A solid color
            ///   - value2:
            public init(
                value1: Components.Schemas.SolidPaint.Value1Payload,
                value2: Components.Schemas.BasePaint
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/GradientPaint`.
        public struct GradientPaint: Codable, Hashable, Sendable {
            /// A gradient
            ///
            /// - Remark: Generated from `#/components/schemas/GradientPaint/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The string literal representing the paint's type. Always check the `type` before reading other properties.
                ///
                /// - Remark: Generated from `#/components/schemas/GradientPaint/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case GRADIENT_LINEAR = "GRADIENT_LINEAR"
                    case GRADIENT_RADIAL = "GRADIENT_RADIAL"
                    case GRADIENT_ANGULAR = "GRADIENT_ANGULAR"
                    case GRADIENT_DIAMOND = "GRADIENT_DIAMOND"
                }
                /// The string literal representing the paint's type. Always check the `type` before reading other properties.
                ///
                /// - Remark: Generated from `#/components/schemas/GradientPaint/value1/type`.
                public var _type: Components.Schemas.GradientPaint.Value1Payload._typePayload
                /// This field contains three vectors, each of which are a position in normalized object space (normalized object space is if the top left corner of the bounding box of the object is (0, 0) and the bottom right is (1,1)). The first position corresponds to the start of the gradient (value 0 for the purposes of calculating gradient stops), the second position is the end of the gradient (value 1), and the third handle position determines the width of the gradient.
                ///
                /// - Remark: Generated from `#/components/schemas/GradientPaint/value1/gradientHandlePositions`.
                public var gradientHandlePositions: [Components.Schemas.Vector]
                /// Positions of key points along the gradient axis with the colors anchored there. Colors along the gradient are interpolated smoothly between neighboring gradient stops.
                ///
                /// - Remark: Generated from `#/components/schemas/GradientPaint/value1/gradientStops`.
                public var gradientStops: [Components.Schemas.ColorStop]
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The string literal representing the paint's type. Always check the `type` before reading other properties.
                ///   - gradientHandlePositions: This field contains three vectors, each of which are a position in normalized object space (normalized object space is if the top left corner of the bounding box of the object is (0, 0) and the bottom right is (1,1)). The first position corresponds to the start of the gradient (value 0 for the purposes of calculating gradient stops), the second position is the end of the gradient (value 1), and the third handle position determines the width of the gradient.
                ///   - gradientStops: Positions of key points along the gradient axis with the colors anchored there. Colors along the gradient are interpolated smoothly between neighboring gradient stops.
                public init(
                    _type: Components.Schemas.GradientPaint.Value1Payload._typePayload,
                    gradientHandlePositions: [Components.Schemas.Vector],
                    gradientStops: [Components.Schemas.ColorStop]
                ) {
                    self._type = _type
                    self.gradientHandlePositions = gradientHandlePositions
                    self.gradientStops = gradientStops
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case gradientHandlePositions
                    case gradientStops
                }
            }
            /// A gradient
            ///
            /// - Remark: Generated from `#/components/schemas/GradientPaint/value1`.
            public var value1: Components.Schemas.GradientPaint.Value1Payload
            /// - Remark: Generated from `#/components/schemas/GradientPaint/value2`.
            public var value2: Components.Schemas.BasePaint
            /// Creates a new `GradientPaint`.
            ///
            /// - Parameters:
            ///   - value1: A gradient
            ///   - value2:
            public init(
                value1: Components.Schemas.GradientPaint.Value1Payload,
                value2: Components.Schemas.BasePaint
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImagePaint`.
        public struct ImagePaint: Codable, Hashable, Sendable {
            /// An image
            ///
            /// - Remark: Generated from `#/components/schemas/ImagePaint/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// The string literal "IMAGE" representing the paint's type. Always check the `type` before reading other properties.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagePaint/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case IMAGE = "IMAGE"
                }
                /// The string literal "IMAGE" representing the paint's type. Always check the `type` before reading other properties.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagePaint/value1/type`.
                public var _type: Components.Schemas.ImagePaint.Value1Payload._typePayload
                /// Image scaling mode.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagePaint/value1/scaleMode`.
                @frozen public enum scaleModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case FILL = "FILL"
                    case FIT = "FIT"
                    case TILE = "TILE"
                    case STRETCH = "STRETCH"
                }
                /// Image scaling mode.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagePaint/value1/scaleMode`.
                public var scaleMode: Components.Schemas.ImagePaint.Value1Payload.scaleModePayload
                /// A reference to an image embedded in this node. To download the image using this reference, use the `GET file images` endpoint to retrieve the mapping from image references to image URLs.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagePaint/value1/imageRef`.
                public var imageRef: Swift.String
                /// Affine transform applied to the image, only present if `scaleMode` is `STRETCH`
                ///
                /// - Remark: Generated from `#/components/schemas/ImagePaint/value1/imageTransform`.
                public var imageTransform: Components.Schemas.Transform?
                /// Amount image is scaled by in tiling, only present if scaleMode is `TILE`.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagePaint/value1/scalingFactor`.
                public var scalingFactor: Swift.Double?
                /// Defines what image filters have been applied to this paint, if any. If this property is not defined, no filters have been applied.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagePaint/value1/filters`.
                public var filters: Components.Schemas.ImageFilters?
                /// Image rotation, in degrees.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagePaint/value1/rotation`.
                public var rotation: Swift.Double?
                /// A reference to an animated GIF embedded in this node. To download the image using this reference, use the `GET file images` endpoint to retrieve the mapping from image references to image URLs.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagePaint/value1/gifRef`.
                public var gifRef: Swift.String?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: The string literal "IMAGE" representing the paint's type. Always check the `type` before reading other properties.
                ///   - scaleMode: Image scaling mode.
                ///   - imageRef: A reference to an image embedded in this node. To download the image using this reference, use the `GET file images` endpoint to retrieve the mapping from image references to image URLs.
                ///   - imageTransform: Affine transform applied to the image, only present if `scaleMode` is `STRETCH`
                ///   - scalingFactor: Amount image is scaled by in tiling, only present if scaleMode is `TILE`.
                ///   - filters: Defines what image filters have been applied to this paint, if any. If this property is not defined, no filters have been applied.
                ///   - rotation: Image rotation, in degrees.
                ///   - gifRef: A reference to an animated GIF embedded in this node. To download the image using this reference, use the `GET file images` endpoint to retrieve the mapping from image references to image URLs.
                public init(
                    _type: Components.Schemas.ImagePaint.Value1Payload._typePayload,
                    scaleMode: Components.Schemas.ImagePaint.Value1Payload.scaleModePayload,
                    imageRef: Swift.String,
                    imageTransform: Components.Schemas.Transform? = nil,
                    scalingFactor: Swift.Double? = nil,
                    filters: Components.Schemas.ImageFilters? = nil,
                    rotation: Swift.Double? = nil,
                    gifRef: Swift.String? = nil
                ) {
                    self._type = _type
                    self.scaleMode = scaleMode
                    self.imageRef = imageRef
                    self.imageTransform = imageTransform
                    self.scalingFactor = scalingFactor
                    self.filters = filters
                    self.rotation = rotation
                    self.gifRef = gifRef
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case scaleMode
                    case imageRef
                    case imageTransform
                    case scalingFactor
                    case filters
                    case rotation
                    case gifRef
                }
            }
            /// An image
            ///
            /// - Remark: Generated from `#/components/schemas/ImagePaint/value1`.
            public var value1: Components.Schemas.ImagePaint.Value1Payload
            /// - Remark: Generated from `#/components/schemas/ImagePaint/value2`.
            public var value2: Components.Schemas.BasePaint
            /// Creates a new `ImagePaint`.
            ///
            /// - Parameters:
            ///   - value1: An image
            ///   - value2:
            public init(
                value1: Components.Schemas.ImagePaint.Value1Payload,
                value2: Components.Schemas.BasePaint
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/Paint`.
        @frozen public enum Paint: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Paint/case1`.
            case SolidPaint(Components.Schemas.SolidPaint)
            /// - Remark: Generated from `#/components/schemas/Paint/case2`.
            case GradientPaint(Components.Schemas.GradientPaint)
            /// - Remark: Generated from `#/components/schemas/Paint/case3`.
            case ImagePaint(Components.Schemas.ImagePaint)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .SolidPaint(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .GradientPaint(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ImagePaint(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .SolidPaint(value):
                    try value.encode(to: encoder)
                case let .GradientPaint(value):
                    try value.encode(to: encoder)
                case let .ImagePaint(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Layout constraint relative to containing Frame
        ///
        /// - Remark: Generated from `#/components/schemas/LayoutConstraint`.
        public struct LayoutConstraint: Codable, Hashable, Sendable {
            /// Vertical constraint (relative to containing frame) as an enum:
            ///
            /// - `TOP`: Node is laid out relative to top of the containing frame
            /// - `BOTTOM`: Node is laid out relative to bottom of the containing frame
            /// - `CENTER`: Node is vertically centered relative to containing frame
            /// - `TOP_BOTTOM`: Both top and bottom of node are constrained relative to containing frame (node stretches with frame)
            /// - `SCALE`: Node scales vertically with containing frame
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutConstraint/vertical`.
            @frozen public enum verticalPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case TOP = "TOP"
                case BOTTOM = "BOTTOM"
                case CENTER = "CENTER"
                case TOP_BOTTOM = "TOP_BOTTOM"
                case SCALE = "SCALE"
            }
            /// Vertical constraint (relative to containing frame) as an enum:
            ///
            /// - `TOP`: Node is laid out relative to top of the containing frame
            /// - `BOTTOM`: Node is laid out relative to bottom of the containing frame
            /// - `CENTER`: Node is vertically centered relative to containing frame
            /// - `TOP_BOTTOM`: Both top and bottom of node are constrained relative to containing frame (node stretches with frame)
            /// - `SCALE`: Node scales vertically with containing frame
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutConstraint/vertical`.
            public var vertical: Components.Schemas.LayoutConstraint.verticalPayload
            /// Horizontal constraint (relative to containing frame) as an enum:
            ///
            /// - `LEFT`: Node is laid out relative to left of the containing frame
            /// - `RIGHT`: Node is laid out relative to right of the containing frame
            /// - `CENTER`: Node is horizontally centered relative to containing frame
            /// - `LEFT_RIGHT`: Both left and right of node are constrained relative to containing frame (node stretches with frame)
            /// - `SCALE`: Node scales horizontally with containing frame
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutConstraint/horizontal`.
            @frozen public enum horizontalPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
                case CENTER = "CENTER"
                case LEFT_RIGHT = "LEFT_RIGHT"
                case SCALE = "SCALE"
            }
            /// Horizontal constraint (relative to containing frame) as an enum:
            ///
            /// - `LEFT`: Node is laid out relative to left of the containing frame
            /// - `RIGHT`: Node is laid out relative to right of the containing frame
            /// - `CENTER`: Node is horizontally centered relative to containing frame
            /// - `LEFT_RIGHT`: Both left and right of node are constrained relative to containing frame (node stretches with frame)
            /// - `SCALE`: Node scales horizontally with containing frame
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutConstraint/horizontal`.
            public var horizontal: Components.Schemas.LayoutConstraint.horizontalPayload
            /// Creates a new `LayoutConstraint`.
            ///
            /// - Parameters:
            ///   - vertical: Vertical constraint (relative to containing frame) as an enum:
            ///   - horizontal: Horizontal constraint (relative to containing frame) as an enum:
            public init(
                vertical: Components.Schemas.LayoutConstraint.verticalPayload,
                horizontal: Components.Schemas.LayoutConstraint.horizontalPayload
            ) {
                self.vertical = vertical
                self.horizontal = horizontal
            }
            public enum CodingKeys: String, CodingKey {
                case vertical
                case horizontal
            }
        }
        /// A rectangle that expresses a bounding box in absolute coordinates.
        ///
        /// - Remark: Generated from `#/components/schemas/Rectangle`.
        public struct Rectangle: Codable, Hashable, Sendable {
            /// X coordinate of top left corner of the rectangle.
            ///
            /// - Remark: Generated from `#/components/schemas/Rectangle/x`.
            public var x: Swift.Double
            /// Y coordinate of top left corner of the rectangle.
            ///
            /// - Remark: Generated from `#/components/schemas/Rectangle/y`.
            public var y: Swift.Double
            /// Width of the rectangle.
            ///
            /// - Remark: Generated from `#/components/schemas/Rectangle/width`.
            public var width: Swift.Double
            /// Height of the rectangle.
            ///
            /// - Remark: Generated from `#/components/schemas/Rectangle/height`.
            public var height: Swift.Double
            /// Creates a new `Rectangle`.
            ///
            /// - Parameters:
            ///   - x: X coordinate of top left corner of the rectangle.
            ///   - y: Y coordinate of top left corner of the rectangle.
            ///   - width: Width of the rectangle.
            ///   - height: Height of the rectangle.
            public init(
                x: Swift.Double,
                y: Swift.Double,
                width: Swift.Double,
                height: Swift.Double
            ) {
                self.x = x
                self.y = y
                self.width = width
                self.height = height
            }
            public enum CodingKeys: String, CodingKey {
                case x
                case y
                case width
                case height
            }
        }
        /// Guides to align and place objects within a frames.
        ///
        /// - Remark: Generated from `#/components/schemas/LayoutGrid`.
        public struct LayoutGrid: Codable, Hashable, Sendable {
            /// Orientation of the grid as a string enum
            ///
            /// - `COLUMNS`: Vertical grid
            /// - `ROWS`: Horizontal grid
            /// - `GRID`: Square grid
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/pattern`.
            @frozen public enum patternPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case COLUMNS = "COLUMNS"
                case ROWS = "ROWS"
                case GRID = "GRID"
            }
            /// Orientation of the grid as a string enum
            ///
            /// - `COLUMNS`: Vertical grid
            /// - `ROWS`: Horizontal grid
            /// - `GRID`: Square grid
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/pattern`.
            public var pattern: Components.Schemas.LayoutGrid.patternPayload
            /// Width of column grid or height of row grid or square grid spacing.
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/sectionSize`.
            public var sectionSize: Swift.Double
            /// Is the grid currently visible?
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/visible`.
            public var visible: Swift.Bool
            /// Color of the grid
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/color`.
            public var color: Components.Schemas.RGBA
            /// Positioning of grid as a string enum
            ///
            /// - `MIN`: Grid starts at the left or top of the frame
            /// - `MAX`: Grid starts at the right or bottom of the frame
            /// - `STRETCH`: Grid is stretched to fit the frame
            /// - `CENTER`: Grid is center aligned
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/alignment`.
            @frozen public enum alignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case MIN = "MIN"
                case MAX = "MAX"
                case STRETCH = "STRETCH"
                case CENTER = "CENTER"
            }
            /// Positioning of grid as a string enum
            ///
            /// - `MIN`: Grid starts at the left or top of the frame
            /// - `MAX`: Grid starts at the right or bottom of the frame
            /// - `STRETCH`: Grid is stretched to fit the frame
            /// - `CENTER`: Grid is center aligned
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/alignment`.
            public var alignment: Components.Schemas.LayoutGrid.alignmentPayload
            /// Spacing in between columns and rows
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/gutterSize`.
            public var gutterSize: Swift.Double
            /// Spacing before the first column or row
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/offset`.
            public var offset: Swift.Double
            /// Number of columns or rows
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/count`.
            public var count: Swift.Double
            /// The variables bound to a particular field on this layout grid
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/boundVariables`.
            public struct boundVariablesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/LayoutGrid/boundVariables/gutterSize`.
                public var gutterSize: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/LayoutGrid/boundVariables/numSections`.
                public var numSections: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/LayoutGrid/boundVariables/sectionSize`.
                public var sectionSize: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/LayoutGrid/boundVariables/offset`.
                public var offset: Components.Schemas.VariableAlias?
                /// Creates a new `boundVariablesPayload`.
                ///
                /// - Parameters:
                ///   - gutterSize:
                ///   - numSections:
                ///   - sectionSize:
                ///   - offset:
                public init(
                    gutterSize: Components.Schemas.VariableAlias? = nil,
                    numSections: Components.Schemas.VariableAlias? = nil,
                    sectionSize: Components.Schemas.VariableAlias? = nil,
                    offset: Components.Schemas.VariableAlias? = nil
                ) {
                    self.gutterSize = gutterSize
                    self.numSections = numSections
                    self.sectionSize = sectionSize
                    self.offset = offset
                }
                public enum CodingKeys: String, CodingKey {
                    case gutterSize
                    case numSections
                    case sectionSize
                    case offset
                }
            }
            /// The variables bound to a particular field on this layout grid
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutGrid/boundVariables`.
            public var boundVariables: Components.Schemas.LayoutGrid.boundVariablesPayload?
            /// Creates a new `LayoutGrid`.
            ///
            /// - Parameters:
            ///   - pattern: Orientation of the grid as a string enum
            ///   - sectionSize: Width of column grid or height of row grid or square grid spacing.
            ///   - visible: Is the grid currently visible?
            ///   - color: Color of the grid
            ///   - alignment: Positioning of grid as a string enum
            ///   - gutterSize: Spacing in between columns and rows
            ///   - offset: Spacing before the first column or row
            ///   - count: Number of columns or rows
            ///   - boundVariables: The variables bound to a particular field on this layout grid
            public init(
                pattern: Components.Schemas.LayoutGrid.patternPayload,
                sectionSize: Swift.Double,
                visible: Swift.Bool,
                color: Components.Schemas.RGBA,
                alignment: Components.Schemas.LayoutGrid.alignmentPayload,
                gutterSize: Swift.Double,
                offset: Swift.Double,
                count: Swift.Double,
                boundVariables: Components.Schemas.LayoutGrid.boundVariablesPayload? = nil
            ) {
                self.pattern = pattern
                self.sectionSize = sectionSize
                self.visible = visible
                self.color = color
                self.alignment = alignment
                self.gutterSize = gutterSize
                self.offset = offset
                self.count = count
                self.boundVariables = boundVariables
            }
            public enum CodingKeys: String, CodingKey {
                case pattern
                case sectionSize
                case visible
                case color
                case alignment
                case gutterSize
                case offset
                case count
                case boundVariables
            }
        }
        /// Base properties shared by all shadow effects
        ///
        /// - Remark: Generated from `#/components/schemas/BaseShadowEffect`.
        public struct BaseShadowEffect: Codable, Hashable, Sendable {
            /// The color of the shadow
            ///
            /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/color`.
            public var color: Components.Schemas.RGBA
            /// Blend mode of the shadow
            ///
            /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/blendMode`.
            public var blendMode: Components.Schemas.BlendMode
            /// How far the shadow is projected in the x and y directions
            ///
            /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/offset`.
            public var offset: Components.Schemas.Vector
            /// Radius of the blur effect (applies to shadows as well)
            ///
            /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/radius`.
            public var radius: Swift.Double
            /// The distance by which to expand (or contract) the shadow.
            ///
            /// For drop shadows, a positive `spread` value creates a shadow larger than the node, whereas a negative value creates a shadow smaller than the node.
            ///
            /// For inner shadows, a positive `spread` value contracts the shadow. Spread values are only accepted on rectangles and ellipses, or on frames, components, and instances with visible fill paints and `clipsContent` enabled. When left unspecified, the default value is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/spread`.
            public var spread: Swift.Double?
            /// Whether this shadow is visible.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/visible`.
            public var visible: Swift.Bool
            /// The variables bound to a particular field on this shadow effect
            ///
            /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/boundVariables`.
            public struct boundVariablesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/boundVariables/radius`.
                public var radius: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/boundVariables/spread`.
                public var spread: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/boundVariables/color`.
                public var color: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/boundVariables/offsetX`.
                public var offsetX: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/boundVariables/offsetY`.
                public var offsetY: Components.Schemas.VariableAlias?
                /// Creates a new `boundVariablesPayload`.
                ///
                /// - Parameters:
                ///   - radius:
                ///   - spread:
                ///   - color:
                ///   - offsetX:
                ///   - offsetY:
                public init(
                    radius: Components.Schemas.VariableAlias? = nil,
                    spread: Components.Schemas.VariableAlias? = nil,
                    color: Components.Schemas.VariableAlias? = nil,
                    offsetX: Components.Schemas.VariableAlias? = nil,
                    offsetY: Components.Schemas.VariableAlias? = nil
                ) {
                    self.radius = radius
                    self.spread = spread
                    self.color = color
                    self.offsetX = offsetX
                    self.offsetY = offsetY
                }
                public enum CodingKeys: String, CodingKey {
                    case radius
                    case spread
                    case color
                    case offsetX
                    case offsetY
                }
            }
            /// The variables bound to a particular field on this shadow effect
            ///
            /// - Remark: Generated from `#/components/schemas/BaseShadowEffect/boundVariables`.
            public var boundVariables: Components.Schemas.BaseShadowEffect.boundVariablesPayload?
            /// Creates a new `BaseShadowEffect`.
            ///
            /// - Parameters:
            ///   - color: The color of the shadow
            ///   - blendMode: Blend mode of the shadow
            ///   - offset: How far the shadow is projected in the x and y directions
            ///   - radius: Radius of the blur effect (applies to shadows as well)
            ///   - spread: The distance by which to expand (or contract) the shadow.
            ///   - visible: Whether this shadow is visible.
            ///   - boundVariables: The variables bound to a particular field on this shadow effect
            public init(
                color: Components.Schemas.RGBA,
                blendMode: Components.Schemas.BlendMode,
                offset: Components.Schemas.Vector,
                radius: Swift.Double,
                spread: Swift.Double? = nil,
                visible: Swift.Bool,
                boundVariables: Components.Schemas.BaseShadowEffect.boundVariablesPayload? = nil
            ) {
                self.color = color
                self.blendMode = blendMode
                self.offset = offset
                self.radius = radius
                self.spread = spread
                self.visible = visible
                self.boundVariables = boundVariables
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case blendMode
                case offset
                case radius
                case spread
                case visible
                case boundVariables
            }
        }
        /// - Remark: Generated from `#/components/schemas/DropShadowEffect`.
        public struct DropShadowEffect: Codable, Hashable, Sendable {
            /// A drop shadow effect
            ///
            /// - Remark: Generated from `#/components/schemas/DropShadowEffect/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// A string literal representing the effect's type. Always check the type before reading other properties.
                ///
                /// - Remark: Generated from `#/components/schemas/DropShadowEffect/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case DROP_SHADOW = "DROP_SHADOW"
                }
                /// A string literal representing the effect's type. Always check the type before reading other properties.
                ///
                /// - Remark: Generated from `#/components/schemas/DropShadowEffect/value1/type`.
                public var _type: Components.Schemas.DropShadowEffect.Value1Payload._typePayload
                /// Whether to show the shadow behind translucent or transparent pixels
                ///
                /// - Remark: Generated from `#/components/schemas/DropShadowEffect/value1/showShadowBehindNode`.
                public var showShadowBehindNode: Swift.Bool
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: A string literal representing the effect's type. Always check the type before reading other properties.
                ///   - showShadowBehindNode: Whether to show the shadow behind translucent or transparent pixels
                public init(
                    _type: Components.Schemas.DropShadowEffect.Value1Payload._typePayload,
                    showShadowBehindNode: Swift.Bool
                ) {
                    self._type = _type
                    self.showShadowBehindNode = showShadowBehindNode
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case showShadowBehindNode
                }
            }
            /// A drop shadow effect
            ///
            /// - Remark: Generated from `#/components/schemas/DropShadowEffect/value1`.
            public var value1: Components.Schemas.DropShadowEffect.Value1Payload
            /// - Remark: Generated from `#/components/schemas/DropShadowEffect/value2`.
            public var value2: Components.Schemas.BaseShadowEffect
            /// Creates a new `DropShadowEffect`.
            ///
            /// - Parameters:
            ///   - value1: A drop shadow effect
            ///   - value2:
            public init(
                value1: Components.Schemas.DropShadowEffect.Value1Payload,
                value2: Components.Schemas.BaseShadowEffect
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/InnerShadowEffect`.
        public struct InnerShadowEffect: Codable, Hashable, Sendable {
            /// An inner shadow effect
            ///
            /// - Remark: Generated from `#/components/schemas/InnerShadowEffect/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// A string literal representing the effect's type. Always check the type before reading other properties.
                ///
                /// - Remark: Generated from `#/components/schemas/InnerShadowEffect/value1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case INNER_SHADOW = "INNER_SHADOW"
                }
                /// A string literal representing the effect's type. Always check the type before reading other properties.
                ///
                /// - Remark: Generated from `#/components/schemas/InnerShadowEffect/value1/type`.
                public var _type: Components.Schemas.InnerShadowEffect.Value1Payload._typePayload?
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - _type: A string literal representing the effect's type. Always check the type before reading other properties.
                public init(_type: Components.Schemas.InnerShadowEffect.Value1Payload._typePayload? = nil) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// An inner shadow effect
            ///
            /// - Remark: Generated from `#/components/schemas/InnerShadowEffect/value1`.
            public var value1: Components.Schemas.InnerShadowEffect.Value1Payload
            /// - Remark: Generated from `#/components/schemas/InnerShadowEffect/value2`.
            public var value2: Components.Schemas.BaseShadowEffect
            /// Creates a new `InnerShadowEffect`.
            ///
            /// - Parameters:
            ///   - value1: An inner shadow effect
            ///   - value2:
            public init(
                value1: Components.Schemas.InnerShadowEffect.Value1Payload,
                value2: Components.Schemas.BaseShadowEffect
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// A blur effect
        ///
        /// - Remark: Generated from `#/components/schemas/BlurEffect`.
        public struct BlurEffect: Codable, Hashable, Sendable {
            /// A string literal representing the effect's type. Always check the type before reading other properties.
            ///
            /// - Remark: Generated from `#/components/schemas/BlurEffect/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case LAYER_BLUR = "LAYER_BLUR"
                case BACKGROUND_BLUR = "BACKGROUND_BLUR"
            }
            /// A string literal representing the effect's type. Always check the type before reading other properties.
            ///
            /// - Remark: Generated from `#/components/schemas/BlurEffect/type`.
            public var _type: Components.Schemas.BlurEffect._typePayload
            /// Whether this blur is active.
            ///
            /// - Remark: Generated from `#/components/schemas/BlurEffect/visible`.
            public var visible: Swift.Bool
            /// Radius of the blur effect
            ///
            /// - Remark: Generated from `#/components/schemas/BlurEffect/radius`.
            public var radius: Swift.Double
            /// The variables bound to a particular field on this blur effect
            ///
            /// - Remark: Generated from `#/components/schemas/BlurEffect/boundVariables`.
            public struct boundVariablesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlurEffect/boundVariables/radius`.
                public var radius: Components.Schemas.VariableAlias?
                /// Creates a new `boundVariablesPayload`.
                ///
                /// - Parameters:
                ///   - radius:
                public init(radius: Components.Schemas.VariableAlias? = nil) {
                    self.radius = radius
                }
                public enum CodingKeys: String, CodingKey {
                    case radius
                }
            }
            /// The variables bound to a particular field on this blur effect
            ///
            /// - Remark: Generated from `#/components/schemas/BlurEffect/boundVariables`.
            public var boundVariables: Components.Schemas.BlurEffect.boundVariablesPayload?
            /// Creates a new `BlurEffect`.
            ///
            /// - Parameters:
            ///   - _type: A string literal representing the effect's type. Always check the type before reading other properties.
            ///   - visible: Whether this blur is active.
            ///   - radius: Radius of the blur effect
            ///   - boundVariables: The variables bound to a particular field on this blur effect
            public init(
                _type: Components.Schemas.BlurEffect._typePayload,
                visible: Swift.Bool,
                radius: Swift.Double,
                boundVariables: Components.Schemas.BlurEffect.boundVariablesPayload? = nil
            ) {
                self._type = _type
                self.visible = visible
                self.radius = radius
                self.boundVariables = boundVariables
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case visible
                case radius
                case boundVariables
            }
        }
        /// - Remark: Generated from `#/components/schemas/Effect`.
        @frozen public enum Effect: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Effect/BlurEffect`.
            case BACKGROUND_BLUR(Components.Schemas.BlurEffect)
            /// - Remark: Generated from `#/components/schemas/Effect/DropShadowEffect`.
            case DROP_SHADOW(Components.Schemas.DropShadowEffect)
            /// - Remark: Generated from `#/components/schemas/Effect/InnerShadowEffect`.
            case INNER_SHADOW(Components.Schemas.InnerShadowEffect)
            /// - Remark: Generated from `#/components/schemas/Effect/BlurEffect`.
            case LAYER_BLUR(Components.Schemas.BlurEffect)
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                switch discriminator {
                case "BACKGROUND_BLUR":
                    self = .BACKGROUND_BLUR(try .init(from: decoder))
                case "DROP_SHADOW":
                    self = .DROP_SHADOW(try .init(from: decoder))
                case "INNER_SHADOW":
                    self = .INNER_SHADOW(try .init(from: decoder))
                case "LAYER_BLUR":
                    self = .LAYER_BLUR(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys._type,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .BACKGROUND_BLUR(value):
                    try value.encode(to: encoder)
                case let .DROP_SHADOW(value):
                    try value.encode(to: encoder)
                case let .INNER_SHADOW(value):
                    try value.encode(to: encoder)
                case let .LAYER_BLUR(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// A set of properties that can be applied to nodes and published. Styles for a property can be created in the corresponding property's panel while editing a file.
        ///
        /// - Remark: Generated from `#/components/schemas/Style`.
        public struct Style: Codable, Hashable, Sendable {
            /// The key of the style
            ///
            /// - Remark: Generated from `#/components/schemas/Style/key`.
            public var key: Swift.String
            /// Name of the style
            ///
            /// - Remark: Generated from `#/components/schemas/Style/name`.
            public var name: Swift.String
            /// Description of the style
            ///
            /// - Remark: Generated from `#/components/schemas/Style/description`.
            public var description: Swift.String
            /// Whether this style is a remote style that doesn't live in this file
            ///
            /// - Remark: Generated from `#/components/schemas/Style/remote`.
            public var remote: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Style/styleType`.
            public var styleType: Components.Schemas.StyleType
            /// Creates a new `Style`.
            ///
            /// - Parameters:
            ///   - key: The key of the style
            ///   - name: Name of the style
            ///   - description: Description of the style
            ///   - remote: Whether this style is a remote style that doesn't live in this file
            ///   - styleType:
            public init(
                key: Swift.String,
                name: Swift.String,
                description: Swift.String,
                remote: Swift.Bool,
                styleType: Components.Schemas.StyleType
            ) {
                self.key = key
                self.name = name
                self.description = description
                self.remote = remote
                self.styleType = styleType
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case description
                case remote
                case styleType
            }
        }
        /// This type is a string enum with the following possible values:
        ///
        /// - `EASE_IN`: Ease in with an animation curve similar to CSS ease-in.
        /// - `EASE_OUT`: Ease out with an animation curve similar to CSS ease-out.
        /// - `EASE_IN_AND_OUT`: Ease in and then out with an animation curve similar to CSS ease-in-out.
        /// - `LINEAR`: No easing, similar to CSS linear.
        /// - `EASE_IN_BACK`: Ease in with an animation curve that moves past the initial keyframe's value and then accelerates as it reaches the end.
        /// - `EASE_OUT_BACK`: Ease out with an animation curve that starts fast, then slows and goes past the ending keyframe's value.
        /// - `EASE_IN_AND_OUT_BACK`: Ease in and then out with an animation curve that overshoots the initial keyframe's value, then accelerates quickly before it slows and overshoots the ending keyframes value.
        /// - `CUSTOM_CUBIC_BEZIER`: User-defined cubic bezier curve.
        /// - `GENTLE`: Gentle animation similar to react-spring.
        /// - `QUICK`: Quick spring animation, great for toasts and notifications.
        /// - `BOUNCY`: Bouncy spring, for delightful animations like a heart bounce.
        /// - `SLOW`: Slow spring, useful as a steady, natural way to scale up fullscreen content.
        /// - `CUSTOM_SPRING`: User-defined spring animation.
        ///
        /// - Remark: Generated from `#/components/schemas/EasingType`.
        @frozen public enum EasingType: String, Codable, Hashable, Sendable, CaseIterable {
            case EASE_IN = "EASE_IN"
            case EASE_OUT = "EASE_OUT"
            case EASE_IN_AND_OUT = "EASE_IN_AND_OUT"
            case LINEAR = "LINEAR"
            case EASE_IN_BACK = "EASE_IN_BACK"
            case EASE_OUT_BACK = "EASE_OUT_BACK"
            case EASE_IN_AND_OUT_BACK = "EASE_IN_AND_OUT_BACK"
            case CUSTOM_BEZIER = "CUSTOM_BEZIER"
            case GENTLE = "GENTLE"
            case QUICK = "QUICK"
            case BOUNCY = "BOUNCY"
            case SLOW = "SLOW"
            case CUSTOM_SPRING = "CUSTOM_SPRING"
        }
        /// Individual stroke weights
        ///
        /// - Remark: Generated from `#/components/schemas/StrokeWeights`.
        public struct StrokeWeights: Codable, Hashable, Sendable {
            /// The top stroke weight.
            ///
            /// - Remark: Generated from `#/components/schemas/StrokeWeights/top`.
            public var top: Swift.Double
            /// The right stroke weight.
            ///
            /// - Remark: Generated from `#/components/schemas/StrokeWeights/right`.
            public var right: Swift.Double
            /// The bottom stroke weight.
            ///
            /// - Remark: Generated from `#/components/schemas/StrokeWeights/bottom`.
            public var bottom: Swift.Double
            /// The left stroke weight.
            ///
            /// - Remark: Generated from `#/components/schemas/StrokeWeights/left`.
            public var left: Swift.Double
            /// Creates a new `StrokeWeights`.
            ///
            /// - Parameters:
            ///   - top: The top stroke weight.
            ///   - right: The right stroke weight.
            ///   - bottom: The bottom stroke weight.
            ///   - left: The left stroke weight.
            public init(
                top: Swift.Double,
                right: Swift.Double,
                bottom: Swift.Double,
                left: Swift.Double
            ) {
                self.top = top
                self.right = right
                self.bottom = bottom
                self.left = left
            }
            public enum CodingKeys: String, CodingKey {
                case top
                case right
                case bottom
                case left
            }
        }
        /// Paint metadata to override default paints.
        ///
        /// - Remark: Generated from `#/components/schemas/PaintOverride`.
        public struct PaintOverride: Codable, Hashable, Sendable {
            /// Paints applied to characters.
            ///
            /// - Remark: Generated from `#/components/schemas/PaintOverride/fills`.
            public var fills: [Components.Schemas.Paint]?
            /// ID of style node, if any, that this inherits fill data from.
            ///
            /// - Remark: Generated from `#/components/schemas/PaintOverride/inheritFillStyleId`.
            public var inheritFillStyleId: Swift.String?
            /// Creates a new `PaintOverride`.
            ///
            /// - Parameters:
            ///   - fills: Paints applied to characters.
            ///   - inheritFillStyleId: ID of style node, if any, that this inherits fill data from.
            public init(
                fills: [Components.Schemas.Paint]? = nil,
                inheritFillStyleId: Swift.String? = nil
            ) {
                self.fills = fills
                self.inheritFillStyleId = inheritFillStyleId
            }
            public enum CodingKeys: String, CodingKey {
                case fills
                case inheritFillStyleId
            }
        }
        /// Defines a single path
        ///
        /// - Remark: Generated from `#/components/schemas/Path`.
        public struct Path: Codable, Hashable, Sendable {
            /// A series of path commands that encodes how to draw the path.
            ///
            /// - Remark: Generated from `#/components/schemas/Path/path`.
            public var path: Swift.String
            /// The winding rule for the path (same as in SVGs). This determines whether a given point in space is inside or outside the path.
            ///
            /// - Remark: Generated from `#/components/schemas/Path/windingRule`.
            @frozen public enum windingRulePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case NONZERO = "NONZERO"
                case EVENODD = "EVENODD"
            }
            /// The winding rule for the path (same as in SVGs). This determines whether a given point in space is inside or outside the path.
            ///
            /// - Remark: Generated from `#/components/schemas/Path/windingRule`.
            public var windingRule: Components.Schemas.Path.windingRulePayload
            /// If there is a per-region fill, this refers to an ID in the `fillOverrideTable`.
            ///
            /// - Remark: Generated from `#/components/schemas/Path/overrideID`.
            public var overrideID: Swift.Double?
            /// Creates a new `Path`.
            ///
            /// - Parameters:
            ///   - path: A series of path commands that encodes how to draw the path.
            ///   - windingRule: The winding rule for the path (same as in SVGs). This determines whether a given point in space is inside or outside the path.
            ///   - overrideID: If there is a per-region fill, this refers to an ID in the `fillOverrideTable`.
            public init(
                path: Swift.String,
                windingRule: Components.Schemas.Path.windingRulePayload,
                overrideID: Swift.Double? = nil
            ) {
                self.path = path
                self.windingRule = windingRule
                self.overrideID = overrideID
            }
            public enum CodingKeys: String, CodingKey {
                case path
                case windingRule
                case overrideID
            }
        }
        /// Information about the arc properties of an ellipse. 0° is the x axis and increasing angles rotate clockwise.
        ///
        /// - Remark: Generated from `#/components/schemas/ArcData`.
        public struct ArcData: Codable, Hashable, Sendable {
            /// Start of the sweep in radians.
            ///
            /// - Remark: Generated from `#/components/schemas/ArcData/startingAngle`.
            public var startingAngle: Swift.Double
            /// End of the sweep in radians.
            ///
            /// - Remark: Generated from `#/components/schemas/ArcData/endingAngle`.
            public var endingAngle: Swift.Double
            /// Inner radius value between 0 and 1
            ///
            /// - Remark: Generated from `#/components/schemas/ArcData/innerRadius`.
            public var innerRadius: Swift.Double
            /// Creates a new `ArcData`.
            ///
            /// - Parameters:
            ///   - startingAngle: Start of the sweep in radians.
            ///   - endingAngle: End of the sweep in radians.
            ///   - innerRadius: Inner radius value between 0 and 1
            public init(
                startingAngle: Swift.Double,
                endingAngle: Swift.Double,
                innerRadius: Swift.Double
            ) {
                self.startingAngle = startingAngle
                self.endingAngle = endingAngle
                self.innerRadius = innerRadius
            }
            public enum CodingKeys: String, CodingKey {
                case startingAngle
                case endingAngle
                case innerRadius
            }
        }
        /// A link to either a URL or another frame (node) in the document.
        ///
        /// - Remark: Generated from `#/components/schemas/Hyperlink`.
        public struct Hyperlink: Codable, Hashable, Sendable {
            /// The type of hyperlink. Can be either `URL` or `NODE`.
            ///
            /// - Remark: Generated from `#/components/schemas/Hyperlink/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case URL = "URL"
                case NODE = "NODE"
            }
            /// The type of hyperlink. Can be either `URL` or `NODE`.
            ///
            /// - Remark: Generated from `#/components/schemas/Hyperlink/type`.
            public var _type: Components.Schemas.Hyperlink._typePayload?
            /// The URL that the hyperlink points to, if `type` is `URL`.
            ///
            /// - Remark: Generated from `#/components/schemas/Hyperlink/url`.
            public var url: Swift.String?
            /// The ID of the node that the hyperlink points to, if `type` is `NODE`.
            ///
            /// - Remark: Generated from `#/components/schemas/Hyperlink/nodeID`.
            public var nodeID: Swift.String?
            /// Creates a new `Hyperlink`.
            ///
            /// - Parameters:
            ///   - _type: The type of hyperlink. Can be either `URL` or `NODE`.
            ///   - url: The URL that the hyperlink points to, if `type` is `URL`.
            ///   - nodeID: The ID of the node that the hyperlink points to, if `type` is `NODE`.
            public init(
                _type: Components.Schemas.Hyperlink._typePayload? = nil,
                url: Swift.String? = nil,
                nodeID: Swift.String? = nil
            ) {
                self._type = _type
                self.url = url
                self.nodeID = nodeID
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case url
                case nodeID
            }
        }
        /// Metadata for character formatting.
        ///
        /// - Remark: Generated from `#/components/schemas/TypeStyle`.
        public struct TypeStyle: Codable, Hashable, Sendable {
            /// Font family of text (standard name).
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/fontFamily`.
            public var fontFamily: Swift.String?
            /// PostScript font name.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/fontPostScriptName`.
            public var fontPostScriptName: Swift.String?
            /// Space between paragraphs in px, 0 if not present.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/paragraphSpacing`.
            public var paragraphSpacing: Swift.Double?
            /// Paragraph indentation in px, 0 if not present.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/paragraphIndent`.
            public var paragraphIndent: Swift.Double?
            /// Space between list items in px, 0 if not present.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/listSpacing`.
            public var listSpacing: Swift.Double?
            /// Whether or not text is italicized.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/italic`.
            public var italic: Swift.Bool?
            /// Numeric font weight.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/fontWeight`.
            public var fontWeight: Swift.Double?
            /// Font size in px.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/fontSize`.
            public var fontSize: Swift.Double?
            /// Text casing applied to the node, default is the original casing.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textCase`.
            @frozen public enum textCasePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case UPPER = "UPPER"
                case LOWER = "LOWER"
                case TITLE = "TITLE"
                case SMALL_CAPS = "SMALL_CAPS"
                case SMALL_CAPS_FORCED = "SMALL_CAPS_FORCED"
            }
            /// Text casing applied to the node, default is the original casing.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textCase`.
            public var textCase: Components.Schemas.TypeStyle.textCasePayload?
            /// Text decoration applied to the node, default is none.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textDecoration`.
            @frozen public enum textDecorationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case NONE = "NONE"
                case STRIKETHROUGH = "STRIKETHROUGH"
                case UNDERLINE = "UNDERLINE"
            }
            /// Text decoration applied to the node, default is none.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textDecoration`.
            public var textDecoration: Components.Schemas.TypeStyle.textDecorationPayload?
            /// Dimensions along which text will auto resize, default is that the text does not auto-resize. TRUNCATE means that the text will be shortened and trailing text will be replaced with "…" if the text contents is larger than the bounds. `TRUNCATE` as a return value is deprecated and will be removed in a future version. Read from `textTruncation` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textAutoResize`.
            @frozen public enum textAutoResizePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case NONE = "NONE"
                case WIDTH_AND_HEIGHT = "WIDTH_AND_HEIGHT"
                case HEIGHT = "HEIGHT"
                case TRUNCATE = "TRUNCATE"
            }
            /// Dimensions along which text will auto resize, default is that the text does not auto-resize. TRUNCATE means that the text will be shortened and trailing text will be replaced with "…" if the text contents is larger than the bounds. `TRUNCATE` as a return value is deprecated and will be removed in a future version. Read from `textTruncation` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textAutoResize`.
            public var textAutoResize: Components.Schemas.TypeStyle.textAutoResizePayload?
            /// Whether this text node will truncate with an ellipsis when the text contents is larger than the text node.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textTruncation`.
            @frozen public enum textTruncationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case DISABLED = "DISABLED"
                case ENDING = "ENDING"
            }
            /// Whether this text node will truncate with an ellipsis when the text contents is larger than the text node.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textTruncation`.
            public var textTruncation: Components.Schemas.TypeStyle.textTruncationPayload?
            /// When `textTruncation: "ENDING"` is set, `maxLines` determines how many lines a text node can grow to before it truncates.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/maxLines`.
            public var maxLines: Swift.Double?
            /// Horizontal text alignment as string enum.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textAlignHorizontal`.
            @frozen public enum textAlignHorizontalPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
                case CENTER = "CENTER"
                case JUSTIFIED = "JUSTIFIED"
            }
            /// Horizontal text alignment as string enum.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textAlignHorizontal`.
            public var textAlignHorizontal: Components.Schemas.TypeStyle.textAlignHorizontalPayload?
            /// Vertical text alignment as string enum.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textAlignVertical`.
            @frozen public enum textAlignVerticalPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case TOP = "TOP"
                case CENTER = "CENTER"
                case BOTTOM = "BOTTOM"
            }
            /// Vertical text alignment as string enum.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/textAlignVertical`.
            public var textAlignVertical: Components.Schemas.TypeStyle.textAlignVerticalPayload?
            /// Space between characters in px.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/letterSpacing`.
            public var letterSpacing: Swift.Double?
            /// An array of fill paints applied to the characters.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/fills`.
            public var fills: [Components.Schemas.Paint]?
            /// Link to a URL or frame.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/hyperlink`.
            public var hyperlink: Components.Schemas.Hyperlink?
            /// A map of OpenType feature flags to 1 or 0, 1 if it is enabled and 0 if it is disabled. Note that some flags aren't reflected here. For example, SMCP (small caps) is still represented by the `textCase` field.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/opentypeFlags`.
            public struct opentypeFlagsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.Double]
                /// Creates a new `opentypeFlagsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.Double] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A map of OpenType feature flags to 1 or 0, 1 if it is enabled and 0 if it is disabled. Note that some flags aren't reflected here. For example, SMCP (small caps) is still represented by the `textCase` field.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/opentypeFlags`.
            public var opentypeFlags: Components.Schemas.TypeStyle.opentypeFlagsPayload?
            /// Line height in px.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/lineHeightPx`.
            public var lineHeightPx: Swift.Double?
            /// Line height as a percentage of normal line height. This is deprecated; in a future version of the API only lineHeightPx and lineHeightPercentFontSize will be returned.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/lineHeightPercent`.
            public var lineHeightPercent: Swift.Double?
            /// Line height as a percentage of the font size. Only returned when `lineHeightPercent` (deprecated) is not 100.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/lineHeightPercentFontSize`.
            public var lineHeightPercentFontSize: Swift.Double?
            /// The unit of the line height value specified by the user.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/lineHeightUnit`.
            @frozen public enum lineHeightUnitPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case PIXELS = "PIXELS"
                case FONT_SIZE__percnt_ = "FONT_SIZE_%"
                case INTRINSIC__percnt_ = "INTRINSIC_%"
            }
            /// The unit of the line height value specified by the user.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/lineHeightUnit`.
            public var lineHeightUnit: Components.Schemas.TypeStyle.lineHeightUnitPayload?
            /// The variables bound to a particular field on this style
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/boundVariables`.
            public struct boundVariablesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TypeStyle/boundVariables/fontFamily`.
                public var fontFamily: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/TypeStyle/boundVariables/fontSize`.
                public var fontSize: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/TypeStyle/boundVariables/fontStyle`.
                public var fontStyle: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/TypeStyle/boundVariables/fontWeight`.
                public var fontWeight: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/TypeStyle/boundVariables/letterSpacing`.
                public var letterSpacing: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/TypeStyle/boundVariables/lineHeight`.
                public var lineHeight: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/TypeStyle/boundVariables/paragraphSpacing`.
                public var paragraphSpacing: Components.Schemas.VariableAlias?
                /// - Remark: Generated from `#/components/schemas/TypeStyle/boundVariables/paragraphIndent`.
                public var paragraphIndent: Components.Schemas.VariableAlias?
                /// Creates a new `boundVariablesPayload`.
                ///
                /// - Parameters:
                ///   - fontFamily:
                ///   - fontSize:
                ///   - fontStyle:
                ///   - fontWeight:
                ///   - letterSpacing:
                ///   - lineHeight:
                ///   - paragraphSpacing:
                ///   - paragraphIndent:
                public init(
                    fontFamily: Components.Schemas.VariableAlias? = nil,
                    fontSize: Components.Schemas.VariableAlias? = nil,
                    fontStyle: Components.Schemas.VariableAlias? = nil,
                    fontWeight: Components.Schemas.VariableAlias? = nil,
                    letterSpacing: Components.Schemas.VariableAlias? = nil,
                    lineHeight: Components.Schemas.VariableAlias? = nil,
                    paragraphSpacing: Components.Schemas.VariableAlias? = nil,
                    paragraphIndent: Components.Schemas.VariableAlias? = nil
                ) {
                    self.fontFamily = fontFamily
                    self.fontSize = fontSize
                    self.fontStyle = fontStyle
                    self.fontWeight = fontWeight
                    self.letterSpacing = letterSpacing
                    self.lineHeight = lineHeight
                    self.paragraphSpacing = paragraphSpacing
                    self.paragraphIndent = paragraphIndent
                }
                public enum CodingKeys: String, CodingKey {
                    case fontFamily
                    case fontSize
                    case fontStyle
                    case fontWeight
                    case letterSpacing
                    case lineHeight
                    case paragraphSpacing
                    case paragraphIndent
                }
            }
            /// The variables bound to a particular field on this style
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/boundVariables`.
            public var boundVariables: Components.Schemas.TypeStyle.boundVariablesPayload?
            ///  Whether or not this style has overrides over a text style. The possible fields to override are semanticWeight, semanticItalic, hyperlink, and textDecoration. If this is true, then those fields are overrides if present.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/isOverrideOverTextStyle`.
            public var isOverrideOverTextStyle: Swift.Bool?
            /// Indicates how the font weight was overridden when there is a text style override.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/semanticWeight`.
            @frozen public enum semanticWeightPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case BOLD = "BOLD"
                case NORMAL = "NORMAL"
            }
            /// Indicates how the font weight was overridden when there is a text style override.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/semanticWeight`.
            public var semanticWeight: Components.Schemas.TypeStyle.semanticWeightPayload?
            /// Indicates how the font style was overridden when there is a text style override.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/semanticItalic`.
            @frozen public enum semanticItalicPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ITALIC = "ITALIC"
                case NORMAL = "NORMAL"
            }
            /// Indicates how the font style was overridden when there is a text style override.
            ///
            /// - Remark: Generated from `#/components/schemas/TypeStyle/semanticItalic`.
            public var semanticItalic: Components.Schemas.TypeStyle.semanticItalicPayload?
            /// Creates a new `TypeStyle`.
            ///
            /// - Parameters:
            ///   - fontFamily: Font family of text (standard name).
            ///   - fontPostScriptName: PostScript font name.
            ///   - paragraphSpacing: Space between paragraphs in px, 0 if not present.
            ///   - paragraphIndent: Paragraph indentation in px, 0 if not present.
            ///   - listSpacing: Space between list items in px, 0 if not present.
            ///   - italic: Whether or not text is italicized.
            ///   - fontWeight: Numeric font weight.
            ///   - fontSize: Font size in px.
            ///   - textCase: Text casing applied to the node, default is the original casing.
            ///   - textDecoration: Text decoration applied to the node, default is none.
            ///   - textAutoResize: Dimensions along which text will auto resize, default is that the text does not auto-resize. TRUNCATE means that the text will be shortened and trailing text will be replaced with "…" if the text contents is larger than the bounds. `TRUNCATE` as a return value is deprecated and will be removed in a future version. Read from `textTruncation` instead.
            ///   - textTruncation: Whether this text node will truncate with an ellipsis when the text contents is larger than the text node.
            ///   - maxLines: When `textTruncation: "ENDING"` is set, `maxLines` determines how many lines a text node can grow to before it truncates.
            ///   - textAlignHorizontal: Horizontal text alignment as string enum.
            ///   - textAlignVertical: Vertical text alignment as string enum.
            ///   - letterSpacing: Space between characters in px.
            ///   - fills: An array of fill paints applied to the characters.
            ///   - hyperlink: Link to a URL or frame.
            ///   - opentypeFlags: A map of OpenType feature flags to 1 or 0, 1 if it is enabled and 0 if it is disabled. Note that some flags aren't reflected here. For example, SMCP (small caps) is still represented by the `textCase` field.
            ///   - lineHeightPx: Line height in px.
            ///   - lineHeightPercent: Line height as a percentage of normal line height. This is deprecated; in a future version of the API only lineHeightPx and lineHeightPercentFontSize will be returned.
            ///   - lineHeightPercentFontSize: Line height as a percentage of the font size. Only returned when `lineHeightPercent` (deprecated) is not 100.
            ///   - lineHeightUnit: The unit of the line height value specified by the user.
            ///   - boundVariables: The variables bound to a particular field on this style
            ///   - isOverrideOverTextStyle:  Whether or not this style has overrides over a text style. The possible fields to override are semanticWeight, semanticItalic, hyperlink, and textDecoration. If this is true, then those fields are overrides if present.
            ///   - semanticWeight: Indicates how the font weight was overridden when there is a text style override.
            ///   - semanticItalic: Indicates how the font style was overridden when there is a text style override.
            public init(
                fontFamily: Swift.String? = nil,
                fontPostScriptName: Swift.String? = nil,
                paragraphSpacing: Swift.Double? = nil,
                paragraphIndent: Swift.Double? = nil,
                listSpacing: Swift.Double? = nil,
                italic: Swift.Bool? = nil,
                fontWeight: Swift.Double? = nil,
                fontSize: Swift.Double? = nil,
                textCase: Components.Schemas.TypeStyle.textCasePayload? = nil,
                textDecoration: Components.Schemas.TypeStyle.textDecorationPayload? = nil,
                textAutoResize: Components.Schemas.TypeStyle.textAutoResizePayload? = nil,
                textTruncation: Components.Schemas.TypeStyle.textTruncationPayload? = nil,
                maxLines: Swift.Double? = nil,
                textAlignHorizontal: Components.Schemas.TypeStyle.textAlignHorizontalPayload? = nil,
                textAlignVertical: Components.Schemas.TypeStyle.textAlignVerticalPayload? = nil,
                letterSpacing: Swift.Double? = nil,
                fills: [Components.Schemas.Paint]? = nil,
                hyperlink: Components.Schemas.Hyperlink? = nil,
                opentypeFlags: Components.Schemas.TypeStyle.opentypeFlagsPayload? = nil,
                lineHeightPx: Swift.Double? = nil,
                lineHeightPercent: Swift.Double? = nil,
                lineHeightPercentFontSize: Swift.Double? = nil,
                lineHeightUnit: Components.Schemas.TypeStyle.lineHeightUnitPayload? = nil,
                boundVariables: Components.Schemas.TypeStyle.boundVariablesPayload? = nil,
                isOverrideOverTextStyle: Swift.Bool? = nil,
                semanticWeight: Components.Schemas.TypeStyle.semanticWeightPayload? = nil,
                semanticItalic: Components.Schemas.TypeStyle.semanticItalicPayload? = nil
            ) {
                self.fontFamily = fontFamily
                self.fontPostScriptName = fontPostScriptName
                self.paragraphSpacing = paragraphSpacing
                self.paragraphIndent = paragraphIndent
                self.listSpacing = listSpacing
                self.italic = italic
                self.fontWeight = fontWeight
                self.fontSize = fontSize
                self.textCase = textCase
                self.textDecoration = textDecoration
                self.textAutoResize = textAutoResize
                self.textTruncation = textTruncation
                self.maxLines = maxLines
                self.textAlignHorizontal = textAlignHorizontal
                self.textAlignVertical = textAlignVertical
                self.letterSpacing = letterSpacing
                self.fills = fills
                self.hyperlink = hyperlink
                self.opentypeFlags = opentypeFlags
                self.lineHeightPx = lineHeightPx
                self.lineHeightPercent = lineHeightPercent
                self.lineHeightPercentFontSize = lineHeightPercentFontSize
                self.lineHeightUnit = lineHeightUnit
                self.boundVariables = boundVariables
                self.isOverrideOverTextStyle = isOverrideOverTextStyle
                self.semanticWeight = semanticWeight
                self.semanticItalic = semanticItalic
            }
            public enum CodingKeys: String, CodingKey {
                case fontFamily
                case fontPostScriptName
                case paragraphSpacing
                case paragraphIndent
                case listSpacing
                case italic
                case fontWeight
                case fontSize
                case textCase
                case textDecoration
                case textAutoResize
                case textTruncation
                case maxLines
                case textAlignHorizontal
                case textAlignVertical
                case letterSpacing
                case fills
                case hyperlink
                case opentypeFlags
                case lineHeightPx
                case lineHeightPercent
                case lineHeightPercentFontSize
                case lineHeightUnit
                case boundVariables
                case isOverrideOverTextStyle
                case semanticWeight
                case semanticItalic
            }
        }
        /// Component property type.
        ///
        /// - Remark: Generated from `#/components/schemas/ComponentPropertyType`.
        @frozen public enum ComponentPropertyType: String, Codable, Hashable, Sendable, CaseIterable {
            case BOOLEAN = "BOOLEAN"
            case INSTANCE_SWAP = "INSTANCE_SWAP"
            case TEXT = "TEXT"
            case VARIANT = "VARIANT"
        }
        /// Instance swap preferred value.
        ///
        /// - Remark: Generated from `#/components/schemas/InstanceSwapPreferredValue`.
        public struct InstanceSwapPreferredValue: Codable, Hashable, Sendable {
            /// Type of node for this preferred value.
            ///
            /// - Remark: Generated from `#/components/schemas/InstanceSwapPreferredValue/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case COMPONENT = "COMPONENT"
                case COMPONENT_SET = "COMPONENT_SET"
            }
            /// Type of node for this preferred value.
            ///
            /// - Remark: Generated from `#/components/schemas/InstanceSwapPreferredValue/type`.
            public var _type: Components.Schemas.InstanceSwapPreferredValue._typePayload
            /// Key of this component or component set.
            ///
            /// - Remark: Generated from `#/components/schemas/InstanceSwapPreferredValue/key`.
            public var key: Swift.String
            /// Creates a new `InstanceSwapPreferredValue`.
            ///
            /// - Parameters:
            ///   - _type: Type of node for this preferred value.
            ///   - key: Key of this component or component set.
            public init(
                _type: Components.Schemas.InstanceSwapPreferredValue._typePayload,
                key: Swift.String
            ) {
                self._type = _type
                self.key = key
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case key
            }
        }
        /// A property of a component.
        ///
        /// - Remark: Generated from `#/components/schemas/ComponentPropertyDefinition`.
        public struct ComponentPropertyDefinition: Codable, Hashable, Sendable {
            /// Type of this component property.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentPropertyDefinition/type`.
            public var _type: Components.Schemas.ComponentPropertyType
            /// Initial value of this property for instances.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentPropertyDefinition/defaultValue`.
            @frozen public enum defaultValuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ComponentPropertyDefinition/defaultValue/case1`.
                case case1(Swift.Bool)
                /// - Remark: Generated from `#/components/schemas/ComponentPropertyDefinition/defaultValue/case2`.
                case case2(Swift.String)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Initial value of this property for instances.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentPropertyDefinition/defaultValue`.
            public var defaultValue: Components.Schemas.ComponentPropertyDefinition.defaultValuePayload
            /// All possible values for this property. Only exists on VARIANT properties.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentPropertyDefinition/variantOptions`.
            public var variantOptions: [Swift.String]?
            /// Preferred values for this property. Only applicable if type is `INSTANCE_SWAP`.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentPropertyDefinition/preferredValues`.
            public var preferredValues: [Components.Schemas.InstanceSwapPreferredValue]?
            /// Creates a new `ComponentPropertyDefinition`.
            ///
            /// - Parameters:
            ///   - _type: Type of this component property.
            ///   - defaultValue: Initial value of this property for instances.
            ///   - variantOptions: All possible values for this property. Only exists on VARIANT properties.
            ///   - preferredValues: Preferred values for this property. Only applicable if type is `INSTANCE_SWAP`.
            public init(
                _type: Components.Schemas.ComponentPropertyType,
                defaultValue: Components.Schemas.ComponentPropertyDefinition.defaultValuePayload,
                variantOptions: [Swift.String]? = nil,
                preferredValues: [Components.Schemas.InstanceSwapPreferredValue]? = nil
            ) {
                self._type = _type
                self.defaultValue = defaultValue
                self.variantOptions = variantOptions
                self.preferredValues = preferredValues
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case defaultValue
                case variantOptions
                case preferredValues
            }
        }
        /// A property of a component.
        ///
        /// - Remark: Generated from `#/components/schemas/ComponentProperty`.
        public struct ComponentProperty: Codable, Hashable, Sendable {
            /// Type of this component property.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentProperty/type`.
            public var _type: Components.Schemas.ComponentPropertyType
            /// Value of the property for this component instance.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentProperty/value`.
            @frozen public enum valuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ComponentProperty/value/case1`.
                case case1(Swift.Bool)
                /// - Remark: Generated from `#/components/schemas/ComponentProperty/value/case2`.
                case case2(Swift.String)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Value of the property for this component instance.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentProperty/value`.
            public var value: Components.Schemas.ComponentProperty.valuePayload
            /// Preferred values for this property. Only applicable if type is `INSTANCE_SWAP`.
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentProperty/preferredValues`.
            public var preferredValues: [Components.Schemas.InstanceSwapPreferredValue]?
            /// The variables bound to a particular field on this component property
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentProperty/boundVariables`.
            public struct boundVariablesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ComponentProperty/boundVariables/value`.
                public var value: Components.Schemas.VariableAlias?
                /// Creates a new `boundVariablesPayload`.
                ///
                /// - Parameters:
                ///   - value:
                public init(value: Components.Schemas.VariableAlias? = nil) {
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case value
                }
            }
            /// The variables bound to a particular field on this component property
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentProperty/boundVariables`.
            public var boundVariables: Components.Schemas.ComponentProperty.boundVariablesPayload?
            /// Creates a new `ComponentProperty`.
            ///
            /// - Parameters:
            ///   - _type: Type of this component property.
            ///   - value: Value of the property for this component instance.
            ///   - preferredValues: Preferred values for this property. Only applicable if type is `INSTANCE_SWAP`.
            ///   - boundVariables: The variables bound to a particular field on this component property
            public init(
                _type: Components.Schemas.ComponentPropertyType,
                value: Components.Schemas.ComponentProperty.valuePayload,
                preferredValues: [Components.Schemas.InstanceSwapPreferredValue]? = nil,
                boundVariables: Components.Schemas.ComponentProperty.boundVariablesPayload? = nil
            ) {
                self._type = _type
                self.value = value
                self.preferredValues = preferredValues
                self.boundVariables = boundVariables
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case value
                case preferredValues
                case boundVariables
            }
        }
        /// Fields directly overridden on an instance. Inherited overrides are not included.
        ///
        /// - Remark: Generated from `#/components/schemas/Overrides`.
        public struct Overrides: Codable, Hashable, Sendable {
            /// A unique ID for a node.
            ///
            /// - Remark: Generated from `#/components/schemas/Overrides/id`.
            public var id: Swift.String
            /// An array of properties.
            ///
            /// - Remark: Generated from `#/components/schemas/Overrides/overriddenFields`.
            public var overriddenFields: [Swift.String]
            /// Creates a new `Overrides`.
            ///
            /// - Parameters:
            ///   - id: A unique ID for a node.
            ///   - overriddenFields: An array of properties.
            public init(
                id: Swift.String,
                overriddenFields: [Swift.String]
            ) {
                self.id = id
                self.overriddenFields = overriddenFields
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case overriddenFields
            }
        }
        /// Geometric shape type.
        ///
        /// - Remark: Generated from `#/components/schemas/ShapeType`.
        @frozen public enum ShapeType: String, Codable, Hashable, Sendable, CaseIterable {
            case SQUARE = "SQUARE"
            case ELLIPSE = "ELLIPSE"
            case ROUNDED_RECTANGLE = "ROUNDED_RECTANGLE"
            case DIAMOND = "DIAMOND"
            case TRIANGLE_UP = "TRIANGLE_UP"
            case TRIANGLE_DOWN = "TRIANGLE_DOWN"
            case PARALLELOGRAM_RIGHT = "PARALLELOGRAM_RIGHT"
            case PARALLELOGRAM_LEFT = "PARALLELOGRAM_LEFT"
            case ENG_DATABASE = "ENG_DATABASE"
            case ENG_QUEUE = "ENG_QUEUE"
            case ENG_FILE = "ENG_FILE"
            case ENG_FOLDER = "ENG_FOLDER"
            case TRAPEZOID = "TRAPEZOID"
            case PREDEFINED_PROCESS = "PREDEFINED_PROCESS"
            case SHIELD = "SHIELD"
            case DOCUMENT_SINGLE = "DOCUMENT_SINGLE"
            case DOCUMENT_MULTIPLE = "DOCUMENT_MULTIPLE"
            case MANUAL_INPUT = "MANUAL_INPUT"
            case HEXAGON = "HEXAGON"
            case CHEVRON = "CHEVRON"
            case PENTAGON = "PENTAGON"
            case OCTAGON = "OCTAGON"
            case STAR = "STAR"
            case PLUS = "PLUS"
            case ARROW_LEFT = "ARROW_LEFT"
            case ARROW_RIGHT = "ARROW_RIGHT"
            case SUMMING_JUNCTION = "SUMMING_JUNCTION"
            case OR = "OR"
            case SPEECH_BUBBLE = "SPEECH_BUBBLE"
            case INTERNAL_STORAGE = "INTERNAL_STORAGE"
        }
        /// Stores canvas location for a connector start/end point.
        ///
        /// - Remark: Generated from `#/components/schemas/ConnectorEndpoint`.
        @frozen public enum ConnectorEndpoint: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConnectorEndpoint/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// Node ID that this endpoint attaches to.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorEndpoint/case1/endpointNodeId`.
                public var endpointNodeId: Swift.String?
                /// The position of the endpoint relative to the node.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorEndpoint/case1/position`.
                public var position: Components.Schemas.Vector?
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - endpointNodeId: Node ID that this endpoint attaches to.
                ///   - position: The position of the endpoint relative to the node.
                public init(
                    endpointNodeId: Swift.String? = nil,
                    position: Components.Schemas.Vector? = nil
                ) {
                    self.endpointNodeId = endpointNodeId
                    self.position = position
                }
                public enum CodingKeys: String, CodingKey {
                    case endpointNodeId
                    case position
                }
            }
            /// - Remark: Generated from `#/components/schemas/ConnectorEndpoint/case1`.
            case case1(Components.Schemas.ConnectorEndpoint.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/ConnectorEndpoint/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// Node ID that this endpoint attaches to.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorEndpoint/case2/endpointNodeId`.
                public var endpointNodeId: Swift.String?
                /// The magnet type is a string enum.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorEndpoint/case2/magnet`.
                @frozen public enum magnetPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case AUTO = "AUTO"
                    case TOP = "TOP"
                    case BOTTOM = "BOTTOM"
                    case LEFT = "LEFT"
                    case RIGHT = "RIGHT"
                    case CENTER = "CENTER"
                }
                /// The magnet type is a string enum.
                ///
                /// - Remark: Generated from `#/components/schemas/ConnectorEndpoint/case2/magnet`.
                public var magnet: Components.Schemas.ConnectorEndpoint.Case2Payload.magnetPayload?
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - endpointNodeId: Node ID that this endpoint attaches to.
                ///   - magnet: The magnet type is a string enum.
                public init(
                    endpointNodeId: Swift.String? = nil,
                    magnet: Components.Schemas.ConnectorEndpoint.Case2Payload.magnetPayload? = nil
                ) {
                    self.endpointNodeId = endpointNodeId
                    self.magnet = magnet
                }
                public enum CodingKeys: String, CodingKey {
                    case endpointNodeId
                    case magnet
                }
            }
            /// - Remark: Generated from `#/components/schemas/ConnectorEndpoint/case2`.
            case case2(Components.Schemas.ConnectorEndpoint.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Connector line type.
        ///
        /// - Remark: Generated from `#/components/schemas/ConnectorLineType`.
        @frozen public enum ConnectorLineType: String, Codable, Hashable, Sendable, CaseIterable {
            case STRAIGHT = "STRAIGHT"
            case ELBOWED = "ELBOWED"
        }
        /// - Remark: Generated from `#/components/schemas/ConnectorTextBackground`.
        public struct ConnectorTextBackground: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConnectorTextBackground/value1`.
            public var value1: Components.Schemas.CornerTrait
            /// - Remark: Generated from `#/components/schemas/ConnectorTextBackground/value2`.
            public var value2: Components.Schemas.MinimalFillsTrait
            /// Creates a new `ConnectorTextBackground`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.CornerTrait,
                value2: Components.Schemas.MinimalFillsTrait
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// A description of a main component. Helps you identify which component instances are attached to.
        ///
        /// - Remark: Generated from `#/components/schemas/Component`.
        public struct Component: Codable, Hashable, Sendable {
            /// The key of the component
            ///
            /// - Remark: Generated from `#/components/schemas/Component/key`.
            public var key: Swift.String
            /// Name of the component
            ///
            /// - Remark: Generated from `#/components/schemas/Component/name`.
            public var name: Swift.String
            /// The description of the component as entered in the editor
            ///
            /// - Remark: Generated from `#/components/schemas/Component/description`.
            public var description: Swift.String
            /// The ID of the component set if the component belongs to one
            ///
            /// - Remark: Generated from `#/components/schemas/Component/componentSetId`.
            public var componentSetId: Swift.String?
            /// An array of documentation links attached to this component
            ///
            /// - Remark: Generated from `#/components/schemas/Component/documentationLinks`.
            public var documentationLinks: [Components.Schemas.DocumentationLink]
            /// Whether this component is a remote component that doesn't live in this file
            ///
            /// - Remark: Generated from `#/components/schemas/Component/remote`.
            public var remote: Swift.Bool
            /// Creates a new `Component`.
            ///
            /// - Parameters:
            ///   - key: The key of the component
            ///   - name: Name of the component
            ///   - description: The description of the component as entered in the editor
            ///   - componentSetId: The ID of the component set if the component belongs to one
            ///   - documentationLinks: An array of documentation links attached to this component
            ///   - remote: Whether this component is a remote component that doesn't live in this file
            public init(
                key: Swift.String,
                name: Swift.String,
                description: Swift.String,
                componentSetId: Swift.String? = nil,
                documentationLinks: [Components.Schemas.DocumentationLink],
                remote: Swift.Bool
            ) {
                self.key = key
                self.name = name
                self.description = description
                self.componentSetId = componentSetId
                self.documentationLinks = documentationLinks
                self.remote = remote
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case description
                case componentSetId
                case documentationLinks
                case remote
            }
        }
        /// A description of a component set, which is a node containing a set of variants of a component.
        ///
        /// - Remark: Generated from `#/components/schemas/ComponentSet`.
        public struct ComponentSet: Codable, Hashable, Sendable {
            /// The key of the component set
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentSet/key`.
            public var key: Swift.String
            /// Name of the component set
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentSet/name`.
            public var name: Swift.String
            /// The description of the component set as entered in the editor
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentSet/description`.
            public var description: Swift.String
            /// An array of documentation links attached to this component set
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentSet/documentationLinks`.
            public var documentationLinks: [Components.Schemas.DocumentationLink]?
            /// Whether this component set is a remote component set that doesn't live in this file
            ///
            /// - Remark: Generated from `#/components/schemas/ComponentSet/remote`.
            public var remote: Swift.Bool?
            /// Creates a new `ComponentSet`.
            ///
            /// - Parameters:
            ///   - key: The key of the component set
            ///   - name: Name of the component set
            ///   - description: The description of the component set as entered in the editor
            ///   - documentationLinks: An array of documentation links attached to this component set
            ///   - remote: Whether this component set is a remote component set that doesn't live in this file
            public init(
                key: Swift.String,
                name: Swift.String,
                description: Swift.String,
                documentationLinks: [Components.Schemas.DocumentationLink]? = nil,
                remote: Swift.Bool? = nil
            ) {
                self.key = key
                self.name = name
                self.description = description
                self.documentationLinks = documentationLinks
                self.remote = remote
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case description
                case documentationLinks
                case remote
            }
        }
        /// Represents a link to documentation for a component or component set.
        ///
        /// - Remark: Generated from `#/components/schemas/DocumentationLink`.
        public struct DocumentationLink: Codable, Hashable, Sendable {
            /// Should be a valid URI (e.g. https://www.figma.com).
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentationLink/uri`.
            public var uri: Swift.String
            /// Creates a new `DocumentationLink`.
            ///
            /// - Parameters:
            ///   - uri: Should be a valid URI (e.g. https://www.figma.com).
            public init(uri: Swift.String) {
                self.uri = uri
            }
            public enum CodingKeys: String, CodingKey {
                case uri
            }
        }
        /// Contains a variable alias
        ///
        /// - Remark: Generated from `#/components/schemas/VariableAlias`.
        public struct VariableAlias: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VariableAlias/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case VARIABLE_ALIAS = "VARIABLE_ALIAS"
            }
            /// - Remark: Generated from `#/components/schemas/VariableAlias/type`.
            public var _type: Components.Schemas.VariableAlias._typePayload
            /// The id of the variable that the current variable is aliased to. This variable can be a local or remote variable, and both can be retrieved via the GET /v1/files/:file_key/variables/local endpoint.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableAlias/id`.
            public var id: Swift.String
            /// Creates a new `VariableAlias`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id: The id of the variable that the current variable is aliased to. This variable can be a local or remote variable, and both can be retrieved via the GET /v1/files/:file_key/variables/local endpoint.
            public init(
                _type: Components.Schemas.VariableAlias._typePayload,
                id: Swift.String
            ) {
                self._type = _type
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
            }
        }
        /// An interaction in the Figma viewer, containing a trigger and one or more actions.
        ///
        /// - Remark: Generated from `#/components/schemas/Interaction`.
        public struct Interaction: Codable, Hashable, Sendable {
            /// The user event that initiates the interaction.
            ///
            /// - Remark: Generated from `#/components/schemas/Interaction/trigger`.
            @frozen public enum triggerPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Interaction/trigger/case1`.
                case Trigger(Components.Schemas.Trigger)
                /// - Remark: Generated from `#/components/schemas/Interaction/trigger/case2`.
                case case2(OpenAPIRuntime.OpenAPIValueContainer)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .Trigger(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .Trigger(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The user event that initiates the interaction.
            ///
            /// - Remark: Generated from `#/components/schemas/Interaction/trigger`.
            public var trigger: Components.Schemas.Interaction.triggerPayload
            /// The actions that are performed when the trigger is activated.
            ///
            /// - Remark: Generated from `#/components/schemas/Interaction/actions`.
            public var actions: [Components.Schemas.Action]?
            /// Creates a new `Interaction`.
            ///
            /// - Parameters:
            ///   - trigger: The user event that initiates the interaction.
            ///   - actions: The actions that are performed when the trigger is activated.
            public init(
                trigger: Components.Schemas.Interaction.triggerPayload,
                actions: [Components.Schemas.Action]? = nil
            ) {
                self.trigger = trigger
                self.actions = actions
            }
            public enum CodingKeys: String, CodingKey {
                case trigger
                case actions
            }
        }
        /// The `"ON_HOVER"` and `"ON_PRESS"` trigger types revert the navigation when the trigger is finished (the result is temporary). 
        /// `"MOUSE_ENTER"`, `"MOUSE_LEAVE"`, `"MOUSE_UP"` and `"MOUSE_DOWN"` are permanent, one-way navigation.
        /// The `delay` parameter requires the trigger to be held for a certain duration of time before the action occurs.
        /// Both `timeout` and `delay` values are in milliseconds.
        /// The `"ON_MEDIA_HIT"` and `"ON_MEDIA_END"` trigger types can only trigger from a video. 
        /// They fire when a video reaches a certain time or ends. The `timestamp` value is in seconds.
        ///
        /// - Remark: Generated from `#/components/schemas/Trigger`.
        @frozen public enum Trigger: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Trigger/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Trigger/case1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case ON_CLICK = "ON_CLICK"
                    case ON_HOVER = "ON_HOVER"
                    case ON_PRESS = "ON_PRESS"
                    case ON_DRAG = "ON_DRAG"
                }
                /// - Remark: Generated from `#/components/schemas/Trigger/case1/type`.
                public var _type: Components.Schemas.Trigger.Case1Payload._typePayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Components.Schemas.Trigger.Case1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/Trigger/case1`.
            case case1(Components.Schemas.Trigger.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/Trigger/case2`.
            case AfterTimeoutTrigger(Components.Schemas.AfterTimeoutTrigger)
            /// - Remark: Generated from `#/components/schemas/Trigger/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Trigger/case3/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case MOUSE_ENTER = "MOUSE_ENTER"
                    case MOUSE_LEAVE = "MOUSE_LEAVE"
                    case MOUSE_UP = "MOUSE_UP"
                    case MOUSE_DOWN = "MOUSE_DOWN"
                }
                /// - Remark: Generated from `#/components/schemas/Trigger/case3/type`.
                public var _type: Components.Schemas.Trigger.Case3Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/Trigger/case3/delay`.
                public var delay: Swift.Double
                /// Whether this is a [deprecated version](https://help.figma.com/hc/en-us/articles/360040035834-Prototype-triggers#h_01HHN04REHJNP168R26P1CMP0A) of the trigger that was left unchanged for backwards compatibility.
                /// If not present, the trigger is the latest version.
                ///
                /// - Remark: Generated from `#/components/schemas/Trigger/case3/deprecatedVersion`.
                public var deprecatedVersion: Swift.Bool?
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - delay:
                ///   - deprecatedVersion: Whether this is a [deprecated version](https://help.figma.com/hc/en-us/articles/360040035834-Prototype-triggers#h_01HHN04REHJNP168R26P1CMP0A) of the trigger that was left unchanged for backwards compatibility.
                public init(
                    _type: Components.Schemas.Trigger.Case3Payload._typePayload,
                    delay: Swift.Double,
                    deprecatedVersion: Swift.Bool? = nil
                ) {
                    self._type = _type
                    self.delay = delay
                    self.deprecatedVersion = deprecatedVersion
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case delay
                    case deprecatedVersion
                }
            }
            /// - Remark: Generated from `#/components/schemas/Trigger/case3`.
            case case3(Components.Schemas.Trigger.Case3Payload)
            /// - Remark: Generated from `#/components/schemas/Trigger/case4`.
            case OnKeyDownTrigger(Components.Schemas.OnKeyDownTrigger)
            /// - Remark: Generated from `#/components/schemas/Trigger/case5`.
            case OnMediaHitTrigger(Components.Schemas.OnMediaHitTrigger)
            /// - Remark: Generated from `#/components/schemas/Trigger/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Trigger/case6/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case ON_MEDIA_END = "ON_MEDIA_END"
                }
                /// - Remark: Generated from `#/components/schemas/Trigger/case6/type`.
                public var _type: Components.Schemas.Trigger.Case6Payload._typePayload
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Components.Schemas.Trigger.Case6Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/Trigger/case6`.
            case case6(Components.Schemas.Trigger.Case6Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .AfterTimeoutTrigger(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .OnKeyDownTrigger(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .OnMediaHitTrigger(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .AfterTimeoutTrigger(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .OnKeyDownTrigger(value):
                    try value.encode(to: encoder)
                case let .OnMediaHitTrigger(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/AfterTimeoutTrigger`.
        public struct AfterTimeoutTrigger: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AfterTimeoutTrigger/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case AFTER_TIMEOUT = "AFTER_TIMEOUT"
            }
            /// - Remark: Generated from `#/components/schemas/AfterTimeoutTrigger/type`.
            public var _type: Components.Schemas.AfterTimeoutTrigger._typePayload
            /// - Remark: Generated from `#/components/schemas/AfterTimeoutTrigger/timeout`.
            public var timeout: Swift.Double
            /// Creates a new `AfterTimeoutTrigger`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - timeout:
            public init(
                _type: Components.Schemas.AfterTimeoutTrigger._typePayload,
                timeout: Swift.Double
            ) {
                self._type = _type
                self.timeout = timeout
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case timeout
            }
        }
        /// - Remark: Generated from `#/components/schemas/OnKeyDownTrigger`.
        public struct OnKeyDownTrigger: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OnKeyDownTrigger/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ON_KEY_DOWN = "ON_KEY_DOWN"
            }
            /// - Remark: Generated from `#/components/schemas/OnKeyDownTrigger/type`.
            public var _type: Components.Schemas.OnKeyDownTrigger._typePayload
            /// - Remark: Generated from `#/components/schemas/OnKeyDownTrigger/device`.
            @frozen public enum devicePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case KEYBOARD = "KEYBOARD"
                case XBOX_ONE = "XBOX_ONE"
                case PS4 = "PS4"
                case SWITCH_PRO = "SWITCH_PRO"
                case UNKNOWN_CONTROLLER = "UNKNOWN_CONTROLLER"
            }
            /// - Remark: Generated from `#/components/schemas/OnKeyDownTrigger/device`.
            public var device: Components.Schemas.OnKeyDownTrigger.devicePayload
            /// - Remark: Generated from `#/components/schemas/OnKeyDownTrigger/keyCodes`.
            public var keyCodes: [Swift.Double]
            /// Creates a new `OnKeyDownTrigger`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - device:
            ///   - keyCodes:
            public init(
                _type: Components.Schemas.OnKeyDownTrigger._typePayload,
                device: Components.Schemas.OnKeyDownTrigger.devicePayload,
                keyCodes: [Swift.Double]
            ) {
                self._type = _type
                self.device = device
                self.keyCodes = keyCodes
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case device
                case keyCodes
            }
        }
        /// - Remark: Generated from `#/components/schemas/OnMediaHitTrigger`.
        public struct OnMediaHitTrigger: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OnMediaHitTrigger/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ON_MEDIA_HIT = "ON_MEDIA_HIT"
            }
            /// - Remark: Generated from `#/components/schemas/OnMediaHitTrigger/type`.
            public var _type: Components.Schemas.OnMediaHitTrigger._typePayload
            /// - Remark: Generated from `#/components/schemas/OnMediaHitTrigger/mediaHitTime`.
            public var mediaHitTime: Swift.Double
            /// Creates a new `OnMediaHitTrigger`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - mediaHitTime:
            public init(
                _type: Components.Schemas.OnMediaHitTrigger._typePayload,
                mediaHitTime: Swift.Double
            ) {
                self._type = _type
                self.mediaHitTime = mediaHitTime
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case mediaHitTime
            }
        }
        /// An action that is performed when a trigger is activated.
        ///
        /// - Remark: Generated from `#/components/schemas/Action`.
        @frozen public indirect enum Action: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Action/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Action/case1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case BACK = "BACK"
                    case CLOSE = "CLOSE"
                }
                /// - Remark: Generated from `#/components/schemas/Action/case1/type`.
                public var _type: Components.Schemas.Action.Case1Payload._typePayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Components.Schemas.Action.Case1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/Action/case1`.
            case case1(Components.Schemas.Action.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/Action/case2`.
            case OpenURLAction(Components.Schemas.OpenURLAction)
            /// - Remark: Generated from `#/components/schemas/Action/case3`.
            case UpdateMediaRuntimeAction(Components.Schemas.UpdateMediaRuntimeAction)
            /// - Remark: Generated from `#/components/schemas/Action/case4`.
            case SetVariableAction(Components.Schemas.SetVariableAction)
            /// - Remark: Generated from `#/components/schemas/Action/case5`.
            case SetVariableModeAction(Components.Schemas.SetVariableModeAction)
            /// - Remark: Generated from `#/components/schemas/Action/case6`.
            case ConditionalAction(Components.Schemas.ConditionalAction)
            /// - Remark: Generated from `#/components/schemas/Action/case7`.
            case NodeAction(Components.Schemas.NodeAction)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .OpenURLAction(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .UpdateMediaRuntimeAction(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .SetVariableAction(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .SetVariableModeAction(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ConditionalAction(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .NodeAction(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .OpenURLAction(value):
                    try value.encode(to: encoder)
                case let .UpdateMediaRuntimeAction(value):
                    try value.encode(to: encoder)
                case let .SetVariableAction(value):
                    try value.encode(to: encoder)
                case let .SetVariableModeAction(value):
                    try value.encode(to: encoder)
                case let .ConditionalAction(value):
                    try value.encode(to: encoder)
                case let .NodeAction(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// An action that opens a URL.
        ///
        /// - Remark: Generated from `#/components/schemas/OpenURLAction`.
        public struct OpenURLAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpenURLAction/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case URL = "URL"
            }
            /// - Remark: Generated from `#/components/schemas/OpenURLAction/type`.
            public var _type: Components.Schemas.OpenURLAction._typePayload
            /// - Remark: Generated from `#/components/schemas/OpenURLAction/url`.
            public var url: Swift.String
            /// Creates a new `OpenURLAction`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - url:
            public init(
                _type: Components.Schemas.OpenURLAction._typePayload,
                url: Swift.String
            ) {
                self._type = _type
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case url
            }
        }
        /// An action that affects a video node in the Figma viewer. For example, to play, pause, or skip.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction`.
        @frozen public enum UpdateMediaRuntimeAction: Codable, Hashable, Sendable {
            /// An action that updates the runtime of a media node by playing, pausing, toggling play/pause, 
            /// muting, unmuting, or toggling mute/unmute.
            ///
            /// The `destinationId` is the node ID of the media node to update. If `destinationId` is `null`, the action will 
            /// update the media node that contains the action.
            ///
            /// The `mediaAction` is the action to perform on the media node.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case UPDATE_MEDIA_RUNTIME = "UPDATE_MEDIA_RUNTIME"
                }
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case1/type`.
                public var _type: Components.Schemas.UpdateMediaRuntimeAction.Case1Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case1/destinationId`.
                public var destinationId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case1/mediaAction`.
                @frozen public enum mediaActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case PLAY = "PLAY"
                    case PAUSE = "PAUSE"
                    case TOGGLE_PLAY_PAUSE = "TOGGLE_PLAY_PAUSE"
                    case MUTE = "MUTE"
                    case UNMUTE = "UNMUTE"
                    case TOGGLE_MUTE_UNMUTE = "TOGGLE_MUTE_UNMUTE"
                }
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case1/mediaAction`.
                public var mediaAction: Components.Schemas.UpdateMediaRuntimeAction.Case1Payload.mediaActionPayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - destinationId:
                ///   - mediaAction:
                public init(
                    _type: Components.Schemas.UpdateMediaRuntimeAction.Case1Payload._typePayload,
                    destinationId: Swift.String? = nil,
                    mediaAction: Components.Schemas.UpdateMediaRuntimeAction.Case1Payload.mediaActionPayload
                ) {
                    self._type = _type
                    self.destinationId = destinationId
                    self.mediaAction = mediaAction
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case destinationId
                    case mediaAction
                }
            }
            /// An action that updates the runtime of a media node by playing, pausing, toggling play/pause, 
            /// muting, unmuting, or toggling mute/unmute.
            ///
            /// The `destinationId` is the node ID of the media node to update. If `destinationId` is `null`, the action will 
            /// update the media node that contains the action.
            ///
            /// The `mediaAction` is the action to perform on the media node.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case1`.
            case case1(Components.Schemas.UpdateMediaRuntimeAction.Case1Payload)
            /// An action that updates the runtime of a media node by skipping forward or backward.
            ///
            /// The `destinationId` is the node ID of the media node to update. If `destinationId` is `null`, the action will 
            /// update the media node that contains the action.
            ///
            /// The `mediaAction` is the action to perform on the media node.
            ///
            /// The `amountToSkip` is the amount of time to skip in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case2/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case UPDATE_MEDIA_RUNTIME = "UPDATE_MEDIA_RUNTIME"
                }
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case2/type`.
                public var _type: Components.Schemas.UpdateMediaRuntimeAction.Case2Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case2/destinationId`.
                public var destinationId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case2/mediaAction`.
                @frozen public enum mediaActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case SKIP_FORWARD = "SKIP_FORWARD"
                    case SKIP_BACKWARD = "SKIP_BACKWARD"
                }
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case2/mediaAction`.
                public var mediaAction: Components.Schemas.UpdateMediaRuntimeAction.Case2Payload.mediaActionPayload
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case2/amountToSkip`.
                public var amountToSkip: Swift.Double
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - destinationId:
                ///   - mediaAction:
                ///   - amountToSkip:
                public init(
                    _type: Components.Schemas.UpdateMediaRuntimeAction.Case2Payload._typePayload,
                    destinationId: Swift.String? = nil,
                    mediaAction: Components.Schemas.UpdateMediaRuntimeAction.Case2Payload.mediaActionPayload,
                    amountToSkip: Swift.Double
                ) {
                    self._type = _type
                    self.destinationId = destinationId
                    self.mediaAction = mediaAction
                    self.amountToSkip = amountToSkip
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case destinationId
                    case mediaAction
                    case amountToSkip
                }
            }
            /// An action that updates the runtime of a media node by skipping forward or backward.
            ///
            /// The `destinationId` is the node ID of the media node to update. If `destinationId` is `null`, the action will 
            /// update the media node that contains the action.
            ///
            /// The `mediaAction` is the action to perform on the media node.
            ///
            /// The `amountToSkip` is the amount of time to skip in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case2`.
            case case2(Components.Schemas.UpdateMediaRuntimeAction.Case2Payload)
            /// An action that updates the runtime of a media node by skipping to a specific time.
            ///
            /// The `destinationId` is the node ID of the media node to update. If `destinationId` is `null`, the action will 
            /// update the media node that contains the action.
            ///
            /// The `mediaAction` is the action to perform on the media node.
            ///
            /// The `newTimestamp` is the new time to skip to in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case3/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case UPDATE_MEDIA_RUNTIME = "UPDATE_MEDIA_RUNTIME"
                }
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case3/type`.
                public var _type: Components.Schemas.UpdateMediaRuntimeAction.Case3Payload._typePayload
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case3/destinationId`.
                public var destinationId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case3/mediaAction`.
                @frozen public enum mediaActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case SKIP_TO = "SKIP_TO"
                }
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case3/mediaAction`.
                public var mediaAction: Components.Schemas.UpdateMediaRuntimeAction.Case3Payload.mediaActionPayload
                /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case3/newTimestamp`.
                public var newTimestamp: Swift.Double
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - destinationId:
                ///   - mediaAction:
                ///   - newTimestamp:
                public init(
                    _type: Components.Schemas.UpdateMediaRuntimeAction.Case3Payload._typePayload,
                    destinationId: Swift.String? = nil,
                    mediaAction: Components.Schemas.UpdateMediaRuntimeAction.Case3Payload.mediaActionPayload,
                    newTimestamp: Swift.Double
                ) {
                    self._type = _type
                    self.destinationId = destinationId
                    self.mediaAction = mediaAction
                    self.newTimestamp = newTimestamp
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case destinationId
                    case mediaAction
                    case newTimestamp
                }
            }
            /// An action that updates the runtime of a media node by skipping to a specific time.
            ///
            /// The `destinationId` is the node ID of the media node to update. If `destinationId` is `null`, the action will 
            /// update the media node that contains the action.
            ///
            /// The `mediaAction` is the action to perform on the media node.
            ///
            /// The `newTimestamp` is the new time to skip to in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateMediaRuntimeAction/case3`.
            case case3(Components.Schemas.UpdateMediaRuntimeAction.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// An action that navigates to a specific node in the Figma viewer.
        ///
        /// - Remark: Generated from `#/components/schemas/NodeAction`.
        public struct NodeAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NodeAction/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case NODE = "NODE"
            }
            /// - Remark: Generated from `#/components/schemas/NodeAction/type`.
            public var _type: Components.Schemas.NodeAction._typePayload
            /// - Remark: Generated from `#/components/schemas/NodeAction/destinationId`.
            public var destinationId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NodeAction/navigation`.
            public var navigation: Components.Schemas.Navigation
            /// - Remark: Generated from `#/components/schemas/NodeAction/transition`.
            @frozen public enum transitionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NodeAction/transition/case1`.
                case Transition(Components.Schemas.Transition)
                /// - Remark: Generated from `#/components/schemas/NodeAction/transition/case2`.
                case case2(OpenAPIRuntime.OpenAPIValueContainer)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .Transition(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .Transition(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/NodeAction/transition`.
            public var transition: Components.Schemas.NodeAction.transitionPayload
            /// Whether the scroll offsets of any scrollable elements in the current screen or overlay are preserved when navigating to the destination. This is applicable only if the layout of both the current frame and its destination are the same.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeAction/preserveScrollPosition`.
            public var preserveScrollPosition: Swift.Bool?
            /// Applicable only when `navigation` is `"OVERLAY"` and the destination is a frame with `overlayPosition` equal to `"MANUAL"`. This value represents the offset by which the overlay is opened relative to this node.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeAction/overlayRelativePosition`.
            public var overlayRelativePosition: Components.Schemas.Vector?
            /// When true, all videos within the destination frame will reset their memorized playback position to 00:00 before starting to play.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeAction/resetVideoPosition`.
            public var resetVideoPosition: Swift.Bool?
            /// Whether the scroll offsets of any scrollable elements in the current screen or overlay reset when navigating to the destination. This is applicable only if the layout of both the current frame and its destination are the same.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeAction/resetScrollPosition`.
            public var resetScrollPosition: Swift.Bool?
            /// Whether the state of any interactive components in the current screen or overlay reset when navigating to the destination. This is applicable if there are interactive components in the destination frame.
            ///
            /// - Remark: Generated from `#/components/schemas/NodeAction/resetInteractiveComponents`.
            public var resetInteractiveComponents: Swift.Bool?
            /// Creates a new `NodeAction`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - destinationId:
            ///   - navigation:
            ///   - transition:
            ///   - preserveScrollPosition: Whether the scroll offsets of any scrollable elements in the current screen or overlay are preserved when navigating to the destination. This is applicable only if the layout of both the current frame and its destination are the same.
            ///   - overlayRelativePosition: Applicable only when `navigation` is `"OVERLAY"` and the destination is a frame with `overlayPosition` equal to `"MANUAL"`. This value represents the offset by which the overlay is opened relative to this node.
            ///   - resetVideoPosition: When true, all videos within the destination frame will reset their memorized playback position to 00:00 before starting to play.
            ///   - resetScrollPosition: Whether the scroll offsets of any scrollable elements in the current screen or overlay reset when navigating to the destination. This is applicable only if the layout of both the current frame and its destination are the same.
            ///   - resetInteractiveComponents: Whether the state of any interactive components in the current screen or overlay reset when navigating to the destination. This is applicable if there are interactive components in the destination frame.
            public init(
                _type: Components.Schemas.NodeAction._typePayload,
                destinationId: Swift.String? = nil,
                navigation: Components.Schemas.Navigation,
                transition: Components.Schemas.NodeAction.transitionPayload,
                preserveScrollPosition: Swift.Bool? = nil,
                overlayRelativePosition: Components.Schemas.Vector? = nil,
                resetVideoPosition: Swift.Bool? = nil,
                resetScrollPosition: Swift.Bool? = nil,
                resetInteractiveComponents: Swift.Bool? = nil
            ) {
                self._type = _type
                self.destinationId = destinationId
                self.navigation = navigation
                self.transition = transition
                self.preserveScrollPosition = preserveScrollPosition
                self.overlayRelativePosition = overlayRelativePosition
                self.resetVideoPosition = resetVideoPosition
                self.resetScrollPosition = resetScrollPosition
                self.resetInteractiveComponents = resetInteractiveComponents
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case destinationId
                case navigation
                case transition
                case preserveScrollPosition
                case overlayRelativePosition
                case resetVideoPosition
                case resetScrollPosition
                case resetInteractiveComponents
            }
        }
        /// The method of navigation. The possible values are:
        /// - `"NAVIGATE"`: Replaces the current screen with the destination, also closing all overlays.
        /// - `"OVERLAY"`: Opens the destination as an overlay on the current screen.
        /// - `"SWAP"`: On an overlay, replaces the current (topmost) overlay with the destination. On a top-level frame, 
        ///   behaves the same as `"NAVIGATE"` except that no entry is added to the navigation history.
        /// - `"SCROLL_TO"`: Scrolls to the destination on the current screen.
        /// - `"CHANGE_TO"`: Changes the closest ancestor instance of source node to the specified variant.
        ///
        /// - Remark: Generated from `#/components/schemas/Navigation`.
        @frozen public enum Navigation: String, Codable, Hashable, Sendable, CaseIterable {
            case NAVIGATE = "NAVIGATE"
            case SWAP = "SWAP"
            case OVERLAY = "OVERLAY"
            case SCROLL_TO = "SCROLL_TO"
            case CHANGE_TO = "CHANGE_TO"
        }
        /// - Remark: Generated from `#/components/schemas/Transition`.
        @frozen public enum Transition: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Transition/case1`.
            case SimpleTransition(Components.Schemas.SimpleTransition)
            /// - Remark: Generated from `#/components/schemas/Transition/case2`.
            case DirectionalTransition(Components.Schemas.DirectionalTransition)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .SimpleTransition(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .DirectionalTransition(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .SimpleTransition(value):
                    try value.encode(to: encoder)
                case let .DirectionalTransition(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Describes an animation used when navigating in a prototype.
        ///
        /// - Remark: Generated from `#/components/schemas/SimpleTransition`.
        public struct SimpleTransition: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SimpleTransition/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case DISSOLVE = "DISSOLVE"
                case SMART_ANIMATE = "SMART_ANIMATE"
                case SCROLL_ANIMATE = "SCROLL_ANIMATE"
            }
            /// - Remark: Generated from `#/components/schemas/SimpleTransition/type`.
            public var _type: Components.Schemas.SimpleTransition._typePayload
            /// The duration of the transition in milliseconds.
            ///
            /// - Remark: Generated from `#/components/schemas/SimpleTransition/duration`.
            public var duration: Swift.Double
            /// The easing curve of the transition.
            ///
            /// - Remark: Generated from `#/components/schemas/SimpleTransition/easing`.
            public var easing: Components.Schemas.Easing
            /// Creates a new `SimpleTransition`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - duration: The duration of the transition in milliseconds.
            ///   - easing: The easing curve of the transition.
            public init(
                _type: Components.Schemas.SimpleTransition._typePayload,
                duration: Swift.Double,
                easing: Components.Schemas.Easing
            ) {
                self._type = _type
                self.duration = duration
                self.easing = easing
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case duration
                case easing
            }
        }
        /// Describes an animation used when navigating in a prototype.
        ///
        /// - Remark: Generated from `#/components/schemas/DirectionalTransition`.
        public struct DirectionalTransition: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DirectionalTransition/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case MOVE_IN = "MOVE_IN"
                case MOVE_OUT = "MOVE_OUT"
                case PUSH = "PUSH"
                case SLIDE_IN = "SLIDE_IN"
                case SLIDE_OUT = "SLIDE_OUT"
            }
            /// - Remark: Generated from `#/components/schemas/DirectionalTransition/type`.
            public var _type: Components.Schemas.DirectionalTransition._typePayload
            /// - Remark: Generated from `#/components/schemas/DirectionalTransition/direction`.
            @frozen public enum directionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
                case TOP = "TOP"
                case BOTTOM = "BOTTOM"
            }
            /// - Remark: Generated from `#/components/schemas/DirectionalTransition/direction`.
            public var direction: Components.Schemas.DirectionalTransition.directionPayload
            /// The duration of the transition in milliseconds.
            ///
            /// - Remark: Generated from `#/components/schemas/DirectionalTransition/duration`.
            public var duration: Swift.Double
            /// The easing curve of the transition.
            ///
            /// - Remark: Generated from `#/components/schemas/DirectionalTransition/easing`.
            public var easing: Components.Schemas.Easing
            /// When the transition `type` is `"SMART_ANIMATE"` or when `matchLayers` is `true`, then the transition will be performed using smart animate, which attempts to match corresponding layers an interpolate other properties during the animation.
            ///
            /// - Remark: Generated from `#/components/schemas/DirectionalTransition/matchLayers`.
            public var matchLayers: Swift.Bool?
            /// Creates a new `DirectionalTransition`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - direction:
            ///   - duration: The duration of the transition in milliseconds.
            ///   - easing: The easing curve of the transition.
            ///   - matchLayers: When the transition `type` is `"SMART_ANIMATE"` or when `matchLayers` is `true`, then the transition will be performed using smart animate, which attempts to match corresponding layers an interpolate other properties during the animation.
            public init(
                _type: Components.Schemas.DirectionalTransition._typePayload,
                direction: Components.Schemas.DirectionalTransition.directionPayload,
                duration: Swift.Double,
                easing: Components.Schemas.Easing,
                matchLayers: Swift.Bool? = nil
            ) {
                self._type = _type
                self.direction = direction
                self.duration = duration
                self.easing = easing
                self.matchLayers = matchLayers
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case direction
                case duration
                case easing
                case matchLayers
            }
        }
        /// Describes an easing curve.
        ///
        /// - Remark: Generated from `#/components/schemas/Easing`.
        public struct Easing: Codable, Hashable, Sendable {
            /// The type of easing curve.
            ///
            /// - Remark: Generated from `#/components/schemas/Easing/type`.
            public var _type: Components.Schemas.EasingType
            /// A cubic bezier curve that defines the easing.
            ///
            /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionCubicBezier`.
            public struct easingFunctionCubicBezierPayload: Codable, Hashable, Sendable {
                /// The x component of the first control point.
                ///
                /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionCubicBezier/x1`.
                public var x1: Swift.Double
                /// The y component of the first control point.
                ///
                /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionCubicBezier/y1`.
                public var y1: Swift.Double
                /// The x component of the second control point.
                ///
                /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionCubicBezier/x2`.
                public var x2: Swift.Double
                /// The y component of the second control point.
                ///
                /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionCubicBezier/y2`.
                public var y2: Swift.Double
                /// Creates a new `easingFunctionCubicBezierPayload`.
                ///
                /// - Parameters:
                ///   - x1: The x component of the first control point.
                ///   - y1: The y component of the first control point.
                ///   - x2: The x component of the second control point.
                ///   - y2: The y component of the second control point.
                public init(
                    x1: Swift.Double,
                    y1: Swift.Double,
                    x2: Swift.Double,
                    y2: Swift.Double
                ) {
                    self.x1 = x1
                    self.y1 = y1
                    self.x2 = x2
                    self.y2 = y2
                }
                public enum CodingKeys: String, CodingKey {
                    case x1
                    case y1
                    case x2
                    case y2
                }
            }
            /// A cubic bezier curve that defines the easing.
            ///
            /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionCubicBezier`.
            public var easingFunctionCubicBezier: Components.Schemas.Easing.easingFunctionCubicBezierPayload?
            /// A spring function that defines the easing.
            ///
            /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionSpring`.
            public struct easingFunctionSpringPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionSpring/mass`.
                public var mass: Swift.Double
                /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionSpring/stiffness`.
                public var stiffness: Swift.Double
                /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionSpring/damping`.
                public var damping: Swift.Double
                /// Creates a new `easingFunctionSpringPayload`.
                ///
                /// - Parameters:
                ///   - mass:
                ///   - stiffness:
                ///   - damping:
                public init(
                    mass: Swift.Double,
                    stiffness: Swift.Double,
                    damping: Swift.Double
                ) {
                    self.mass = mass
                    self.stiffness = stiffness
                    self.damping = damping
                }
                public enum CodingKeys: String, CodingKey {
                    case mass
                    case stiffness
                    case damping
                }
            }
            /// A spring function that defines the easing.
            ///
            /// - Remark: Generated from `#/components/schemas/Easing/easingFunctionSpring`.
            public var easingFunctionSpring: Components.Schemas.Easing.easingFunctionSpringPayload?
            /// Creates a new `Easing`.
            ///
            /// - Parameters:
            ///   - _type: The type of easing curve.
            ///   - easingFunctionCubicBezier: A cubic bezier curve that defines the easing.
            ///   - easingFunctionSpring: A spring function that defines the easing.
            public init(
                _type: Components.Schemas.EasingType,
                easingFunctionCubicBezier: Components.Schemas.Easing.easingFunctionCubicBezierPayload? = nil,
                easingFunctionSpring: Components.Schemas.Easing.easingFunctionSpringPayload? = nil
            ) {
                self._type = _type
                self.easingFunctionCubicBezier = easingFunctionCubicBezier
                self.easingFunctionSpring = easingFunctionSpring
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case easingFunctionCubicBezier
                case easingFunctionSpring
            }
        }
        /// Sets a variable to a specific value.
        ///
        /// - Remark: Generated from `#/components/schemas/SetVariableAction`.
        public struct SetVariableAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SetVariableAction/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case SET_VARIABLE = "SET_VARIABLE"
            }
            /// - Remark: Generated from `#/components/schemas/SetVariableAction/type`.
            public var _type: Components.Schemas.SetVariableAction._typePayload
            /// - Remark: Generated from `#/components/schemas/SetVariableAction/variableId`.
            public var variableId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SetVariableAction/variableValue`.
            public var variableValue: Components.Schemas.VariableData?
            /// Creates a new `SetVariableAction`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - variableId:
            ///   - variableValue:
            public init(
                _type: Components.Schemas.SetVariableAction._typePayload,
                variableId: Swift.String? = nil,
                variableValue: Components.Schemas.VariableData? = nil
            ) {
                self._type = _type
                self.variableId = variableId
                self.variableValue = variableValue
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case variableId
                case variableValue
            }
        }
        /// Sets a variable to a specific mode.
        ///
        /// - Remark: Generated from `#/components/schemas/SetVariableModeAction`.
        public struct SetVariableModeAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SetVariableModeAction/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case SET_VARIABLE_MODE = "SET_VARIABLE_MODE"
            }
            /// - Remark: Generated from `#/components/schemas/SetVariableModeAction/type`.
            public var _type: Components.Schemas.SetVariableModeAction._typePayload
            /// - Remark: Generated from `#/components/schemas/SetVariableModeAction/variableCollectionId`.
            public var variableCollectionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SetVariableModeAction/variableModeId`.
            public var variableModeId: Swift.String?
            /// Creates a new `SetVariableModeAction`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - variableCollectionId:
            ///   - variableModeId:
            public init(
                _type: Components.Schemas.SetVariableModeAction._typePayload,
                variableCollectionId: Swift.String? = nil,
                variableModeId: Swift.String? = nil
            ) {
                self._type = _type
                self.variableCollectionId = variableCollectionId
                self.variableModeId = variableModeId
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case variableCollectionId
                case variableModeId
            }
        }
        /// Checks if a condition is met before performing certain actions by using an if/else conditional statement.
        ///
        /// - Remark: Generated from `#/components/schemas/ConditionalAction`.
        public struct ConditionalAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConditionalAction/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case CONDITIONAL = "CONDITIONAL"
            }
            /// - Remark: Generated from `#/components/schemas/ConditionalAction/type`.
            public var _type: Components.Schemas.ConditionalAction._typePayload
            /// - Remark: Generated from `#/components/schemas/ConditionalAction/conditionalBlocks`.
            public var conditionalBlocks: [Components.Schemas.ConditionalBlock]
            /// Creates a new `ConditionalAction`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - conditionalBlocks:
            public init(
                _type: Components.Schemas.ConditionalAction._typePayload,
                conditionalBlocks: [Components.Schemas.ConditionalBlock]
            ) {
                self._type = _type
                self.conditionalBlocks = conditionalBlocks
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case conditionalBlocks
            }
        }
        /// A value to set a variable to during prototyping.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableData`.
        public struct VariableData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VariableData/type`.
            public var _type: Components.Schemas.VariableDataType? {
                get  {
                    storage.value._type
                }
                _modify {
                    yield &storage.value._type
                }
            }
            /// - Remark: Generated from `#/components/schemas/VariableData/resolvedType`.
            public var resolvedType: Components.Schemas.VariableResolvedDataType? {
                get  {
                    storage.value.resolvedType
                }
                _modify {
                    yield &storage.value.resolvedType
                }
            }
            /// - Remark: Generated from `#/components/schemas/VariableData/value`.
            @frozen public enum valuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/VariableData/value/case1`.
                case case1(Swift.Bool)
                /// - Remark: Generated from `#/components/schemas/VariableData/value/case2`.
                case case2(Swift.Double)
                /// - Remark: Generated from `#/components/schemas/VariableData/value/case3`.
                case case3(Swift.String)
                /// - Remark: Generated from `#/components/schemas/VariableData/value/case4`.
                case RGB(Components.Schemas.RGB)
                /// - Remark: Generated from `#/components/schemas/VariableData/value/case5`.
                case RGBA(Components.Schemas.RGBA)
                /// - Remark: Generated from `#/components/schemas/VariableData/value/case6`.
                case VariableAlias(Components.Schemas.VariableAlias)
                /// - Remark: Generated from `#/components/schemas/VariableData/value/case7`.
                case Expression(Components.Schemas.Expression)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case3(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .RGB(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .RGBA(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .VariableAlias(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .Expression(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case3(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .RGB(value):
                        try value.encode(to: encoder)
                    case let .RGBA(value):
                        try value.encode(to: encoder)
                    case let .VariableAlias(value):
                        try value.encode(to: encoder)
                    case let .Expression(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/VariableData/value`.
            public var value: Components.Schemas.VariableData.valuePayload? {
                get  {
                    storage.value.value
                }
                _modify {
                    yield &storage.value.value
                }
            }
            /// Creates a new `VariableData`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - resolvedType:
            ///   - value:
            public init(
                _type: Components.Schemas.VariableDataType? = nil,
                resolvedType: Components.Schemas.VariableResolvedDataType? = nil,
                value: Components.Schemas.VariableData.valuePayload? = nil
            ) {
                storage = .init(value: .init(
                    _type: _type,
                    resolvedType: resolvedType,
                    value: value
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case resolvedType
                case value
            }
            public init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/VariableData/type`.
                var _type: Components.Schemas.VariableDataType?
                /// - Remark: Generated from `#/components/schemas/VariableData/resolvedType`.
                var resolvedType: Components.Schemas.VariableResolvedDataType?
                /// - Remark: Generated from `#/components/schemas/VariableData/value`.
                enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/VariableData/value/case1`.
                    case case1(Swift.Bool)
                    /// - Remark: Generated from `#/components/schemas/VariableData/value/case2`.
                    case case2(Swift.Double)
                    /// - Remark: Generated from `#/components/schemas/VariableData/value/case3`.
                    case case3(Swift.String)
                    /// - Remark: Generated from `#/components/schemas/VariableData/value/case4`.
                    case RGB(Components.Schemas.RGB)
                    /// - Remark: Generated from `#/components/schemas/VariableData/value/case5`.
                    case RGBA(Components.Schemas.RGBA)
                    /// - Remark: Generated from `#/components/schemas/VariableData/value/case6`.
                    case VariableAlias(Components.Schemas.VariableAlias)
                    /// - Remark: Generated from `#/components/schemas/VariableData/value/case7`.
                    case Expression(Components.Schemas.Expression)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .RGB(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .RGBA(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .VariableAlias(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .Expression(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .RGB(value):
                            try value.encode(to: encoder)
                        case let .RGBA(value):
                            try value.encode(to: encoder)
                        case let .VariableAlias(value):
                            try value.encode(to: encoder)
                        case let .Expression(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/VariableData/value`.
                var value: Components.Schemas.VariableData.valuePayload?
                init(
                    _type: Components.Schemas.VariableDataType? = nil,
                    resolvedType: Components.Schemas.VariableResolvedDataType? = nil,
                    value: Components.Schemas.VariableData.valuePayload? = nil
                ) {
                    self._type = _type
                    self.resolvedType = resolvedType
                    self.value = value
                }
                typealias CodingKeys = Components.Schemas.VariableData.CodingKeys
            }
        }
        /// Defines the types of data a VariableData object can hold
        ///
        /// - Remark: Generated from `#/components/schemas/VariableDataType`.
        @frozen public enum VariableDataType: String, Codable, Hashable, Sendable, CaseIterable {
            case BOOLEAN = "BOOLEAN"
            case FLOAT = "FLOAT"
            case STRING = "STRING"
            case COLOR = "COLOR"
            case VARIABLE_ALIAS = "VARIABLE_ALIAS"
            case EXPRESSION = "EXPRESSION"
        }
        /// Defines the types of data a VariableData object can eventually equal
        ///
        /// - Remark: Generated from `#/components/schemas/VariableResolvedDataType`.
        @frozen public enum VariableResolvedDataType: String, Codable, Hashable, Sendable, CaseIterable {
            case BOOLEAN = "BOOLEAN"
            case FLOAT = "FLOAT"
            case STRING = "STRING"
            case COLOR = "COLOR"
        }
        /// Defines the [Expression](https://help.figma.com/hc/en-us/articles/15253194385943) object, which contains a list of `VariableData` objects strung together by operators (`ExpressionFunction`).
        ///
        /// - Remark: Generated from `#/components/schemas/Expression`.
        public struct Expression: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Expression/expressionFunction`.
            public var expressionFunction: Components.Schemas.ExpressionFunction
            /// - Remark: Generated from `#/components/schemas/Expression/expressionArguments`.
            public var expressionArguments: [Components.Schemas.VariableData]
            /// Creates a new `Expression`.
            ///
            /// - Parameters:
            ///   - expressionFunction:
            ///   - expressionArguments:
            public init(
                expressionFunction: Components.Schemas.ExpressionFunction,
                expressionArguments: [Components.Schemas.VariableData]
            ) {
                self.expressionFunction = expressionFunction
                self.expressionArguments = expressionArguments
            }
            public enum CodingKeys: String, CodingKey {
                case expressionFunction
                case expressionArguments
            }
        }
        /// Defines the list of operators available to use in an Expression.
        ///
        /// - Remark: Generated from `#/components/schemas/ExpressionFunction`.
        @frozen public enum ExpressionFunction: String, Codable, Hashable, Sendable, CaseIterable {
            case ADDITION = "ADDITION"
            case SUBTRACTION = "SUBTRACTION"
            case MULTIPLICATION = "MULTIPLICATION"
            case DIVISION = "DIVISION"
            case EQUALS = "EQUALS"
            case NOT_EQUAL = "NOT_EQUAL"
            case LESS_THAN = "LESS_THAN"
            case LESS_THAN_OR_EQUAL = "LESS_THAN_OR_EQUAL"
            case GREATER_THAN = "GREATER_THAN"
            case GREATER_THAN_OR_EQUAL = "GREATER_THAN_OR_EQUAL"
            case AND = "AND"
            case OR = "OR"
            case VAR_MODE_LOOKUP = "VAR_MODE_LOOKUP"
            case NEGATE = "NEGATE"
            case NOT = "NOT"
        }
        /// Either the if or else conditional blocks. The if block contains a condition to check. If that condition is met then it will run those list of actions, else it will run the actions in the else block.
        ///
        /// - Remark: Generated from `#/components/schemas/ConditionalBlock`.
        public struct ConditionalBlock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConditionalBlock/condition`.
            public var condition: Components.Schemas.VariableData?
            /// - Remark: Generated from `#/components/schemas/ConditionalBlock/actions`.
            public var actions: [Components.Schemas.Action]
            /// Creates a new `ConditionalBlock`.
            ///
            /// - Parameters:
            ///   - condition:
            ///   - actions:
            public init(
                condition: Components.Schemas.VariableData? = nil,
                actions: [Components.Schemas.Action]
            ) {
                self.condition = condition
                self.actions = actions
            }
            public enum CodingKeys: String, CodingKey {
                case condition
                case actions
            }
        }
        /// Position of a comment relative to the frame to which it is attached.
        ///
        /// - Remark: Generated from `#/components/schemas/FrameOffset`.
        public struct FrameOffset: Codable, Hashable, Sendable {
            /// Unique id specifying the frame.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameOffset/node_id`.
            public var node_id: Swift.String
            /// 2D vector offset within the frame from the top-left corner.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameOffset/node_offset`.
            public var node_offset: Components.Schemas.Vector
            /// Creates a new `FrameOffset`.
            ///
            /// - Parameters:
            ///   - node_id: Unique id specifying the frame.
            ///   - node_offset: 2D vector offset within the frame from the top-left corner.
            public init(
                node_id: Swift.String,
                node_offset: Components.Schemas.Vector
            ) {
                self.node_id = node_id
                self.node_offset = node_offset
            }
            public enum CodingKeys: String, CodingKey {
                case node_id
                case node_offset
            }
        }
        /// Position of a region comment on the canvas.
        ///
        /// - Remark: Generated from `#/components/schemas/Region`.
        public struct Region: Codable, Hashable, Sendable {
            /// X coordinate of the position.
            ///
            /// - Remark: Generated from `#/components/schemas/Region/x`.
            public var x: Swift.Double
            /// Y coordinate of the position.
            ///
            /// - Remark: Generated from `#/components/schemas/Region/y`.
            public var y: Swift.Double
            /// The height of the comment region. Must be greater than 0.
            ///
            /// - Remark: Generated from `#/components/schemas/Region/region_height`.
            public var region_height: Swift.Double
            /// The width of the comment region. Must be greater than 0.
            ///
            /// - Remark: Generated from `#/components/schemas/Region/region_width`.
            public var region_width: Swift.Double
            /// The corner of the comment region to pin to the node's corner as a string enum.
            ///
            /// - Remark: Generated from `#/components/schemas/Region/comment_pin_corner`.
            @frozen public enum comment_pin_cornerPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case top_hyphen_left = "top-left"
                case top_hyphen_right = "top-right"
                case bottom_hyphen_left = "bottom-left"
                case bottom_hyphen_right = "bottom-right"
            }
            /// The corner of the comment region to pin to the node's corner as a string enum.
            ///
            /// - Remark: Generated from `#/components/schemas/Region/comment_pin_corner`.
            public var comment_pin_corner: Components.Schemas.Region.comment_pin_cornerPayload?
            /// Creates a new `Region`.
            ///
            /// - Parameters:
            ///   - x: X coordinate of the position.
            ///   - y: Y coordinate of the position.
            ///   - region_height: The height of the comment region. Must be greater than 0.
            ///   - region_width: The width of the comment region. Must be greater than 0.
            ///   - comment_pin_corner: The corner of the comment region to pin to the node's corner as a string enum.
            public init(
                x: Swift.Double,
                y: Swift.Double,
                region_height: Swift.Double,
                region_width: Swift.Double,
                comment_pin_corner: Components.Schemas.Region.comment_pin_cornerPayload? = nil
            ) {
                self.x = x
                self.y = y
                self.region_height = region_height
                self.region_width = region_width
                self.comment_pin_corner = comment_pin_corner
            }
            public enum CodingKeys: String, CodingKey {
                case x
                case y
                case region_height
                case region_width
                case comment_pin_corner
            }
        }
        /// Position of a region comment relative to the frame to which it is attached.
        ///
        /// - Remark: Generated from `#/components/schemas/FrameOffsetRegion`.
        public struct FrameOffsetRegion: Codable, Hashable, Sendable {
            /// Unique id specifying the frame.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameOffsetRegion/node_id`.
            public var node_id: Swift.String
            /// 2D vector offset within the frame from the top-left corner.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameOffsetRegion/node_offset`.
            public var node_offset: Components.Schemas.Vector
            /// The height of the comment region. Must be greater than 0.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameOffsetRegion/region_height`.
            public var region_height: Swift.Double
            /// The width of the comment region. Must be greater than 0.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameOffsetRegion/region_width`.
            public var region_width: Swift.Double
            /// The corner of the comment region to pin to the node's corner as a string enum.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameOffsetRegion/comment_pin_corner`.
            @frozen public enum comment_pin_cornerPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case top_hyphen_left = "top-left"
                case top_hyphen_right = "top-right"
                case bottom_hyphen_left = "bottom-left"
                case bottom_hyphen_right = "bottom-right"
            }
            /// The corner of the comment region to pin to the node's corner as a string enum.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameOffsetRegion/comment_pin_corner`.
            public var comment_pin_corner: Components.Schemas.FrameOffsetRegion.comment_pin_cornerPayload?
            /// Creates a new `FrameOffsetRegion`.
            ///
            /// - Parameters:
            ///   - node_id: Unique id specifying the frame.
            ///   - node_offset: 2D vector offset within the frame from the top-left corner.
            ///   - region_height: The height of the comment region. Must be greater than 0.
            ///   - region_width: The width of the comment region. Must be greater than 0.
            ///   - comment_pin_corner: The corner of the comment region to pin to the node's corner as a string enum.
            public init(
                node_id: Swift.String,
                node_offset: Components.Schemas.Vector,
                region_height: Swift.Double,
                region_width: Swift.Double,
                comment_pin_corner: Components.Schemas.FrameOffsetRegion.comment_pin_cornerPayload? = nil
            ) {
                self.node_id = node_id
                self.node_offset = node_offset
                self.region_height = region_height
                self.region_width = region_width
                self.comment_pin_corner = comment_pin_corner
            }
            public enum CodingKeys: String, CodingKey {
                case node_id
                case node_offset
                case region_height
                case region_width
                case comment_pin_corner
            }
        }
        /// A comment or reply left by a user.
        ///
        /// - Remark: Generated from `#/components/schemas/Comment`.
        public struct Comment: Codable, Hashable, Sendable {
            /// Unique identifier for comment.
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/id`.
            public var id: Swift.String
            /// Positioning information of the comment. Includes information on the location of the comment pin, which is either the absolute coordinates on the canvas or a relative offset within a frame. If the comment is a region, it will also contain the region height, width, and position of the anchor in regards to the region.
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/client_meta`.
            @frozen public enum client_metaPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Comment/client_meta/case1`.
                case Vector(Components.Schemas.Vector)
                /// - Remark: Generated from `#/components/schemas/Comment/client_meta/case2`.
                case FrameOffset(Components.Schemas.FrameOffset)
                /// - Remark: Generated from `#/components/schemas/Comment/client_meta/case3`.
                case Region(Components.Schemas.Region)
                /// - Remark: Generated from `#/components/schemas/Comment/client_meta/case4`.
                case FrameOffsetRegion(Components.Schemas.FrameOffsetRegion)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .Vector(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .FrameOffset(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .Region(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .FrameOffsetRegion(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .Vector(value):
                        try value.encode(to: encoder)
                    case let .FrameOffset(value):
                        try value.encode(to: encoder)
                    case let .Region(value):
                        try value.encode(to: encoder)
                    case let .FrameOffsetRegion(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Positioning information of the comment. Includes information on the location of the comment pin, which is either the absolute coordinates on the canvas or a relative offset within a frame. If the comment is a region, it will also contain the region height, width, and position of the anchor in regards to the region.
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/client_meta`.
            public var client_meta: Components.Schemas.Comment.client_metaPayload
            /// The file in which the comment lives
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/file_key`.
            public var file_key: Swift.String
            /// If present, the id of the comment to which this is the reply
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/parent_id`.
            public var parent_id: Swift.String?
            /// The user who left the comment
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/user`.
            public var user: Components.Schemas.User
            /// The UTC ISO 8601 time at which the comment was left
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/created_at`.
            public var created_at: Foundation.Date
            /// If set, the UTC ISO 8601 time the comment was resolved
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/resolved_at`.
            public var resolved_at: Foundation.Date?
            /// The content of the comment
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/message`.
            public var message: Swift.String
            /// Only set for top level comments. The number displayed with the comment in the UI
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/order_id`.
            public var order_id: Swift.String?
            /// An array of reactions to the comment
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/reactions`.
            public var reactions: [Components.Schemas.Reaction]
            /// Creates a new `Comment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for comment.
            ///   - client_meta: Positioning information of the comment. Includes information on the location of the comment pin, which is either the absolute coordinates on the canvas or a relative offset within a frame. If the comment is a region, it will also contain the region height, width, and position of the anchor in regards to the region.
            ///   - file_key: The file in which the comment lives
            ///   - parent_id: If present, the id of the comment to which this is the reply
            ///   - user: The user who left the comment
            ///   - created_at: The UTC ISO 8601 time at which the comment was left
            ///   - resolved_at: If set, the UTC ISO 8601 time the comment was resolved
            ///   - message: The content of the comment
            ///   - order_id: Only set for top level comments. The number displayed with the comment in the UI
            ///   - reactions: An array of reactions to the comment
            public init(
                id: Swift.String,
                client_meta: Components.Schemas.Comment.client_metaPayload,
                file_key: Swift.String,
                parent_id: Swift.String? = nil,
                user: Components.Schemas.User,
                created_at: Foundation.Date,
                resolved_at: Foundation.Date? = nil,
                message: Swift.String,
                order_id: Swift.String? = nil,
                reactions: [Components.Schemas.Reaction]
            ) {
                self.id = id
                self.client_meta = client_meta
                self.file_key = file_key
                self.parent_id = parent_id
                self.user = user
                self.created_at = created_at
                self.resolved_at = resolved_at
                self.message = message
                self.order_id = order_id
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case client_meta
                case file_key
                case parent_id
                case user
                case created_at
                case resolved_at
                case message
                case order_id
                case reactions
            }
        }
        /// A reaction left by a user.
        ///
        /// - Remark: Generated from `#/components/schemas/Reaction`.
        public struct Reaction: Codable, Hashable, Sendable {
            /// The user who left the reaction.
            ///
            /// - Remark: Generated from `#/components/schemas/Reaction/user`.
            public var user: Components.Schemas.User
            /// - Remark: Generated from `#/components/schemas/Reaction/emoji`.
            public var emoji: Components.Schemas.Emoji
            /// The UTC ISO 8601 time at which the reaction was left.
            ///
            /// - Remark: Generated from `#/components/schemas/Reaction/created_at`.
            public var created_at: Foundation.Date
            /// Creates a new `Reaction`.
            ///
            /// - Parameters:
            ///   - user: The user who left the reaction.
            ///   - emoji:
            ///   - created_at: The UTC ISO 8601 time at which the reaction was left.
            public init(
                user: Components.Schemas.User,
                emoji: Components.Schemas.Emoji,
                created_at: Foundation.Date
            ) {
                self.user = user
                self.emoji = emoji
                self.created_at = created_at
            }
            public enum CodingKeys: String, CodingKey {
                case user
                case emoji
                case created_at
            }
        }
        /// The emoji type of reaction as shortcode (e.g. `:heart:`, `:+1::skin-tone-2:`). The list of accepted emoji shortcodes can be found in [this file](https://raw.githubusercontent.com/missive/emoji-mart/main/packages/emoji-mart-data/sets/14/native.json) under the top-level emojis and aliases fields, with optional skin tone modifiers when applicable.
        ///
        /// - Remark: Generated from `#/components/schemas/Emoji`.
        public typealias Emoji = Swift.String
        /// A description of a user.
        ///
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Hashable, Sendable {
            /// Unique stable id of the user.
            ///
            /// - Remark: Generated from `#/components/schemas/User/id`.
            public var id: Swift.String
            /// Name of the user.
            ///
            /// - Remark: Generated from `#/components/schemas/User/handle`.
            public var handle: Swift.String
            /// URL link to the user's profile image.
            ///
            /// - Remark: Generated from `#/components/schemas/User/img_url`.
            public var img_url: Swift.String
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - id: Unique stable id of the user.
            ///   - handle: Name of the user.
            ///   - img_url: URL link to the user's profile image.
            public init(
                id: Swift.String,
                handle: Swift.String,
                img_url: Swift.String
            ) {
                self.id = id
                self.handle = handle
                self.img_url = img_url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case handle
                case img_url
            }
        }
        /// Data on the frame a component resides in.
        ///
        /// - Remark: Generated from `#/components/schemas/FrameInfo`.
        public struct FrameInfo: Codable, Hashable, Sendable {
            /// The ID of the frame node within the file.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameInfo/nodeId`.
            public var nodeId: Swift.String?
            /// The name of the frame node.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameInfo/name`.
            public var name: Swift.String?
            /// The background color of the frame node.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameInfo/backgroundColor`.
            public var backgroundColor: Swift.String?
            /// The ID of the page containing the frame node.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameInfo/pageId`.
            public var pageId: Swift.String
            /// The name of the page containing the frame node.
            ///
            /// - Remark: Generated from `#/components/schemas/FrameInfo/pageName`.
            public var pageName: Swift.String
            /// Creates a new `FrameInfo`.
            ///
            /// - Parameters:
            ///   - nodeId: The ID of the frame node within the file.
            ///   - name: The name of the frame node.
            ///   - backgroundColor: The background color of the frame node.
            ///   - pageId: The ID of the page containing the frame node.
            ///   - pageName: The name of the page containing the frame node.
            public init(
                nodeId: Swift.String? = nil,
                name: Swift.String? = nil,
                backgroundColor: Swift.String? = nil,
                pageId: Swift.String,
                pageName: Swift.String
            ) {
                self.nodeId = nodeId
                self.name = name
                self.backgroundColor = backgroundColor
                self.pageId = pageId
                self.pageName = pageName
            }
            public enum CodingKeys: String, CodingKey {
                case nodeId
                case name
                case backgroundColor
                case pageId
                case pageName
            }
        }
        /// An arrangement of published UI elements that can be instantiated across figma files.
        ///
        /// - Remark: Generated from `#/components/schemas/PublishedComponent`.
        public struct PublishedComponent: Codable, Hashable, Sendable {
            /// The unique identifier for the component.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponent/key`.
            public var key: Swift.String
            /// The unique identifier of the Figma file that contains the component.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponent/file_key`.
            public var file_key: Swift.String
            /// The unique identifier of the component node within the Figma file.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponent/node_id`.
            public var node_id: Swift.String
            /// A URL to a thumbnail image of the component.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponent/thumbnail_url`.
            public var thumbnail_url: Swift.String?
            /// The name of the component.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponent/name`.
            public var name: Swift.String
            /// The description of the component as entered by the publisher.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponent/description`.
            public var description: Swift.String
            /// The UTC ISO 8601 time when the component was created.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponent/created_at`.
            public var created_at: Foundation.Date
            /// The UTC ISO 8601 time when the component was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponent/updated_at`.
            public var updated_at: Foundation.Date
            /// The user who last updated the component.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponent/user`.
            public var user: Components.Schemas.User
            /// The containing frame of the component.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponent/containing_frame`.
            public var containing_frame: Components.Schemas.FrameInfo?
            /// Creates a new `PublishedComponent`.
            ///
            /// - Parameters:
            ///   - key: The unique identifier for the component.
            ///   - file_key: The unique identifier of the Figma file that contains the component.
            ///   - node_id: The unique identifier of the component node within the Figma file.
            ///   - thumbnail_url: A URL to a thumbnail image of the component.
            ///   - name: The name of the component.
            ///   - description: The description of the component as entered by the publisher.
            ///   - created_at: The UTC ISO 8601 time when the component was created.
            ///   - updated_at: The UTC ISO 8601 time when the component was last updated.
            ///   - user: The user who last updated the component.
            ///   - containing_frame: The containing frame of the component.
            public init(
                key: Swift.String,
                file_key: Swift.String,
                node_id: Swift.String,
                thumbnail_url: Swift.String? = nil,
                name: Swift.String,
                description: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                user: Components.Schemas.User,
                containing_frame: Components.Schemas.FrameInfo? = nil
            ) {
                self.key = key
                self.file_key = file_key
                self.node_id = node_id
                self.thumbnail_url = thumbnail_url
                self.name = name
                self.description = description
                self.created_at = created_at
                self.updated_at = updated_at
                self.user = user
                self.containing_frame = containing_frame
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case file_key
                case node_id
                case thumbnail_url
                case name
                case description
                case created_at
                case updated_at
                case user
                case containing_frame
            }
        }
        /// A node containing a set of variants of a component.
        ///
        /// - Remark: Generated from `#/components/schemas/PublishedComponentSet`.
        public struct PublishedComponentSet: Codable, Hashable, Sendable {
            /// The unique identifier for the component set.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponentSet/key`.
            public var key: Swift.String
            /// The unique identifier of the Figma file that contains the component set.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponentSet/file_key`.
            public var file_key: Swift.String
            /// The unique identifier of the component set node within the Figma file.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponentSet/node_id`.
            public var node_id: Swift.String
            /// A URL to a thumbnail image of the component set.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponentSet/thumbnail_url`.
            public var thumbnail_url: Swift.String?
            /// The name of the component set.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponentSet/name`.
            public var name: Swift.String
            /// The description of the component set as entered by the publisher.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponentSet/description`.
            public var description: Swift.String
            /// The UTC ISO 8601 time when the component set was created.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponentSet/created_at`.
            public var created_at: Foundation.Date
            /// The UTC ISO 8601 time when the component set was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponentSet/updated_at`.
            public var updated_at: Foundation.Date
            /// The user who last updated the component set.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponentSet/user`.
            public var user: Components.Schemas.User
            /// The containing frame of the component set.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedComponentSet/containing_frame`.
            public var containing_frame: Components.Schemas.FrameInfo?
            /// Creates a new `PublishedComponentSet`.
            ///
            /// - Parameters:
            ///   - key: The unique identifier for the component set.
            ///   - file_key: The unique identifier of the Figma file that contains the component set.
            ///   - node_id: The unique identifier of the component set node within the Figma file.
            ///   - thumbnail_url: A URL to a thumbnail image of the component set.
            ///   - name: The name of the component set.
            ///   - description: The description of the component set as entered by the publisher.
            ///   - created_at: The UTC ISO 8601 time when the component set was created.
            ///   - updated_at: The UTC ISO 8601 time when the component set was last updated.
            ///   - user: The user who last updated the component set.
            ///   - containing_frame: The containing frame of the component set.
            public init(
                key: Swift.String,
                file_key: Swift.String,
                node_id: Swift.String,
                thumbnail_url: Swift.String? = nil,
                name: Swift.String,
                description: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                user: Components.Schemas.User,
                containing_frame: Components.Schemas.FrameInfo? = nil
            ) {
                self.key = key
                self.file_key = file_key
                self.node_id = node_id
                self.thumbnail_url = thumbnail_url
                self.name = name
                self.description = description
                self.created_at = created_at
                self.updated_at = updated_at
                self.user = user
                self.containing_frame = containing_frame
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case file_key
                case node_id
                case thumbnail_url
                case name
                case description
                case created_at
                case updated_at
                case user
                case containing_frame
            }
        }
        /// The type of style
        ///
        /// - Remark: Generated from `#/components/schemas/StyleType`.
        @frozen public enum StyleType: String, Codable, Hashable, Sendable, CaseIterable {
            case FILL = "FILL"
            case TEXT = "TEXT"
            case EFFECT = "EFFECT"
            case GRID = "GRID"
        }
        /// A set of published properties that can be applied to nodes.
        ///
        /// - Remark: Generated from `#/components/schemas/PublishedStyle`.
        public struct PublishedStyle: Codable, Hashable, Sendable {
            /// The unique identifier for the style
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/key`.
            public var key: Swift.String
            /// The unique identifier of the Figma file that contains the style.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/file_key`.
            public var file_key: Swift.String
            /// ID of the style node within the figma file
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/style_type`.
            public var style_type: Components.Schemas.StyleType
            /// A URL to a thumbnail image of the style.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/thumbnail_url`.
            public var thumbnail_url: Swift.String?
            /// The name of the style.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/name`.
            public var name: Swift.String
            /// The description of the style as entered by the publisher.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/description`.
            public var description: Swift.String
            /// The UTC ISO 8601 time when the style was created.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/created_at`.
            public var created_at: Foundation.Date
            /// The UTC ISO 8601 time when the style was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/updated_at`.
            public var updated_at: Foundation.Date
            /// The user who last updated the style.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/user`.
            public var user: Components.Schemas.User
            /// A user specified order number by which the style can be sorted.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedStyle/sort_position`.
            public var sort_position: Swift.String
            /// Creates a new `PublishedStyle`.
            ///
            /// - Parameters:
            ///   - key: The unique identifier for the style
            ///   - file_key: The unique identifier of the Figma file that contains the style.
            ///   - node_id: ID of the style node within the figma file
            ///   - style_type:
            ///   - thumbnail_url: A URL to a thumbnail image of the style.
            ///   - name: The name of the style.
            ///   - description: The description of the style as entered by the publisher.
            ///   - created_at: The UTC ISO 8601 time when the style was created.
            ///   - updated_at: The UTC ISO 8601 time when the style was last updated.
            ///   - user: The user who last updated the style.
            ///   - sort_position: A user specified order number by which the style can be sorted.
            public init(
                key: Swift.String,
                file_key: Swift.String,
                node_id: Swift.String,
                style_type: Components.Schemas.StyleType,
                thumbnail_url: Swift.String? = nil,
                name: Swift.String,
                description: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                user: Components.Schemas.User,
                sort_position: Swift.String
            ) {
                self.key = key
                self.file_key = file_key
                self.node_id = node_id
                self.style_type = style_type
                self.thumbnail_url = thumbnail_url
                self.name = name
                self.description = description
                self.created_at = created_at
                self.updated_at = updated_at
                self.user = user
                self.sort_position = sort_position
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case file_key
                case node_id
                case style_type
                case thumbnail_url
                case name
                case description
                case created_at
                case updated_at
                case user
                case sort_position
            }
        }
        /// A Project can be identified by both the Project name, and the Project ID.
        ///
        /// - Remark: Generated from `#/components/schemas/Project`.
        public struct Project: Codable, Hashable, Sendable {
            /// The ID of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/id`.
            public var id: Swift.String
            /// The name of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/name`.
            public var name: Swift.String
            /// Creates a new `Project`.
            ///
            /// - Parameters:
            ///   - id: The ID of the project.
            ///   - name: The name of the project.
            public init(
                id: Swift.String,
                name: Swift.String
            ) {
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
            }
        }
        /// A version of a file
        ///
        /// - Remark: Generated from `#/components/schemas/Version`.
        public struct Version: Codable, Hashable, Sendable {
            /// Unique identifier for version
            ///
            /// - Remark: Generated from `#/components/schemas/Version/id`.
            public var id: Swift.String
            /// The UTC ISO 8601 time at which the version was created
            ///
            /// - Remark: Generated from `#/components/schemas/Version/created_at`.
            public var created_at: Foundation.Date
            /// The label given to the version in the editor
            ///
            /// - Remark: Generated from `#/components/schemas/Version/label`.
            public var label: Swift.String?
            /// The description of the version as entered in the editor
            ///
            /// - Remark: Generated from `#/components/schemas/Version/description`.
            public var description: Swift.String?
            /// The user that created the version
            ///
            /// - Remark: Generated from `#/components/schemas/Version/user`.
            public var user: Components.Schemas.User
            /// A URL to a thumbnail image of the file version.
            ///
            /// - Remark: Generated from `#/components/schemas/Version/thumbnail_url`.
            public var thumbnail_url: Swift.String?
            /// Creates a new `Version`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for version
            ///   - created_at: The UTC ISO 8601 time at which the version was created
            ///   - label: The label given to the version in the editor
            ///   - description: The description of the version as entered in the editor
            ///   - user: The user that created the version
            ///   - thumbnail_url: A URL to a thumbnail image of the file version.
            public init(
                id: Swift.String,
                created_at: Foundation.Date,
                label: Swift.String? = nil,
                description: Swift.String? = nil,
                user: Components.Schemas.User,
                thumbnail_url: Swift.String? = nil
            ) {
                self.id = id
                self.created_at = created_at
                self.label = label
                self.description = description
                self.user = user
                self.thumbnail_url = thumbnail_url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created_at
                case label
                case description
                case user
                case thumbnail_url
            }
        }
        /// A description of an HTTP webhook (from Figma back to your application)
        ///
        /// - Remark: Generated from `#/components/schemas/WebhookV2`.
        public struct WebhookV2: Codable, Hashable, Sendable {
            /// The ID of the webhook
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2/id`.
            public var id: Swift.String
            /// The event this webhook triggers on
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2/event_type`.
            public var event_type: Components.Schemas.WebhookV2Event
            /// The team id you are subscribed to for updates
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2/team_id`.
            public var team_id: Swift.String
            /// The current status of the webhook
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2/status`.
            public var status: Components.Schemas.WebhookV2Status
            /// The client ID of the OAuth application that registered this webhook, if any
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2/client_id`.
            public var client_id: Swift.String?
            /// The passcode that will be passed back to the webhook endpoint
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2/passcode`.
            public var passcode: Swift.String
            /// The endpoint that will be hit when the webhook is triggered
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2/endpoint`.
            public var endpoint: Swift.String
            /// Optional user-provided description or name for the webhook. This is provided to help make maintaining a number of webhooks more convenient. Max length 140 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2/description`.
            public var description: Swift.String?
            /// Creates a new `WebhookV2`.
            ///
            /// - Parameters:
            ///   - id: The ID of the webhook
            ///   - event_type: The event this webhook triggers on
            ///   - team_id: The team id you are subscribed to for updates
            ///   - status: The current status of the webhook
            ///   - client_id: The client ID of the OAuth application that registered this webhook, if any
            ///   - passcode: The passcode that will be passed back to the webhook endpoint
            ///   - endpoint: The endpoint that will be hit when the webhook is triggered
            ///   - description: Optional user-provided description or name for the webhook. This is provided to help make maintaining a number of webhooks more convenient. Max length 140 characters.
            public init(
                id: Swift.String,
                event_type: Components.Schemas.WebhookV2Event,
                team_id: Swift.String,
                status: Components.Schemas.WebhookV2Status,
                client_id: Swift.String? = nil,
                passcode: Swift.String,
                endpoint: Swift.String,
                description: Swift.String? = nil
            ) {
                self.id = id
                self.event_type = event_type
                self.team_id = team_id
                self.status = status
                self.client_id = client_id
                self.passcode = passcode
                self.endpoint = endpoint
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case event_type
                case team_id
                case status
                case client_id
                case passcode
                case endpoint
                case description
            }
        }
        /// An enum representing the possible events that a webhook can subscribe to
        ///
        /// - Remark: Generated from `#/components/schemas/WebhookV2Event`.
        @frozen public enum WebhookV2Event: String, Codable, Hashable, Sendable, CaseIterable {
            case PING = "PING"
            case FILE_UPDATE = "FILE_UPDATE"
            case FILE_VERSION_UPDATE = "FILE_VERSION_UPDATE"
            case FILE_DELETE = "FILE_DELETE"
            case LIBRARY_PUBLISH = "LIBRARY_PUBLISH"
            case FILE_COMMENT = "FILE_COMMENT"
        }
        /// An enum representing the possible statuses you can set a webhook to:
        /// - `ACTIVE`: The webhook is healthy and receive all events
        /// - `PAUSED`: The webhook is paused and will not receive any events
        ///
        /// - Remark: Generated from `#/components/schemas/WebhookV2Status`.
        @frozen public enum WebhookV2Status: String, Codable, Hashable, Sendable, CaseIterable {
            case ACTIVE = "ACTIVE"
            case PAUSED = "PAUSED"
        }
        /// Information regarding the most recent interactions sent to a webhook endpoint
        ///
        /// - Remark: Generated from `#/components/schemas/WebhookV2Request`.
        public struct WebhookV2Request: Codable, Hashable, Sendable {
            /// The ID of the webhook the requests were sent to
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2Request/webhook_id`.
            public var webhook_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/WebhookV2Request/request_info`.
            public var request_info: Components.Schemas.WebhookV2RequestInfo
            /// - Remark: Generated from `#/components/schemas/WebhookV2Request/response_info`.
            public var response_info: Components.Schemas.WebhookV2ResponseInfo?
            /// Error message for this request. NULL if no error occurred
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2Request/error_msg`.
            public var error_msg: Swift.String?
            /// Creates a new `WebhookV2Request`.
            ///
            /// - Parameters:
            ///   - webhook_id: The ID of the webhook the requests were sent to
            ///   - request_info:
            ///   - response_info:
            ///   - error_msg: Error message for this request. NULL if no error occurred
            public init(
                webhook_id: Swift.String,
                request_info: Components.Schemas.WebhookV2RequestInfo,
                response_info: Components.Schemas.WebhookV2ResponseInfo? = nil,
                error_msg: Swift.String? = nil
            ) {
                self.webhook_id = webhook_id
                self.request_info = request_info
                self.response_info = response_info
                self.error_msg = error_msg
            }
            public enum CodingKeys: String, CodingKey {
                case webhook_id
                case request_info
                case response_info
                case error_msg
            }
        }
        /// Information regarding the request sent to a webhook endpoint
        ///
        /// - Remark: Generated from `#/components/schemas/WebhookV2RequestInfo`.
        public struct WebhookV2RequestInfo: Codable, Hashable, Sendable {
            /// The ID of the webhook
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2RequestInfo/id`.
            public var id: Swift.String
            /// The actual endpoint the request was sent to
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2RequestInfo/endpoint`.
            public var endpoint: Swift.String
            /// The contents of the request that was sent to the endpoint
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2RequestInfo/payload`.
            public var payload: OpenAPIRuntime.OpenAPIObjectContainer
            /// UTC ISO 8601 timestamp of when the request was sent
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2RequestInfo/sent_at`.
            public var sent_at: Foundation.Date
            /// Creates a new `WebhookV2RequestInfo`.
            ///
            /// - Parameters:
            ///   - id: The ID of the webhook
            ///   - endpoint: The actual endpoint the request was sent to
            ///   - payload: The contents of the request that was sent to the endpoint
            ///   - sent_at: UTC ISO 8601 timestamp of when the request was sent
            public init(
                id: Swift.String,
                endpoint: Swift.String,
                payload: OpenAPIRuntime.OpenAPIObjectContainer,
                sent_at: Foundation.Date
            ) {
                self.id = id
                self.endpoint = endpoint
                self.payload = payload
                self.sent_at = sent_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case endpoint
                case payload
                case sent_at
            }
        }
        /// Information regarding the reply sent back from a webhook endpoint
        ///
        /// - Remark: Generated from `#/components/schemas/WebhookV2ResponseInfo`.
        public struct WebhookV2ResponseInfo: Codable, Hashable, Sendable {
            /// HTTP status code of the response
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2ResponseInfo/status`.
            public var status: Swift.String
            /// UTC ISO 8601 timestamp of when the response was received
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookV2ResponseInfo/received_at`.
            public var received_at: Foundation.Date
            /// Creates a new `WebhookV2ResponseInfo`.
            ///
            /// - Parameters:
            ///   - status: HTTP status code of the response
            ///   - received_at: UTC ISO 8601 timestamp of when the response was received
            public init(
                status: Swift.String,
                received_at: Foundation.Date
            ) {
                self.status = status
                self.received_at = received_at
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case received_at
            }
        }
        /// An object representing the library item information in the payload of the `LIBRARY_PUBLISH` event
        ///
        /// - Remark: Generated from `#/components/schemas/LibraryItemData`.
        public struct LibraryItemData: Codable, Hashable, Sendable {
            /// Unique identifier for the library item
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryItemData/key`.
            public var key: Swift.String
            /// Name of the library item
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryItemData/name`.
            public var name: Swift.String
            /// Creates a new `LibraryItemData`.
            ///
            /// - Parameters:
            ///   - key: Unique identifier for the library item
            ///   - name: Name of the library item
            public init(
                key: Swift.String,
                name: Swift.String
            ) {
                self.key = key
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
            }
        }
        /// An object representing a fragment of a comment left by a user, used in the payload of the `FILE_COMMENT` event. Note only ONE of the fields below will be set
        ///
        /// - Remark: Generated from `#/components/schemas/CommentFragment`.
        public struct CommentFragment: Codable, Hashable, Sendable {
            /// Comment text that is set if a fragment is text based
            ///
            /// - Remark: Generated from `#/components/schemas/CommentFragment/text`.
            public var text: Swift.String?
            /// User id that is set if a fragment refers to a user mention
            ///
            /// - Remark: Generated from `#/components/schemas/CommentFragment/mention`.
            public var mention: Swift.String?
            /// Creates a new `CommentFragment`.
            ///
            /// - Parameters:
            ///   - text: Comment text that is set if a fragment is text based
            ///   - mention: User id that is set if a fragment refers to a user mention
            public init(
                text: Swift.String? = nil,
                mention: Swift.String? = nil
            ) {
                self.text = text
                self.mention = mention
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case mention
            }
        }
        /// - Remark: Generated from `#/components/schemas/WebhookBasePayload`.
        public struct WebhookBasePayload: Codable, Hashable, Sendable {
            /// The passcode specified when the webhook was created, should match what was initially provided
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookBasePayload/passcode`.
            public var passcode: Swift.String
            /// UTC ISO 8601 timestamp of when the event was triggered.
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookBasePayload/timestamp`.
            public var timestamp: Foundation.Date
            /// The id of the webhook that caused the callback
            ///
            /// - Remark: Generated from `#/components/schemas/WebhookBasePayload/webhook_id`.
            public var webhook_id: Swift.String
            /// Creates a new `WebhookBasePayload`.
            ///
            /// - Parameters:
            ///   - passcode: The passcode specified when the webhook was created, should match what was initially provided
            ///   - timestamp: UTC ISO 8601 timestamp of when the event was triggered.
            ///   - webhook_id: The id of the webhook that caused the callback
            public init(
                passcode: Swift.String,
                timestamp: Foundation.Date,
                webhook_id: Swift.String
            ) {
                self.passcode = passcode
                self.timestamp = timestamp
                self.webhook_id = webhook_id
            }
            public enum CodingKeys: String, CodingKey {
                case passcode
                case timestamp
                case webhook_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/WebhookPingPayload`.
        public struct WebhookPingPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WebhookPingPayload/value1`.
            public var value1: Components.Schemas.WebhookBasePayload
            /// - Remark: Generated from `#/components/schemas/WebhookPingPayload/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/WebhookPingPayload/value2/event_type`.
                @frozen public enum event_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case PING = "PING"
                }
                /// - Remark: Generated from `#/components/schemas/WebhookPingPayload/value2/event_type`.
                public var event_type: Components.Schemas.WebhookPingPayload.Value2Payload.event_typePayload
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - event_type:
                public init(event_type: Components.Schemas.WebhookPingPayload.Value2Payload.event_typePayload) {
                    self.event_type = event_type
                }
                public enum CodingKeys: String, CodingKey {
                    case event_type
                }
            }
            /// - Remark: Generated from `#/components/schemas/WebhookPingPayload/value2`.
            public var value2: Components.Schemas.WebhookPingPayload.Value2Payload
            /// Creates a new `WebhookPingPayload`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.WebhookBasePayload,
                value2: Components.Schemas.WebhookPingPayload.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/WebhookFileUpdatePayload`.
        public struct WebhookFileUpdatePayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WebhookFileUpdatePayload/value1`.
            public var value1: Components.Schemas.WebhookBasePayload
            /// - Remark: Generated from `#/components/schemas/WebhookFileUpdatePayload/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/WebhookFileUpdatePayload/value2/event_type`.
                @frozen public enum event_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case FILE_UPDATE = "FILE_UPDATE"
                }
                /// - Remark: Generated from `#/components/schemas/WebhookFileUpdatePayload/value2/event_type`.
                public var event_type: Components.Schemas.WebhookFileUpdatePayload.Value2Payload.event_typePayload
                /// The key of the file that was updated
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileUpdatePayload/value2/file_key`.
                public var file_key: Swift.String
                /// The name of the file that was updated
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileUpdatePayload/value2/file_name`.
                public var file_name: Swift.String
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - event_type:
                ///   - file_key: The key of the file that was updated
                ///   - file_name: The name of the file that was updated
                public init(
                    event_type: Components.Schemas.WebhookFileUpdatePayload.Value2Payload.event_typePayload,
                    file_key: Swift.String,
                    file_name: Swift.String
                ) {
                    self.event_type = event_type
                    self.file_key = file_key
                    self.file_name = file_name
                }
                public enum CodingKeys: String, CodingKey {
                    case event_type
                    case file_key
                    case file_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/WebhookFileUpdatePayload/value2`.
            public var value2: Components.Schemas.WebhookFileUpdatePayload.Value2Payload
            /// Creates a new `WebhookFileUpdatePayload`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.WebhookBasePayload,
                value2: Components.Schemas.WebhookFileUpdatePayload.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/WebhookFileDeletePayload`.
        public struct WebhookFileDeletePayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WebhookFileDeletePayload/value1`.
            public var value1: Components.Schemas.WebhookBasePayload
            /// - Remark: Generated from `#/components/schemas/WebhookFileDeletePayload/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/WebhookFileDeletePayload/value2/event_type`.
                @frozen public enum event_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case FILE_DELETE = "FILE_DELETE"
                }
                /// - Remark: Generated from `#/components/schemas/WebhookFileDeletePayload/value2/event_type`.
                public var event_type: Components.Schemas.WebhookFileDeletePayload.Value2Payload.event_typePayload
                /// The key of the file that was deleted
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileDeletePayload/value2/file_key`.
                public var file_key: Swift.String
                /// The name of the file that was deleted
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileDeletePayload/value2/file_name`.
                public var file_name: Swift.String
                /// The user that deleted the file and triggered this event
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileDeletePayload/value2/triggered_by`.
                public var triggered_by: Components.Schemas.User
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - event_type:
                ///   - file_key: The key of the file that was deleted
                ///   - file_name: The name of the file that was deleted
                ///   - triggered_by: The user that deleted the file and triggered this event
                public init(
                    event_type: Components.Schemas.WebhookFileDeletePayload.Value2Payload.event_typePayload,
                    file_key: Swift.String,
                    file_name: Swift.String,
                    triggered_by: Components.Schemas.User
                ) {
                    self.event_type = event_type
                    self.file_key = file_key
                    self.file_name = file_name
                    self.triggered_by = triggered_by
                }
                public enum CodingKeys: String, CodingKey {
                    case event_type
                    case file_key
                    case file_name
                    case triggered_by
                }
            }
            /// - Remark: Generated from `#/components/schemas/WebhookFileDeletePayload/value2`.
            public var value2: Components.Schemas.WebhookFileDeletePayload.Value2Payload
            /// Creates a new `WebhookFileDeletePayload`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.WebhookBasePayload,
                value2: Components.Schemas.WebhookFileDeletePayload.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload`.
        public struct WebhookFileVersionUpdatePayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value1`.
            public var value1: Components.Schemas.WebhookBasePayload
            /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value2/event_type`.
                @frozen public enum event_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case FILE_VERSION_UPDATE = "FILE_VERSION_UPDATE"
                }
                /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value2/event_type`.
                public var event_type: Components.Schemas.WebhookFileVersionUpdatePayload.Value2Payload.event_typePayload
                /// UTC ISO 8601 timestamp of when the version was created
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value2/created_at`.
                public var created_at: Foundation.Date
                /// Description of the version in the version history
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value2/description`.
                public var description: Swift.String?
                /// The key of the file that was updated
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value2/file_key`.
                public var file_key: Swift.String
                /// The name of the file that was updated
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value2/file_name`.
                public var file_name: Swift.String
                /// The user that created the named version and triggered this event
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value2/triggered_by`.
                public var triggered_by: Components.Schemas.User
                /// ID of the published version
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value2/version_id`.
                public var version_id: Swift.String
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - event_type:
                ///   - created_at: UTC ISO 8601 timestamp of when the version was created
                ///   - description: Description of the version in the version history
                ///   - file_key: The key of the file that was updated
                ///   - file_name: The name of the file that was updated
                ///   - triggered_by: The user that created the named version and triggered this event
                ///   - version_id: ID of the published version
                public init(
                    event_type: Components.Schemas.WebhookFileVersionUpdatePayload.Value2Payload.event_typePayload,
                    created_at: Foundation.Date,
                    description: Swift.String? = nil,
                    file_key: Swift.String,
                    file_name: Swift.String,
                    triggered_by: Components.Schemas.User,
                    version_id: Swift.String
                ) {
                    self.event_type = event_type
                    self.created_at = created_at
                    self.description = description
                    self.file_key = file_key
                    self.file_name = file_name
                    self.triggered_by = triggered_by
                    self.version_id = version_id
                }
                public enum CodingKeys: String, CodingKey {
                    case event_type
                    case created_at
                    case description
                    case file_key
                    case file_name
                    case triggered_by
                    case version_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/WebhookFileVersionUpdatePayload/value2`.
            public var value2: Components.Schemas.WebhookFileVersionUpdatePayload.Value2Payload
            /// Creates a new `WebhookFileVersionUpdatePayload`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.WebhookBasePayload,
                value2: Components.Schemas.WebhookFileVersionUpdatePayload.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload`.
        public struct WebhookLibraryPublishPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value1`.
            public var value1: Components.Schemas.WebhookBasePayload
            /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/event_type`.
                @frozen public enum event_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case LIBRARY_PUBLISH = "LIBRARY_PUBLISH"
                }
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/event_type`.
                public var event_type: Components.Schemas.WebhookLibraryPublishPayload.Value2Payload.event_typePayload
                /// Components that were created by the library publish
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/created_components`.
                public var created_components: [Components.Schemas.LibraryItemData]
                /// Styles that were created by the library publish
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/created_styles`.
                public var created_styles: [Components.Schemas.LibraryItemData]
                /// Variables that were created by the library publish
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/created_variables`.
                public var created_variables: [Components.Schemas.LibraryItemData]
                /// Components that were modified by the library publish
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/modified_components`.
                public var modified_components: [Components.Schemas.LibraryItemData]
                /// Styles that were modified by the library publish
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/modified_styles`.
                public var modified_styles: [Components.Schemas.LibraryItemData]
                /// Variables that were modified by the library publish
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/modified_variables`.
                public var modified_variables: [Components.Schemas.LibraryItemData]
                /// Components that were deleted by the library publish
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/deleted_components`.
                public var deleted_components: [Components.Schemas.LibraryItemData]
                /// Styles that were deleted by the library publish
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/deleted_styles`.
                public var deleted_styles: [Components.Schemas.LibraryItemData]
                /// Variables that were deleted by the library publish
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/deleted_variables`.
                public var deleted_variables: [Components.Schemas.LibraryItemData]
                /// Description of the library publish
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/description`.
                public var description: Swift.String?
                /// The key of the file that was published
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/file_key`.
                public var file_key: Swift.String
                /// The name of the file that was published
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/file_name`.
                public var file_name: Swift.String
                /// The library item that was published
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/library_item`.
                public var library_item: Components.Schemas.LibraryItemData
                /// The user that published the library and triggered this event
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2/triggered_by`.
                public var triggered_by: Components.Schemas.User
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - event_type:
                ///   - created_components: Components that were created by the library publish
                ///   - created_styles: Styles that were created by the library publish
                ///   - created_variables: Variables that were created by the library publish
                ///   - modified_components: Components that were modified by the library publish
                ///   - modified_styles: Styles that were modified by the library publish
                ///   - modified_variables: Variables that were modified by the library publish
                ///   - deleted_components: Components that were deleted by the library publish
                ///   - deleted_styles: Styles that were deleted by the library publish
                ///   - deleted_variables: Variables that were deleted by the library publish
                ///   - description: Description of the library publish
                ///   - file_key: The key of the file that was published
                ///   - file_name: The name of the file that was published
                ///   - library_item: The library item that was published
                ///   - triggered_by: The user that published the library and triggered this event
                public init(
                    event_type: Components.Schemas.WebhookLibraryPublishPayload.Value2Payload.event_typePayload,
                    created_components: [Components.Schemas.LibraryItemData],
                    created_styles: [Components.Schemas.LibraryItemData],
                    created_variables: [Components.Schemas.LibraryItemData],
                    modified_components: [Components.Schemas.LibraryItemData],
                    modified_styles: [Components.Schemas.LibraryItemData],
                    modified_variables: [Components.Schemas.LibraryItemData],
                    deleted_components: [Components.Schemas.LibraryItemData],
                    deleted_styles: [Components.Schemas.LibraryItemData],
                    deleted_variables: [Components.Schemas.LibraryItemData],
                    description: Swift.String? = nil,
                    file_key: Swift.String,
                    file_name: Swift.String,
                    library_item: Components.Schemas.LibraryItemData,
                    triggered_by: Components.Schemas.User
                ) {
                    self.event_type = event_type
                    self.created_components = created_components
                    self.created_styles = created_styles
                    self.created_variables = created_variables
                    self.modified_components = modified_components
                    self.modified_styles = modified_styles
                    self.modified_variables = modified_variables
                    self.deleted_components = deleted_components
                    self.deleted_styles = deleted_styles
                    self.deleted_variables = deleted_variables
                    self.description = description
                    self.file_key = file_key
                    self.file_name = file_name
                    self.library_item = library_item
                    self.triggered_by = triggered_by
                }
                public enum CodingKeys: String, CodingKey {
                    case event_type
                    case created_components
                    case created_styles
                    case created_variables
                    case modified_components
                    case modified_styles
                    case modified_variables
                    case deleted_components
                    case deleted_styles
                    case deleted_variables
                    case description
                    case file_key
                    case file_name
                    case library_item
                    case triggered_by
                }
            }
            /// - Remark: Generated from `#/components/schemas/WebhookLibraryPublishPayload/value2`.
            public var value2: Components.Schemas.WebhookLibraryPublishPayload.Value2Payload
            /// Creates a new `WebhookLibraryPublishPayload`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.WebhookBasePayload,
                value2: Components.Schemas.WebhookLibraryPublishPayload.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload`.
        public struct WebhookFileCommentPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value1`.
            public var value1: Components.Schemas.WebhookBasePayload
            /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2/event_type`.
                @frozen public enum event_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case FILE_COMMENT = "FILE_COMMENT"
                }
                /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2/event_type`.
                public var event_type: Components.Schemas.WebhookFileCommentPayload.Value2Payload.event_typePayload
                /// Contents of the comment itself
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2/comment`.
                public var comment: [Components.Schemas.CommentFragment]
                /// Unique identifier for comment
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2/comment_id`.
                public var comment_id: Swift.String
                /// The UTC ISO 8601 time at which the comment was left
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2/created_at`.
                public var created_at: Foundation.Date
                /// The key of the file that was commented on
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2/file_key`.
                public var file_key: Swift.String
                /// The name of the file that was commented on
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2/file_name`.
                public var file_name: Swift.String
                /// Users that were mentioned in the comment
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2/mentions`.
                public var mentions: [Components.Schemas.User]?
                /// The user that made the comment and triggered this event
                ///
                /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2/triggered_by`.
                public var triggered_by: Components.Schemas.User
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - event_type:
                ///   - comment: Contents of the comment itself
                ///   - comment_id: Unique identifier for comment
                ///   - created_at: The UTC ISO 8601 time at which the comment was left
                ///   - file_key: The key of the file that was commented on
                ///   - file_name: The name of the file that was commented on
                ///   - mentions: Users that were mentioned in the comment
                ///   - triggered_by: The user that made the comment and triggered this event
                public init(
                    event_type: Components.Schemas.WebhookFileCommentPayload.Value2Payload.event_typePayload,
                    comment: [Components.Schemas.CommentFragment],
                    comment_id: Swift.String,
                    created_at: Foundation.Date,
                    file_key: Swift.String,
                    file_name: Swift.String,
                    mentions: [Components.Schemas.User]? = nil,
                    triggered_by: Components.Schemas.User
                ) {
                    self.event_type = event_type
                    self.comment = comment
                    self.comment_id = comment_id
                    self.created_at = created_at
                    self.file_key = file_key
                    self.file_name = file_name
                    self.mentions = mentions
                    self.triggered_by = triggered_by
                }
                public enum CodingKeys: String, CodingKey {
                    case event_type
                    case comment
                    case comment_id
                    case created_at
                    case file_key
                    case file_name
                    case mentions
                    case triggered_by
                }
            }
            /// - Remark: Generated from `#/components/schemas/WebhookFileCommentPayload/value2`.
            public var value2: Components.Schemas.WebhookFileCommentPayload.Value2Payload
            /// Creates a new `WebhookFileCommentPayload`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.WebhookBasePayload,
                value2: Components.Schemas.WebhookFileCommentPayload.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// A Figma user
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityLogUserEntity`.
        public struct ActivityLogUserEntity: Codable, Hashable, Sendable {
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogUserEntity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case user = "user"
            }
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogUserEntity/type`.
            public var _type: Components.Schemas.ActivityLogUserEntity._typePayload
            /// Unique stable id of the user.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogUserEntity/id`.
            public var id: Swift.String
            /// Name of the user.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogUserEntity/name`.
            public var name: Swift.String
            /// Email associated with the user's account.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogUserEntity/email`.
            public var email: Swift.String
            /// Creates a new `ActivityLogUserEntity`.
            ///
            /// - Parameters:
            ///   - _type: The type of entity.
            ///   - id: Unique stable id of the user.
            ///   - name: Name of the user.
            ///   - email: Email associated with the user's account.
            public init(
                _type: Components.Schemas.ActivityLogUserEntity._typePayload,
                id: Swift.String,
                name: Swift.String,
                email: Swift.String
            ) {
                self._type = _type
                self.id = id
                self.name = name
                self.email = email
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case name
                case email
            }
        }
        /// A Figma Design or FigJam file
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity`.
        public struct ActivityLogFileEntity: Codable, Hashable, Sendable {
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case file = "file"
            }
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity/type`.
            public var _type: Components.Schemas.ActivityLogFileEntity._typePayload
            /// Unique identifier of the file.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity/key`.
            public var key: Swift.String
            /// Name of the file.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity/name`.
            public var name: Swift.String
            /// Indicates if the object is a file on Figma Design or FigJam.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity/editor_type`.
            @frozen public enum editor_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case figma = "figma"
                case figjam = "figjam"
            }
            /// Indicates if the object is a file on Figma Design or FigJam.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity/editor_type`.
            public var editor_type: Components.Schemas.ActivityLogFileEntity.editor_typePayload
            /// Access policy for users who have the link to the file.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity/link_access`.
            @frozen public enum link_accessPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case view = "view"
                case edit = "edit"
                case org_view = "org_view"
                case org_edit = "org_edit"
                case inherit = "inherit"
            }
            /// Access policy for users who have the link to the file.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity/link_access`.
            public var link_access: Components.Schemas.ActivityLogFileEntity.link_accessPayload
            /// Access policy for users who have the link to the file's prototype.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity/proto_link_access`.
            @frozen public enum proto_link_accessPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case view = "view"
                case org_view = "org_view"
                case inherit = "inherit"
            }
            /// Access policy for users who have the link to the file's prototype.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileEntity/proto_link_access`.
            public var proto_link_access: Components.Schemas.ActivityLogFileEntity.proto_link_accessPayload
            /// Creates a new `ActivityLogFileEntity`.
            ///
            /// - Parameters:
            ///   - _type: The type of entity.
            ///   - key: Unique identifier of the file.
            ///   - name: Name of the file.
            ///   - editor_type: Indicates if the object is a file on Figma Design or FigJam.
            ///   - link_access: Access policy for users who have the link to the file.
            ///   - proto_link_access: Access policy for users who have the link to the file's prototype.
            public init(
                _type: Components.Schemas.ActivityLogFileEntity._typePayload,
                key: Swift.String,
                name: Swift.String,
                editor_type: Components.Schemas.ActivityLogFileEntity.editor_typePayload,
                link_access: Components.Schemas.ActivityLogFileEntity.link_accessPayload,
                proto_link_access: Components.Schemas.ActivityLogFileEntity.proto_link_accessPayload
            ) {
                self._type = _type
                self.key = key
                self.name = name
                self.editor_type = editor_type
                self.link_access = link_access
                self.proto_link_access = proto_link_access
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case key
                case name
                case editor_type
                case link_access
                case proto_link_access
            }
        }
        /// A file branch that diverges from and can be merged back into the main file
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityLogFileRepoEntity`.
        public struct ActivityLogFileRepoEntity: Codable, Hashable, Sendable {
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileRepoEntity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case file_repo = "file_repo"
            }
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileRepoEntity/type`.
            public var _type: Components.Schemas.ActivityLogFileRepoEntity._typePayload
            /// Unique identifier of the file branch.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileRepoEntity/id`.
            public var id: Swift.String
            /// Name of the file.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileRepoEntity/name`.
            public var name: Swift.String
            /// Key of the main file.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogFileRepoEntity/main_file_key`.
            public var main_file_key: Swift.String
            /// Creates a new `ActivityLogFileRepoEntity`.
            ///
            /// - Parameters:
            ///   - _type: The type of entity.
            ///   - id: Unique identifier of the file branch.
            ///   - name: Name of the file.
            ///   - main_file_key: Key of the main file.
            public init(
                _type: Components.Schemas.ActivityLogFileRepoEntity._typePayload,
                id: Swift.String,
                name: Swift.String,
                main_file_key: Swift.String
            ) {
                self._type = _type
                self.id = id
                self.name = name
                self.main_file_key = main_file_key
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case name
                case main_file_key
            }
        }
        /// A project that a collection of Figma files are grouped under
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityLogProjectEntity`.
        public struct ActivityLogProjectEntity: Codable, Hashable, Sendable {
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogProjectEntity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case project = "project"
            }
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogProjectEntity/type`.
            public var _type: Components.Schemas.ActivityLogProjectEntity._typePayload
            /// Unique identifier of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogProjectEntity/id`.
            public var id: Swift.String
            /// Name of the project.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogProjectEntity/name`.
            public var name: Swift.String
            /// Creates a new `ActivityLogProjectEntity`.
            ///
            /// - Parameters:
            ///   - _type: The type of entity.
            ///   - id: Unique identifier of the project.
            ///   - name: Name of the project.
            public init(
                _type: Components.Schemas.ActivityLogProjectEntity._typePayload,
                id: Swift.String,
                name: Swift.String
            ) {
                self._type = _type
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case name
            }
        }
        /// A Figma team that contains multiple users and projects
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityLogTeamEntity`.
        public struct ActivityLogTeamEntity: Codable, Hashable, Sendable {
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogTeamEntity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case team = "team"
            }
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogTeamEntity/type`.
            public var _type: Components.Schemas.ActivityLogTeamEntity._typePayload
            /// Unique identifier of the team.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogTeamEntity/id`.
            public var id: Swift.String
            /// Name of the team.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogTeamEntity/name`.
            public var name: Swift.String
            /// Creates a new `ActivityLogTeamEntity`.
            ///
            /// - Parameters:
            ///   - _type: The type of entity.
            ///   - id: Unique identifier of the team.
            ///   - name: Name of the team.
            public init(
                _type: Components.Schemas.ActivityLogTeamEntity._typePayload,
                id: Swift.String,
                name: Swift.String
            ) {
                self._type = _type
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case name
            }
        }
        /// Part of the organizational hierarchy of managing files and users within Figma, only available on the Enterprise Plan
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityLogWorkspaceEntity`.
        public struct ActivityLogWorkspaceEntity: Codable, Hashable, Sendable {
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogWorkspaceEntity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case workspace = "workspace"
            }
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogWorkspaceEntity/type`.
            public var _type: Components.Schemas.ActivityLogWorkspaceEntity._typePayload
            /// Unique identifier of the workspace.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogWorkspaceEntity/id`.
            public var id: Swift.String
            /// Name of the workspace.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogWorkspaceEntity/name`.
            public var name: Swift.String
            /// Creates a new `ActivityLogWorkspaceEntity`.
            ///
            /// - Parameters:
            ///   - _type: The type of entity.
            ///   - id: Unique identifier of the workspace.
            ///   - name: Name of the workspace.
            public init(
                _type: Components.Schemas.ActivityLogWorkspaceEntity._typePayload,
                id: Swift.String,
                name: Swift.String
            ) {
                self._type = _type
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case name
            }
        }
        /// A Figma organization
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityLogOrgEntity`.
        public struct ActivityLogOrgEntity: Codable, Hashable, Sendable {
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogOrgEntity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case org = "org"
            }
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogOrgEntity/type`.
            public var _type: Components.Schemas.ActivityLogOrgEntity._typePayload
            /// Unique identifier of the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogOrgEntity/id`.
            public var id: Swift.String
            /// Name of the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogOrgEntity/name`.
            public var name: Swift.String
            /// Creates a new `ActivityLogOrgEntity`.
            ///
            /// - Parameters:
            ///   - _type: The type of entity.
            ///   - id: Unique identifier of the organization.
            ///   - name: Name of the organization.
            public init(
                _type: Components.Schemas.ActivityLogOrgEntity._typePayload,
                id: Swift.String,
                name: Swift.String
            ) {
                self._type = _type
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case name
            }
        }
        /// A Figma plugin
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityLogPluginEntity`.
        public struct ActivityLogPluginEntity: Codable, Hashable, Sendable {
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogPluginEntity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case plugin = "plugin"
            }
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogPluginEntity/type`.
            public var _type: Components.Schemas.ActivityLogPluginEntity._typePayload
            /// Unique identifier of the plugin.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogPluginEntity/id`.
            public var id: Swift.String
            /// Name of the plugin.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogPluginEntity/name`.
            public var name: Swift.String
            /// Indicates if the object is a plugin is available on Figma Design or FigJam.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogPluginEntity/editor_type`.
            @frozen public enum editor_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case figma = "figma"
                case figjam = "figjam"
            }
            /// Indicates if the object is a plugin is available on Figma Design or FigJam.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogPluginEntity/editor_type`.
            public var editor_type: Components.Schemas.ActivityLogPluginEntity.editor_typePayload
            /// Creates a new `ActivityLogPluginEntity`.
            ///
            /// - Parameters:
            ///   - _type: The type of entity.
            ///   - id: Unique identifier of the plugin.
            ///   - name: Name of the plugin.
            ///   - editor_type: Indicates if the object is a plugin is available on Figma Design or FigJam.
            public init(
                _type: Components.Schemas.ActivityLogPluginEntity._typePayload,
                id: Swift.String,
                name: Swift.String,
                editor_type: Components.Schemas.ActivityLogPluginEntity.editor_typePayload
            ) {
                self._type = _type
                self.id = id
                self.name = name
                self.editor_type = editor_type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case name
                case editor_type
            }
        }
        /// A Figma widget
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityLogWidgetEntity`.
        public struct ActivityLogWidgetEntity: Codable, Hashable, Sendable {
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogWidgetEntity/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case widget = "widget"
            }
            /// The type of entity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogWidgetEntity/type`.
            public var _type: Components.Schemas.ActivityLogWidgetEntity._typePayload
            /// Unique identifier of the widget.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogWidgetEntity/id`.
            public var id: Swift.String
            /// Name of the widget.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogWidgetEntity/name`.
            public var name: Swift.String
            /// Indicates if the object is a widget available on Figma Design or FigJam.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogWidgetEntity/editor_type`.
            @frozen public enum editor_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case figma = "figma"
                case figjam = "figjam"
            }
            /// Indicates if the object is a widget available on Figma Design or FigJam.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLogWidgetEntity/editor_type`.
            public var editor_type: Components.Schemas.ActivityLogWidgetEntity.editor_typePayload
            /// Creates a new `ActivityLogWidgetEntity`.
            ///
            /// - Parameters:
            ///   - _type: The type of entity.
            ///   - id: Unique identifier of the widget.
            ///   - name: Name of the widget.
            ///   - editor_type: Indicates if the object is a widget available on Figma Design or FigJam.
            public init(
                _type: Components.Schemas.ActivityLogWidgetEntity._typePayload,
                id: Swift.String,
                name: Swift.String,
                editor_type: Components.Schemas.ActivityLogWidgetEntity.editor_typePayload
            ) {
                self._type = _type
                self.id = id
                self.name = name
                self.editor_type = editor_type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case name
                case editor_type
            }
        }
        /// An event returned by the Activity Logs API.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityLog`.
        public struct ActivityLog: Codable, Hashable, Sendable {
            /// The ID of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLog/id`.
            public var id: Swift.String
            /// The timestamp of the event in seconds since the Unix epoch.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLog/timestamp`.
            public var timestamp: Swift.Double
            /// The user who performed the action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLog/actor`.
            public struct actorPayload: Codable, Hashable, Sendable {
                /// The type of the user.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/actor/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case user = "user"
                }
                /// The type of the user.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/actor/type`.
                public var _type: Components.Schemas.ActivityLog.actorPayload._typePayload?
                /// The ID of the user.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/actor/id`.
                public var id: Swift.String?
                /// The name of the user. For SCIM events, the value is "SCIM Provider". For official support actions, the value is "Figma Support".
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/actor/name`.
                public var name: Swift.String
                /// The email of the user.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/actor/email`.
                public var email: Swift.String?
                /// Creates a new `actorPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of the user.
                ///   - id: The ID of the user.
                ///   - name: The name of the user. For SCIM events, the value is "SCIM Provider". For official support actions, the value is "Figma Support".
                ///   - email: The email of the user.
                public init(
                    _type: Components.Schemas.ActivityLog.actorPayload._typePayload? = nil,
                    id: Swift.String? = nil,
                    name: Swift.String,
                    email: Swift.String? = nil
                ) {
                    self._type = _type
                    self.id = id
                    self.name = name
                    self.email = email
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case id
                    case name
                    case email
                }
            }
            /// The user who performed the action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLog/actor`.
            public var actor: Components.Schemas.ActivityLog.actorPayload?
            /// The task or activity the actor performed.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLog/action`.
            public struct actionPayload: Codable, Hashable, Sendable {
                /// The type of the action.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/action/type`.
                public var _type: Swift.String
                /// Metadata of the action. Each action type supports its own metadata attributes.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/action/details`.
                public struct detailsPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `detailsPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Metadata of the action. Each action type supports its own metadata attributes.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/action/details`.
                public var details: Components.Schemas.ActivityLog.actionPayload.detailsPayload?
                /// Creates a new `actionPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of the action.
                ///   - details: Metadata of the action. Each action type supports its own metadata attributes.
                public init(
                    _type: Swift.String,
                    details: Components.Schemas.ActivityLog.actionPayload.detailsPayload? = nil
                ) {
                    self._type = _type
                    self.details = details
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case details
                }
            }
            /// The task or activity the actor performed.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLog/action`.
            public var action: Components.Schemas.ActivityLog.actionPayload
            /// The resource the actor took the action on. It can be a user, file, project or other resource types.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLog/entity`.
            @frozen public enum entityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActivityLog/entity/ActivityLogFileEntity`.
                case file(Components.Schemas.ActivityLogFileEntity)
                /// - Remark: Generated from `#/components/schemas/ActivityLog/entity/ActivityLogFileRepoEntity`.
                case file_repo(Components.Schemas.ActivityLogFileRepoEntity)
                /// - Remark: Generated from `#/components/schemas/ActivityLog/entity/ActivityLogOrgEntity`.
                case org(Components.Schemas.ActivityLogOrgEntity)
                /// - Remark: Generated from `#/components/schemas/ActivityLog/entity/ActivityLogPluginEntity`.
                case plugin(Components.Schemas.ActivityLogPluginEntity)
                /// - Remark: Generated from `#/components/schemas/ActivityLog/entity/ActivityLogProjectEntity`.
                case project(Components.Schemas.ActivityLogProjectEntity)
                /// - Remark: Generated from `#/components/schemas/ActivityLog/entity/ActivityLogTeamEntity`.
                case team(Components.Schemas.ActivityLogTeamEntity)
                /// - Remark: Generated from `#/components/schemas/ActivityLog/entity/ActivityLogUserEntity`.
                case user(Components.Schemas.ActivityLogUserEntity)
                /// - Remark: Generated from `#/components/schemas/ActivityLog/entity/ActivityLogWidgetEntity`.
                case widget(Components.Schemas.ActivityLogWidgetEntity)
                /// - Remark: Generated from `#/components/schemas/ActivityLog/entity/ActivityLogWorkspaceEntity`.
                case workspace(Components.Schemas.ActivityLogWorkspaceEntity)
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    let discriminator = try container.decode(
                        Swift.String.self,
                        forKey: ._type
                    )
                    switch discriminator {
                    case "file":
                        self = .file(try .init(from: decoder))
                    case "file_repo":
                        self = .file_repo(try .init(from: decoder))
                    case "org":
                        self = .org(try .init(from: decoder))
                    case "plugin":
                        self = .plugin(try .init(from: decoder))
                    case "project":
                        self = .project(try .init(from: decoder))
                    case "team":
                        self = .team(try .init(from: decoder))
                    case "user":
                        self = .user(try .init(from: decoder))
                    case "widget":
                        self = .widget(try .init(from: decoder))
                    case "workspace":
                        self = .workspace(try .init(from: decoder))
                    default:
                        throw Swift.DecodingError.unknownOneOfDiscriminator(
                            discriminatorKey: CodingKeys._type,
                            discriminatorValue: discriminator,
                            codingPath: decoder.codingPath
                        )
                    }
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .file(value):
                        try value.encode(to: encoder)
                    case let .file_repo(value):
                        try value.encode(to: encoder)
                    case let .org(value):
                        try value.encode(to: encoder)
                    case let .plugin(value):
                        try value.encode(to: encoder)
                    case let .project(value):
                        try value.encode(to: encoder)
                    case let .team(value):
                        try value.encode(to: encoder)
                    case let .user(value):
                        try value.encode(to: encoder)
                    case let .widget(value):
                        try value.encode(to: encoder)
                    case let .workspace(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The resource the actor took the action on. It can be a user, file, project or other resource types.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLog/entity`.
            public var entity: Components.Schemas.ActivityLog.entityPayload
            /// Contextual information about the event.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLog/context`.
            public struct contextPayload: Codable, Hashable, Sendable {
                /// The third-party application that triggered the event, if applicable.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/context/client_name`.
                public var client_name: Swift.String?
                /// The IP address from of the client that sent the event request.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/context/ip_address`.
                public var ip_address: Swift.String
                /// If Figma's Support team triggered the event. This is either true or false.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/context/is_figma_support_team_action`.
                public var is_figma_support_team_action: Swift.Bool
                /// The id of the organization where the event took place.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/context/org_id`.
                public var org_id: Swift.String
                /// The id of the team where the event took place -- if this took place in a specific team.
                ///
                /// - Remark: Generated from `#/components/schemas/ActivityLog/context/team_id`.
                public var team_id: Swift.String?
                /// Creates a new `contextPayload`.
                ///
                /// - Parameters:
                ///   - client_name: The third-party application that triggered the event, if applicable.
                ///   - ip_address: The IP address from of the client that sent the event request.
                ///   - is_figma_support_team_action: If Figma's Support team triggered the event. This is either true or false.
                ///   - org_id: The id of the organization where the event took place.
                ///   - team_id: The id of the team where the event took place -- if this took place in a specific team.
                public init(
                    client_name: Swift.String? = nil,
                    ip_address: Swift.String,
                    is_figma_support_team_action: Swift.Bool,
                    org_id: Swift.String,
                    team_id: Swift.String? = nil
                ) {
                    self.client_name = client_name
                    self.ip_address = ip_address
                    self.is_figma_support_team_action = is_figma_support_team_action
                    self.org_id = org_id
                    self.team_id = team_id
                }
                public enum CodingKeys: String, CodingKey {
                    case client_name
                    case ip_address
                    case is_figma_support_team_action
                    case org_id
                    case team_id
                }
            }
            /// Contextual information about the event.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityLog/context`.
            public var context: Components.Schemas.ActivityLog.contextPayload
            /// Creates a new `ActivityLog`.
            ///
            /// - Parameters:
            ///   - id: The ID of the event.
            ///   - timestamp: The timestamp of the event in seconds since the Unix epoch.
            ///   - actor: The user who performed the action.
            ///   - action: The task or activity the actor performed.
            ///   - entity: The resource the actor took the action on. It can be a user, file, project or other resource types.
            ///   - context: Contextual information about the event.
            public init(
                id: Swift.String,
                timestamp: Swift.Double,
                actor: Components.Schemas.ActivityLog.actorPayload? = nil,
                action: Components.Schemas.ActivityLog.actionPayload,
                entity: Components.Schemas.ActivityLog.entityPayload,
                context: Components.Schemas.ActivityLog.contextPayload
            ) {
                self.id = id
                self.timestamp = timestamp
                self.actor = actor
                self.action = action
                self.entity = entity
                self.context = context
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case timestamp
                case actor
                case action
                case entity
                case context
            }
        }
        /// An object describing the user's payment status.
        ///
        /// - Remark: Generated from `#/components/schemas/PaymentStatus`.
        public struct PaymentStatus: Codable, Hashable, Sendable {
            /// The current payment status of the user on the resource, as a string enum:
            ///   
            /// - `UNPAID`: user has not paid for the resource
            /// - `PAID`: user has an active purchase on the resource
            /// - `TRIAL`: user is in the trial period for a subscription resource
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentStatus/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case UNPAID = "UNPAID"
                case PAID = "PAID"
                case TRIAL = "TRIAL"
            }
            /// The current payment status of the user on the resource, as a string enum:
            ///   
            /// - `UNPAID`: user has not paid for the resource
            /// - `PAID`: user has an active purchase on the resource
            /// - `TRIAL`: user is in the trial period for a subscription resource
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentStatus/type`.
            public var _type: Components.Schemas.PaymentStatus._typePayload?
            /// Creates a new `PaymentStatus`.
            ///
            /// - Parameters:
            ///   - _type: The current payment status of the user on the resource, as a string enum:
            public init(_type: Components.Schemas.PaymentStatus._typePayload? = nil) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// An object describing a user's payment information for a plugin, widget, or Community file.
        ///
        /// - Remark: Generated from `#/components/schemas/PaymentInformation`.
        public struct PaymentInformation: Codable, Hashable, Sendable {
            /// The ID of the user whose payment information was queried. Can be used to verify the validity of a response.
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentInformation/user_id`.
            public var user_id: Swift.String
            /// The ID of the plugin, widget, or Community file that was queried. Can be used to verify the validity of a response.
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentInformation/resource_id`.
            public var resource_id: Swift.String
            /// The type of the resource.
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentInformation/resource_type`.
            @frozen public enum resource_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case PLUGIN = "PLUGIN"
                case WIDGET = "WIDGET"
                case COMMUNITY_FILE = "COMMUNITY_FILE"
            }
            /// The type of the resource.
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentInformation/resource_type`.
            public var resource_type: Components.Schemas.PaymentInformation.resource_typePayload
            /// - Remark: Generated from `#/components/schemas/PaymentInformation/payment_status`.
            public var payment_status: Components.Schemas.PaymentStatus
            /// The UTC ISO 8601 timestamp indicating when the user purchased the resource. No value is given if the user has never purchased the resource.
            ///   
            /// Note that a value will still be returned if the user had purchased the resource, but no longer has active access to it (e.g. purchase refunded, subscription ended).
            ///
            /// - Remark: Generated from `#/components/schemas/PaymentInformation/date_of_purchase`.
            public var date_of_purchase: Foundation.Date?
            /// Creates a new `PaymentInformation`.
            ///
            /// - Parameters:
            ///   - user_id: The ID of the user whose payment information was queried. Can be used to verify the validity of a response.
            ///   - resource_id: The ID of the plugin, widget, or Community file that was queried. Can be used to verify the validity of a response.
            ///   - resource_type: The type of the resource.
            ///   - payment_status:
            ///   - date_of_purchase: The UTC ISO 8601 timestamp indicating when the user purchased the resource. No value is given if the user has never purchased the resource.
            public init(
                user_id: Swift.String,
                resource_id: Swift.String,
                resource_type: Components.Schemas.PaymentInformation.resource_typePayload,
                payment_status: Components.Schemas.PaymentStatus,
                date_of_purchase: Foundation.Date? = nil
            ) {
                self.user_id = user_id
                self.resource_id = resource_id
                self.resource_type = resource_type
                self.payment_status = payment_status
                self.date_of_purchase = date_of_purchase
            }
            public enum CodingKeys: String, CodingKey {
                case user_id
                case resource_id
                case resource_type
                case payment_status
                case date_of_purchase
            }
        }
        /// Scopes allow a variable to be shown or hidden in the variable picker for various fields. This declutters the Figma UI if you have a large number of variables. Variable scopes are currently supported on `FLOAT`, `STRING`, and `COLOR` variables.
        ///
        /// `ALL_SCOPES` is a special scope that means that the variable will be shown in the variable picker for all variable fields. If `ALL_SCOPES` is set, no additional scopes can be set.
        ///
        /// `ALL_FILLS` is a special scope that means that the variable will be shown in the variable picker for all fill fields. If `ALL_FILLS` is set, no additional fill scopes can be set.
        ///
        /// Valid scopes for `FLOAT` variables:
        /// - `ALL_SCOPES`
        /// - `TEXT_CONTENT`
        /// - `WIDTH_HEIGHT`
        /// - `GAP`
        /// - `STROKE_FLOAT`
        /// - `EFFECT_FLOAT`
        /// - `OPACITY`
        /// - `FONT_WEIGHT`
        /// - `FONT_SIZE`
        /// - `LINE_HEIGHT`
        /// - `LETTER_SPACING`
        /// - `PARAGRAPH_SPACING`
        /// - `PARAGRAPH_INDENT`
        ///
        /// Valid scopes for `STRING` variables:
        /// - `ALL_SCOPES`
        /// - `TEXT_CONTENT`
        /// - `FONT_FAMILY`
        /// - `FONT_STYLE`
        ///
        /// Valid scopes for `COLOR` variables:
        /// - `ALL_SCOPES`
        /// - `ALL_FILLS`
        /// - `FRAME_FILL`
        /// - `SHAPE_FILL`
        /// - `TEXT_FILL`
        /// - `STROKE_COLOR`
        /// - `EFFECT_COLOR`
        ///
        /// - Remark: Generated from `#/components/schemas/VariableScope`.
        @frozen public enum VariableScope: String, Codable, Hashable, Sendable, CaseIterable {
            case ALL_SCOPES = "ALL_SCOPES"
            case TEXT_CONTENT = "TEXT_CONTENT"
            case CORNER_RADIUS = "CORNER_RADIUS"
            case WIDTH_HEIGHT = "WIDTH_HEIGHT"
            case GAP = "GAP"
            case ALL_FILLS = "ALL_FILLS"
            case FRAME_FILL = "FRAME_FILL"
            case SHAPE_FILL = "SHAPE_FILL"
            case TEXT_FILL = "TEXT_FILL"
            case STROKE_COLOR = "STROKE_COLOR"
            case STROKE_FLOAT = "STROKE_FLOAT"
            case EFFECT_FLOAT = "EFFECT_FLOAT"
            case EFFECT_COLOR = "EFFECT_COLOR"
            case OPACITY = "OPACITY"
            case FONT_FAMILY = "FONT_FAMILY"
            case FONT_STYLE = "FONT_STYLE"
            case FONT_WEIGHT = "FONT_WEIGHT"
            case FONT_SIZE = "FONT_SIZE"
            case LINE_HEIGHT = "LINE_HEIGHT"
            case LETTER_SPACING = "LETTER_SPACING"
            case PARAGRAPH_SPACING = "PARAGRAPH_SPACING"
            case PARAGRAPH_INDENT = "PARAGRAPH_INDENT"
        }
        /// An object containing platform-specific code syntax definitions for a variable. All platforms are optional.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableCodeSyntax`.
        public struct VariableCodeSyntax: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VariableCodeSyntax/WEB`.
            public var WEB: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VariableCodeSyntax/ANDROID`.
            public var ANDROID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VariableCodeSyntax/iOS`.
            public var iOS: Swift.String?
            /// Creates a new `VariableCodeSyntax`.
            ///
            /// - Parameters:
            ///   - WEB:
            ///   - ANDROID:
            ///   - iOS:
            public init(
                WEB: Swift.String? = nil,
                ANDROID: Swift.String? = nil,
                iOS: Swift.String? = nil
            ) {
                self.WEB = WEB
                self.ANDROID = ANDROID
                self.iOS = iOS
            }
            public enum CodingKeys: String, CodingKey {
                case WEB
                case ANDROID
                case iOS
            }
        }
        /// A grouping of related Variable objects each with the same modes.
        ///
        /// - Remark: Generated from `#/components/schemas/LocalVariableCollection`.
        public struct LocalVariableCollection: Codable, Hashable, Sendable {
            /// The unique identifier of this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/id`.
            public var id: Swift.String
            /// The name of this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/name`.
            public var name: Swift.String
            /// The key of this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/modesPayload`.
            public struct modesPayloadPayload: Codable, Hashable, Sendable {
                /// The unique identifier of this mode.
                ///
                /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/modesPayload/modeId`.
                public var modeId: Swift.String
                /// The name of this mode.
                ///
                /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/modesPayload/name`.
                public var name: Swift.String
                /// Creates a new `modesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - modeId: The unique identifier of this mode.
                ///   - name: The name of this mode.
                public init(
                    modeId: Swift.String,
                    name: Swift.String
                ) {
                    self.modeId = modeId
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case modeId
                    case name
                }
            }
            /// The modes of this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/modes`.
            public typealias modesPayload = [Components.Schemas.LocalVariableCollection.modesPayloadPayload]
            /// The modes of this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/modes`.
            public var modes: Components.Schemas.LocalVariableCollection.modesPayload
            /// The id of the default mode.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/defaultModeId`.
            public var defaultModeId: Swift.String
            /// Whether this variable collection is remote.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/remote`.
            public var remote: Swift.Bool
            /// Whether this variable collection is hidden when publishing the current file as a library.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/hiddenFromPublishing`.
            public var hiddenFromPublishing: Swift.Bool
            /// The ids of the variables in the collection. Note that the order of these variables is roughly the same as what is shown in Figma Design, however it does not account for groups. As a result, the order of these variables may not exactly reflect the exact ordering and grouping shown in the authoring UI.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariableCollection/variableIds`.
            public var variableIds: [Swift.String]
            /// Creates a new `LocalVariableCollection`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier of this variable collection.
            ///   - name: The name of this variable collection.
            ///   - key: The key of this variable collection.
            ///   - modes: The modes of this variable collection.
            ///   - defaultModeId: The id of the default mode.
            ///   - remote: Whether this variable collection is remote.
            ///   - hiddenFromPublishing: Whether this variable collection is hidden when publishing the current file as a library.
            ///   - variableIds: The ids of the variables in the collection. Note that the order of these variables is roughly the same as what is shown in Figma Design, however it does not account for groups. As a result, the order of these variables may not exactly reflect the exact ordering and grouping shown in the authoring UI.
            public init(
                id: Swift.String,
                name: Swift.String,
                key: Swift.String,
                modes: Components.Schemas.LocalVariableCollection.modesPayload,
                defaultModeId: Swift.String,
                remote: Swift.Bool,
                hiddenFromPublishing: Swift.Bool,
                variableIds: [Swift.String]
            ) {
                self.id = id
                self.name = name
                self.key = key
                self.modes = modes
                self.defaultModeId = defaultModeId
                self.remote = remote
                self.hiddenFromPublishing = hiddenFromPublishing
                self.variableIds = variableIds
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case key
                case modes
                case defaultModeId
                case remote
                case hiddenFromPublishing
                case variableIds
            }
        }
        /// A Variable is a single design token that defines values for each of the modes in its VariableCollection. These values can be applied to various kinds of design properties.
        ///
        /// - Remark: Generated from `#/components/schemas/LocalVariable`.
        public struct LocalVariable: Codable, Hashable, Sendable {
            /// The unique identifier of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/id`.
            public var id: Swift.String
            /// The name of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/name`.
            public var name: Swift.String
            /// The key of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/key`.
            public var key: Swift.String
            /// The id of the variable collection that contains this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/variableCollectionId`.
            public var variableCollectionId: Swift.String
            /// The resolved type of the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/resolvedType`.
            @frozen public enum resolvedTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case BOOLEAN = "BOOLEAN"
                case FLOAT = "FLOAT"
                case STRING = "STRING"
                case COLOR = "COLOR"
            }
            /// The resolved type of the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/resolvedType`.
            public var resolvedType: Components.Schemas.LocalVariable.resolvedTypePayload
            /// The values for each mode of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/valuesByMode`.
            public struct valuesByModePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/LocalVariable/valuesByMode/additionalProperties`.
                @frozen public enum additionalPropertiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/LocalVariable/valuesByMode/additionalProperties/case1`.
                    case case1(Swift.Bool)
                    /// - Remark: Generated from `#/components/schemas/LocalVariable/valuesByMode/additionalProperties/case2`.
                    case case2(Swift.Double)
                    /// - Remark: Generated from `#/components/schemas/LocalVariable/valuesByMode/additionalProperties/case3`.
                    case case3(Swift.String)
                    /// - Remark: Generated from `#/components/schemas/LocalVariable/valuesByMode/additionalProperties/case4`.
                    case RGBA(Components.Schemas.RGBA)
                    /// - Remark: Generated from `#/components/schemas/LocalVariable/valuesByMode/additionalProperties/case5`.
                    case VariableAlias(Components.Schemas.VariableAlias)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .RGBA(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .VariableAlias(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .RGBA(value):
                            try value.encode(to: encoder)
                        case let .VariableAlias(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.LocalVariable.valuesByModePayload.additionalPropertiesPayload]
                /// Creates a new `valuesByModePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.LocalVariable.valuesByModePayload.additionalPropertiesPayload] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The values for each mode of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/valuesByMode`.
            public var valuesByMode: Components.Schemas.LocalVariable.valuesByModePayload
            /// Whether this variable is remote.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/remote`.
            public var remote: Swift.Bool
            /// The description of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/description`.
            public var description: Swift.String
            /// Whether this variable is hidden when publishing the current file as a library.
            ///
            /// If the parent `VariableCollection` is marked as `hiddenFromPublishing`, then this variable will also be hidden from publishing via the UI. `hiddenFromPublishing` is independently toggled for a variable and collection. However, both must be true for a given variable to be publishable.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/hiddenFromPublishing`.
            public var hiddenFromPublishing: Swift.Bool
            /// An array of scopes in the UI where this variable is shown. Setting this property will show/hide this variable in the variable picker UI for different fields.
            ///
            /// Setting scopes for a variable does not prevent that variable from being bound in other scopes (for example, via the Plugin API). This only limits the variables that are shown in pickers within the Figma UI.
            ///
            /// - Remark: Generated from `#/components/schemas/LocalVariable/scopes`.
            public var scopes: [Components.Schemas.VariableScope]
            /// - Remark: Generated from `#/components/schemas/LocalVariable/codeSyntax`.
            public var codeSyntax: Components.Schemas.VariableCodeSyntax
            /// Creates a new `LocalVariable`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier of this variable.
            ///   - name: The name of this variable.
            ///   - key: The key of this variable.
            ///   - variableCollectionId: The id of the variable collection that contains this variable.
            ///   - resolvedType: The resolved type of the variable.
            ///   - valuesByMode: The values for each mode of this variable.
            ///   - remote: Whether this variable is remote.
            ///   - description: The description of this variable.
            ///   - hiddenFromPublishing: Whether this variable is hidden when publishing the current file as a library.
            ///   - scopes: An array of scopes in the UI where this variable is shown. Setting this property will show/hide this variable in the variable picker UI for different fields.
            ///   - codeSyntax:
            public init(
                id: Swift.String,
                name: Swift.String,
                key: Swift.String,
                variableCollectionId: Swift.String,
                resolvedType: Components.Schemas.LocalVariable.resolvedTypePayload,
                valuesByMode: Components.Schemas.LocalVariable.valuesByModePayload,
                remote: Swift.Bool,
                description: Swift.String,
                hiddenFromPublishing: Swift.Bool,
                scopes: [Components.Schemas.VariableScope],
                codeSyntax: Components.Schemas.VariableCodeSyntax
            ) {
                self.id = id
                self.name = name
                self.key = key
                self.variableCollectionId = variableCollectionId
                self.resolvedType = resolvedType
                self.valuesByMode = valuesByMode
                self.remote = remote
                self.description = description
                self.hiddenFromPublishing = hiddenFromPublishing
                self.scopes = scopes
                self.codeSyntax = codeSyntax
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case key
                case variableCollectionId
                case resolvedType
                case valuesByMode
                case remote
                case description
                case hiddenFromPublishing
                case scopes
                case codeSyntax
            }
        }
        /// A grouping of related Variable objects each with the same modes.
        ///
        /// - Remark: Generated from `#/components/schemas/PublishedVariableCollection`.
        public struct PublishedVariableCollection: Codable, Hashable, Sendable {
            /// The unique identifier of this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariableCollection/id`.
            public var id: Swift.String
            /// The ID of the variable collection that is used by subscribing files. This ID changes every time the variable collection is modified and published.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariableCollection/subscribed_id`.
            public var subscribed_id: Swift.String
            /// The name of this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariableCollection/name`.
            public var name: Swift.String
            /// The key of this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariableCollection/key`.
            public var key: Swift.String
            /// The UTC ISO 8601 time at which the variable collection was last updated.
            ///
            /// This timestamp will change any time a variable in the collection is changed.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariableCollection/updatedAt`.
            public var updatedAt: Foundation.Date
            /// Creates a new `PublishedVariableCollection`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier of this variable collection.
            ///   - subscribed_id: The ID of the variable collection that is used by subscribing files. This ID changes every time the variable collection is modified and published.
            ///   - name: The name of this variable collection.
            ///   - key: The key of this variable collection.
            ///   - updatedAt: The UTC ISO 8601 time at which the variable collection was last updated.
            public init(
                id: Swift.String,
                subscribed_id: Swift.String,
                name: Swift.String,
                key: Swift.String,
                updatedAt: Foundation.Date
            ) {
                self.id = id
                self.subscribed_id = subscribed_id
                self.name = name
                self.key = key
                self.updatedAt = updatedAt
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case subscribed_id
                case name
                case key
                case updatedAt
            }
        }
        /// A Variable is a single design token that defines values for each of the modes in its VariableCollection. These values can be applied to various kinds of design properties.
        ///
        /// - Remark: Generated from `#/components/schemas/PublishedVariable`.
        public struct PublishedVariable: Codable, Hashable, Sendable {
            /// The unique identifier of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariable/id`.
            public var id: Swift.String
            /// The ID of the variable that is used by subscribing files. This ID changes every time the variable is modified and published.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariable/subscribed_id`.
            public var subscribed_id: Swift.String
            /// The name of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariable/name`.
            public var name: Swift.String
            /// The key of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariable/key`.
            public var key: Swift.String
            /// The id of the variable collection that contains this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariable/variableCollectionId`.
            public var variableCollectionId: Swift.String
            /// The resolved type of the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariable/resolvedDataType`.
            @frozen public enum resolvedDataTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case BOOLEAN = "BOOLEAN"
                case FLOAT = "FLOAT"
                case STRING = "STRING"
                case COLOR = "COLOR"
            }
            /// The resolved type of the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariable/resolvedDataType`.
            public var resolvedDataType: Components.Schemas.PublishedVariable.resolvedDataTypePayload
            /// The UTC ISO 8601 time at which the variable was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/PublishedVariable/updatedAt`.
            public var updatedAt: Foundation.Date
            /// Creates a new `PublishedVariable`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier of this variable.
            ///   - subscribed_id: The ID of the variable that is used by subscribing files. This ID changes every time the variable is modified and published.
            ///   - name: The name of this variable.
            ///   - key: The key of this variable.
            ///   - variableCollectionId: The id of the variable collection that contains this variable.
            ///   - resolvedDataType: The resolved type of the variable.
            ///   - updatedAt: The UTC ISO 8601 time at which the variable was last updated.
            public init(
                id: Swift.String,
                subscribed_id: Swift.String,
                name: Swift.String,
                key: Swift.String,
                variableCollectionId: Swift.String,
                resolvedDataType: Components.Schemas.PublishedVariable.resolvedDataTypePayload,
                updatedAt: Foundation.Date
            ) {
                self.id = id
                self.subscribed_id = subscribed_id
                self.name = name
                self.key = key
                self.variableCollectionId = variableCollectionId
                self.resolvedDataType = resolvedDataType
                self.updatedAt = updatedAt
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case subscribed_id
                case name
                case key
                case variableCollectionId
                case resolvedDataType
                case updatedAt
            }
        }
        /// An object that contains details about creating a `VariableCollection`.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableCollectionCreate`.
        public struct VariableCollectionCreate: Codable, Hashable, Sendable {
            /// The action to perform for the variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionCreate/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case CREATE = "CREATE"
            }
            /// The action to perform for the variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionCreate/action`.
            public var action: Components.Schemas.VariableCollectionCreate.actionPayload
            /// A temporary id for this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionCreate/id`.
            public var id: Swift.String?
            /// The name of this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionCreate/name`.
            public var name: Swift.String
            /// The initial mode refers to the mode that is created by default. You can set a temporary id here, in order to reference this mode later in this request.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionCreate/initialModeId`.
            public var initialModeId: Swift.String?
            /// Whether this variable collection is hidden when publishing the current file as a library.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionCreate/hiddenFromPublishing`.
            public var hiddenFromPublishing: Swift.Bool?
            /// Creates a new `VariableCollectionCreate`.
            ///
            /// - Parameters:
            ///   - action: The action to perform for the variable collection.
            ///   - id: A temporary id for this variable collection.
            ///   - name: The name of this variable collection.
            ///   - initialModeId: The initial mode refers to the mode that is created by default. You can set a temporary id here, in order to reference this mode later in this request.
            ///   - hiddenFromPublishing: Whether this variable collection is hidden when publishing the current file as a library.
            public init(
                action: Components.Schemas.VariableCollectionCreate.actionPayload,
                id: Swift.String? = nil,
                name: Swift.String,
                initialModeId: Swift.String? = nil,
                hiddenFromPublishing: Swift.Bool? = nil
            ) {
                self.action = action
                self.id = id
                self.name = name
                self.initialModeId = initialModeId
                self.hiddenFromPublishing = hiddenFromPublishing
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case id
                case name
                case initialModeId
                case hiddenFromPublishing
            }
        }
        /// An object that contains details about updating a `VariableCollection`.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableCollectionUpdate`.
        public struct VariableCollectionUpdate: Codable, Hashable, Sendable {
            /// The action to perform for the variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionUpdate/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case UPDATE = "UPDATE"
            }
            /// The action to perform for the variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionUpdate/action`.
            public var action: Components.Schemas.VariableCollectionUpdate.actionPayload
            /// The id of the variable collection to update.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionUpdate/id`.
            public var id: Swift.String
            /// The name of this variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionUpdate/name`.
            public var name: Swift.String?
            /// Whether this variable collection is hidden when publishing the current file as a library.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionUpdate/hiddenFromPublishing`.
            public var hiddenFromPublishing: Swift.Bool?
            /// Creates a new `VariableCollectionUpdate`.
            ///
            /// - Parameters:
            ///   - action: The action to perform for the variable collection.
            ///   - id: The id of the variable collection to update.
            ///   - name: The name of this variable collection.
            ///   - hiddenFromPublishing: Whether this variable collection is hidden when publishing the current file as a library.
            public init(
                action: Components.Schemas.VariableCollectionUpdate.actionPayload,
                id: Swift.String,
                name: Swift.String? = nil,
                hiddenFromPublishing: Swift.Bool? = nil
            ) {
                self.action = action
                self.id = id
                self.name = name
                self.hiddenFromPublishing = hiddenFromPublishing
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case id
                case name
                case hiddenFromPublishing
            }
        }
        /// An object that contains details about deleting a `VariableCollection`.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableCollectionDelete`.
        public struct VariableCollectionDelete: Codable, Hashable, Sendable {
            /// The action to perform for the variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionDelete/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case DELETE = "DELETE"
            }
            /// The action to perform for the variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionDelete/action`.
            public var action: Components.Schemas.VariableCollectionDelete.actionPayload
            /// The id of the variable collection to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCollectionDelete/id`.
            public var id: Swift.String
            /// Creates a new `VariableCollectionDelete`.
            ///
            /// - Parameters:
            ///   - action: The action to perform for the variable collection.
            ///   - id: The id of the variable collection to delete.
            public init(
                action: Components.Schemas.VariableCollectionDelete.actionPayload,
                id: Swift.String
            ) {
                self.action = action
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case id
            }
        }
        /// - Remark: Generated from `#/components/schemas/VariableCollectionChange`.
        @frozen public enum VariableCollectionChange: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VariableCollectionChange/VariableCollectionCreate`.
            case CREATE(Components.Schemas.VariableCollectionCreate)
            /// - Remark: Generated from `#/components/schemas/VariableCollectionChange/VariableCollectionDelete`.
            case DELETE(Components.Schemas.VariableCollectionDelete)
            /// - Remark: Generated from `#/components/schemas/VariableCollectionChange/VariableCollectionUpdate`.
            case UPDATE(Components.Schemas.VariableCollectionUpdate)
            public enum CodingKeys: String, CodingKey {
                case action
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: .action
                )
                switch discriminator {
                case "CREATE":
                    self = .CREATE(try .init(from: decoder))
                case "DELETE":
                    self = .DELETE(try .init(from: decoder))
                case "UPDATE":
                    self = .UPDATE(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys.action,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .CREATE(value):
                    try value.encode(to: encoder)
                case let .DELETE(value):
                    try value.encode(to: encoder)
                case let .UPDATE(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// An object that contains details about creating a `VariableMode`.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableModeCreate`.
        public struct VariableModeCreate: Codable, Hashable, Sendable {
            /// The action to perform for the variable mode.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeCreate/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case CREATE = "CREATE"
            }
            /// The action to perform for the variable mode.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeCreate/action`.
            public var action: Components.Schemas.VariableModeCreate.actionPayload
            /// A temporary id for this variable mode.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeCreate/id`.
            public var id: Swift.String?
            /// The name of this variable mode.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeCreate/name`.
            public var name: Swift.String
            /// The variable collection that will contain the mode. You can use the temporary id of a variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeCreate/variableCollectionId`.
            public var variableCollectionId: Swift.String
            /// Creates a new `VariableModeCreate`.
            ///
            /// - Parameters:
            ///   - action: The action to perform for the variable mode.
            ///   - id: A temporary id for this variable mode.
            ///   - name: The name of this variable mode.
            ///   - variableCollectionId: The variable collection that will contain the mode. You can use the temporary id of a variable collection.
            public init(
                action: Components.Schemas.VariableModeCreate.actionPayload,
                id: Swift.String? = nil,
                name: Swift.String,
                variableCollectionId: Swift.String
            ) {
                self.action = action
                self.id = id
                self.name = name
                self.variableCollectionId = variableCollectionId
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case id
                case name
                case variableCollectionId
            }
        }
        /// An object that contains details about updating a `VariableMode`.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableModeUpdate`.
        public struct VariableModeUpdate: Codable, Hashable, Sendable {
            /// The action to perform for the variable mode.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeUpdate/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case UPDATE = "UPDATE"
            }
            /// The action to perform for the variable mode.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeUpdate/action`.
            public var action: Components.Schemas.VariableModeUpdate.actionPayload
            /// The id of the variable mode to update.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeUpdate/id`.
            public var id: Swift.String
            /// The name of this variable mode.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeUpdate/name`.
            public var name: Swift.String?
            /// The variable collection that contains the mode.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeUpdate/variableCollectionId`.
            public var variableCollectionId: Swift.String
            /// Creates a new `VariableModeUpdate`.
            ///
            /// - Parameters:
            ///   - action: The action to perform for the variable mode.
            ///   - id: The id of the variable mode to update.
            ///   - name: The name of this variable mode.
            ///   - variableCollectionId: The variable collection that contains the mode.
            public init(
                action: Components.Schemas.VariableModeUpdate.actionPayload,
                id: Swift.String,
                name: Swift.String? = nil,
                variableCollectionId: Swift.String
            ) {
                self.action = action
                self.id = id
                self.name = name
                self.variableCollectionId = variableCollectionId
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case id
                case name
                case variableCollectionId
            }
        }
        /// An object that contains details about deleting a `VariableMode`.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableModeDelete`.
        public struct VariableModeDelete: Codable, Hashable, Sendable {
            /// The action to perform for the variable mode.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeDelete/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case DELETE = "DELETE"
            }
            /// The action to perform for the variable mode.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeDelete/action`.
            public var action: Components.Schemas.VariableModeDelete.actionPayload
            /// The id of the variable mode to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeDelete/id`.
            public var id: Swift.String
            /// Creates a new `VariableModeDelete`.
            ///
            /// - Parameters:
            ///   - action: The action to perform for the variable mode.
            ///   - id: The id of the variable mode to delete.
            public init(
                action: Components.Schemas.VariableModeDelete.actionPayload,
                id: Swift.String
            ) {
                self.action = action
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case id
            }
        }
        /// - Remark: Generated from `#/components/schemas/VariableModeChange`.
        @frozen public enum VariableModeChange: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VariableModeChange/VariableModeCreate`.
            case CREATE(Components.Schemas.VariableModeCreate)
            /// - Remark: Generated from `#/components/schemas/VariableModeChange/VariableModeDelete`.
            case DELETE(Components.Schemas.VariableModeDelete)
            /// - Remark: Generated from `#/components/schemas/VariableModeChange/VariableModeUpdate`.
            case UPDATE(Components.Schemas.VariableModeUpdate)
            public enum CodingKeys: String, CodingKey {
                case action
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: .action
                )
                switch discriminator {
                case "CREATE":
                    self = .CREATE(try .init(from: decoder))
                case "DELETE":
                    self = .DELETE(try .init(from: decoder))
                case "UPDATE":
                    self = .UPDATE(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys.action,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .CREATE(value):
                    try value.encode(to: encoder)
                case let .DELETE(value):
                    try value.encode(to: encoder)
                case let .UPDATE(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// An object that contains details about creating a `Variable`.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableCreate`.
        public struct VariableCreate: Codable, Hashable, Sendable {
            /// The action to perform for the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCreate/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case CREATE = "CREATE"
            }
            /// The action to perform for the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCreate/action`.
            public var action: Components.Schemas.VariableCreate.actionPayload
            /// A temporary id for this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCreate/id`.
            public var id: Swift.String?
            /// The name of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCreate/name`.
            public var name: Swift.String
            /// The variable collection that will contain the variable. You can use the temporary id of a variable collection.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCreate/variableCollectionId`.
            public var variableCollectionId: Swift.String
            /// The resolved type of the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCreate/resolvedType`.
            @frozen public enum resolvedTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case BOOLEAN = "BOOLEAN"
                case FLOAT = "FLOAT"
                case STRING = "STRING"
                case COLOR = "COLOR"
            }
            /// The resolved type of the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCreate/resolvedType`.
            public var resolvedType: Components.Schemas.VariableCreate.resolvedTypePayload
            /// The description of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCreate/description`.
            public var description: Swift.String?
            /// Whether this variable is hidden when publishing the current file as a library.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCreate/hiddenFromPublishing`.
            public var hiddenFromPublishing: Swift.Bool?
            /// An array of scopes in the UI where this variable is shown. Setting this property will show/hide this variable in the variable picker UI for different fields.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableCreate/scopes`.
            public var scopes: [Components.Schemas.VariableScope]?
            /// - Remark: Generated from `#/components/schemas/VariableCreate/codeSyntax`.
            public var codeSyntax: Components.Schemas.VariableCodeSyntax?
            /// Creates a new `VariableCreate`.
            ///
            /// - Parameters:
            ///   - action: The action to perform for the variable.
            ///   - id: A temporary id for this variable.
            ///   - name: The name of this variable.
            ///   - variableCollectionId: The variable collection that will contain the variable. You can use the temporary id of a variable collection.
            ///   - resolvedType: The resolved type of the variable.
            ///   - description: The description of this variable.
            ///   - hiddenFromPublishing: Whether this variable is hidden when publishing the current file as a library.
            ///   - scopes: An array of scopes in the UI where this variable is shown. Setting this property will show/hide this variable in the variable picker UI for different fields.
            ///   - codeSyntax:
            public init(
                action: Components.Schemas.VariableCreate.actionPayload,
                id: Swift.String? = nil,
                name: Swift.String,
                variableCollectionId: Swift.String,
                resolvedType: Components.Schemas.VariableCreate.resolvedTypePayload,
                description: Swift.String? = nil,
                hiddenFromPublishing: Swift.Bool? = nil,
                scopes: [Components.Schemas.VariableScope]? = nil,
                codeSyntax: Components.Schemas.VariableCodeSyntax? = nil
            ) {
                self.action = action
                self.id = id
                self.name = name
                self.variableCollectionId = variableCollectionId
                self.resolvedType = resolvedType
                self.description = description
                self.hiddenFromPublishing = hiddenFromPublishing
                self.scopes = scopes
                self.codeSyntax = codeSyntax
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case id
                case name
                case variableCollectionId
                case resolvedType
                case description
                case hiddenFromPublishing
                case scopes
                case codeSyntax
            }
        }
        /// An object that contains details about updating a `Variable`.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableUpdate`.
        public struct VariableUpdate: Codable, Hashable, Sendable {
            /// The action to perform for the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableUpdate/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case UPDATE = "UPDATE"
            }
            /// The action to perform for the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableUpdate/action`.
            public var action: Components.Schemas.VariableUpdate.actionPayload
            /// The id of the variable to update.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableUpdate/id`.
            public var id: Swift.String
            /// The name of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableUpdate/name`.
            public var name: Swift.String?
            /// The description of this variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableUpdate/description`.
            public var description: Swift.String?
            /// Whether this variable is hidden when publishing the current file as a library.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableUpdate/hiddenFromPublishing`.
            public var hiddenFromPublishing: Swift.Bool?
            /// An array of scopes in the UI where this variable is shown. Setting this property will show/hide this variable in the variable picker UI for different fields.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableUpdate/scopes`.
            public var scopes: [Components.Schemas.VariableScope]?
            /// - Remark: Generated from `#/components/schemas/VariableUpdate/codeSyntax`.
            public var codeSyntax: Components.Schemas.VariableCodeSyntax?
            /// Creates a new `VariableUpdate`.
            ///
            /// - Parameters:
            ///   - action: The action to perform for the variable.
            ///   - id: The id of the variable to update.
            ///   - name: The name of this variable.
            ///   - description: The description of this variable.
            ///   - hiddenFromPublishing: Whether this variable is hidden when publishing the current file as a library.
            ///   - scopes: An array of scopes in the UI where this variable is shown. Setting this property will show/hide this variable in the variable picker UI for different fields.
            ///   - codeSyntax:
            public init(
                action: Components.Schemas.VariableUpdate.actionPayload,
                id: Swift.String,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                hiddenFromPublishing: Swift.Bool? = nil,
                scopes: [Components.Schemas.VariableScope]? = nil,
                codeSyntax: Components.Schemas.VariableCodeSyntax? = nil
            ) {
                self.action = action
                self.id = id
                self.name = name
                self.description = description
                self.hiddenFromPublishing = hiddenFromPublishing
                self.scopes = scopes
                self.codeSyntax = codeSyntax
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case id
                case name
                case description
                case hiddenFromPublishing
                case scopes
                case codeSyntax
            }
        }
        /// An object that contains details about deleting a `Variable`.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableDelete`.
        public struct VariableDelete: Codable, Hashable, Sendable {
            /// The action to perform for the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableDelete/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case DELETE = "DELETE"
            }
            /// The action to perform for the variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableDelete/action`.
            public var action: Components.Schemas.VariableDelete.actionPayload
            /// The id of the variable to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableDelete/id`.
            public var id: Swift.String
            /// Creates a new `VariableDelete`.
            ///
            /// - Parameters:
            ///   - action: The action to perform for the variable.
            ///   - id: The id of the variable to delete.
            public init(
                action: Components.Schemas.VariableDelete.actionPayload,
                id: Swift.String
            ) {
                self.action = action
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case id
            }
        }
        /// - Remark: Generated from `#/components/schemas/VariableChange`.
        @frozen public enum VariableChange: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VariableChange/VariableCreate`.
            case CREATE(Components.Schemas.VariableCreate)
            /// - Remark: Generated from `#/components/schemas/VariableChange/VariableDelete`.
            case DELETE(Components.Schemas.VariableDelete)
            /// - Remark: Generated from `#/components/schemas/VariableChange/VariableUpdate`.
            case UPDATE(Components.Schemas.VariableUpdate)
            public enum CodingKeys: String, CodingKey {
                case action
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                let discriminator = try container.decode(
                    Swift.String.self,
                    forKey: .action
                )
                switch discriminator {
                case "CREATE":
                    self = .CREATE(try .init(from: decoder))
                case "DELETE":
                    self = .DELETE(try .init(from: decoder))
                case "UPDATE":
                    self = .UPDATE(try .init(from: decoder))
                default:
                    throw Swift.DecodingError.unknownOneOfDiscriminator(
                        discriminatorKey: CodingKeys.action,
                        discriminatorValue: discriminator,
                        codingPath: decoder.codingPath
                    )
                }
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .CREATE(value):
                    try value.encode(to: encoder)
                case let .DELETE(value):
                    try value.encode(to: encoder)
                case let .UPDATE(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// An object that represents a value for a given mode of a variable. All properties are required.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableModeValue`.
        public struct VariableModeValue: Codable, Hashable, Sendable {
            /// The target variable. You can use the temporary id of a variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeValue/variableId`.
            public var variableId: Swift.String
            /// Must correspond to a mode in the variable collection that contains the target variable.
            ///
            /// - Remark: Generated from `#/components/schemas/VariableModeValue/modeId`.
            public var modeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/VariableModeValue/value`.
            public var value: Components.Schemas.VariableValue
            /// Creates a new `VariableModeValue`.
            ///
            /// - Parameters:
            ///   - variableId: The target variable. You can use the temporary id of a variable.
            ///   - modeId: Must correspond to a mode in the variable collection that contains the target variable.
            ///   - value:
            public init(
                variableId: Swift.String,
                modeId: Swift.String,
                value: Components.Schemas.VariableValue
            ) {
                self.variableId = variableId
                self.modeId = modeId
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case variableId
                case modeId
                case value
            }
        }
        /// The value for the variable. The value must match the variable's type. If setting to a variable alias, the alias must resolve to this type.
        ///
        /// - Remark: Generated from `#/components/schemas/VariableValue`.
        @frozen public enum VariableValue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VariableValue/case1`.
            case case1(Swift.Bool)
            /// - Remark: Generated from `#/components/schemas/VariableValue/case2`.
            case case2(Swift.Double)
            /// - Remark: Generated from `#/components/schemas/VariableValue/case3`.
            case case3(Swift.String)
            /// - Remark: Generated from `#/components/schemas/VariableValue/case4`.
            case RGB(Components.Schemas.RGB)
            /// - Remark: Generated from `#/components/schemas/VariableValue/case5`.
            case RGBA(Components.Schemas.RGBA)
            /// - Remark: Generated from `#/components/schemas/VariableValue/case6`.
            case VariableAlias(Components.Schemas.VariableAlias)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .RGB(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .RGBA(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .VariableAlias(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case3(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .RGB(value):
                    try value.encode(to: encoder)
                case let .RGBA(value):
                    try value.encode(to: encoder)
                case let .VariableAlias(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// A dev resource in a file
        ///
        /// - Remark: Generated from `#/components/schemas/DevResource`.
        public struct DevResource: Codable, Hashable, Sendable {
            /// Unique identifier of the dev resource
            ///
            /// - Remark: Generated from `#/components/schemas/DevResource/id`.
            public var id: Swift.String
            /// The name of the dev resource.
            ///
            /// - Remark: Generated from `#/components/schemas/DevResource/name`.
            public var name: Swift.String
            /// The URL of the dev resource.
            ///
            /// - Remark: Generated from `#/components/schemas/DevResource/url`.
            public var url: Swift.String
            /// The file key where the dev resource belongs.
            ///
            /// - Remark: Generated from `#/components/schemas/DevResource/file_key`.
            public var file_key: Swift.String
            /// The target node to attach the dev resource to.
            ///
            /// - Remark: Generated from `#/components/schemas/DevResource/node_id`.
            public var node_id: Swift.String
            /// Creates a new `DevResource`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the dev resource
            ///   - name: The name of the dev resource.
            ///   - url: The URL of the dev resource.
            ///   - file_key: The file key where the dev resource belongs.
            ///   - node_id: The target node to attach the dev resource to.
            public init(
                id: Swift.String,
                name: Swift.String,
                url: Swift.String,
                file_key: Swift.String,
                node_id: Swift.String
            ) {
                self.id = id
                self.name = name
                self.url = url
                self.file_key = file_key
                self.node_id = node_id
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case url
                case file_key
                case node_id
            }
        }
        /// Library analytics actions data broken down by component.
        ///
        /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByComponent`.
        public struct LibraryAnalyticsActionsByComponent: Codable, Hashable, Sendable {
            /// The date in ISO 8601 format. e.g. 2023-12-13
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByComponent/week`.
            public var week: Swift.String
            /// Unique, stable id of the component.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByComponent/component_key`.
            public var component_key: Swift.String
            /// Name of the component.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByComponent/component_name`.
            public var component_name: Swift.String
            /// The number of detach events for this period.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByComponent/detachments`.
            public var detachments: Swift.Double
            /// The number of insertion events for this period.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByComponent/insertions`.
            public var insertions: Swift.Double
            /// Creates a new `LibraryAnalyticsActionsByComponent`.
            ///
            /// - Parameters:
            ///   - week: The date in ISO 8601 format. e.g. 2023-12-13
            ///   - component_key: Unique, stable id of the component.
            ///   - component_name: Name of the component.
            ///   - detachments: The number of detach events for this period.
            ///   - insertions: The number of insertion events for this period.
            public init(
                week: Swift.String,
                component_key: Swift.String,
                component_name: Swift.String,
                detachments: Swift.Double,
                insertions: Swift.Double
            ) {
                self.week = week
                self.component_key = component_key
                self.component_name = component_name
                self.detachments = detachments
                self.insertions = insertions
            }
            public enum CodingKeys: String, CodingKey {
                case week
                case component_key
                case component_name
                case detachments
                case insertions
            }
        }
        /// Library analytics action data broken down by team.
        ///
        /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByTeam`.
        public struct LibraryAnalyticsActionsByTeam: Codable, Hashable, Sendable {
            /// The date in ISO 8601 format. e.g. 2023-12-13
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByTeam/week`.
            public var week: Swift.String
            /// The name of the team using the library.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByTeam/team_name`.
            public var team_name: Swift.String
            /// The name of the workspace that the team belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByTeam/workspace_name`.
            public var workspace_name: Swift.String?
            /// The number of detach events for this period.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByTeam/detachments`.
            public var detachments: Swift.Double
            /// The number of insertion events for this period.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsActionsByTeam/insertions`.
            public var insertions: Swift.Double
            /// Creates a new `LibraryAnalyticsActionsByTeam`.
            ///
            /// - Parameters:
            ///   - week: The date in ISO 8601 format. e.g. 2023-12-13
            ///   - team_name: The name of the team using the library.
            ///   - workspace_name: The name of the workspace that the team belongs to.
            ///   - detachments: The number of detach events for this period.
            ///   - insertions: The number of insertion events for this period.
            public init(
                week: Swift.String,
                team_name: Swift.String,
                workspace_name: Swift.String? = nil,
                detachments: Swift.Double,
                insertions: Swift.Double
            ) {
                self.week = week
                self.team_name = team_name
                self.workspace_name = workspace_name
                self.detachments = detachments
                self.insertions = insertions
            }
            public enum CodingKeys: String, CodingKey {
                case week
                case team_name
                case workspace_name
                case detachments
                case insertions
            }
        }
        /// Library analytics usage data broken down by component.
        ///
        /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByComponent`.
        public struct LibraryAnalyticsUsagesByComponent: Codable, Hashable, Sendable {
            /// Unique, stable id of the component.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByComponent/component_key`.
            public var component_key: Swift.String
            /// Name of the component.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByComponent/component_name`.
            public var component_name: Swift.String
            /// The number of instances of the component within the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByComponent/num_instances`.
            public var num_instances: Swift.Double
            /// The number of teams using the component within the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByComponent/num_teams_using`.
            public var num_teams_using: Swift.Double
            /// The number of files using the component within the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByComponent/num_files_using`.
            public var num_files_using: Swift.Double
            /// Creates a new `LibraryAnalyticsUsagesByComponent`.
            ///
            /// - Parameters:
            ///   - component_key: Unique, stable id of the component.
            ///   - component_name: Name of the component.
            ///   - num_instances: The number of instances of the component within the organization.
            ///   - num_teams_using: The number of teams using the component within the organization.
            ///   - num_files_using: The number of files using the component within the organization.
            public init(
                component_key: Swift.String,
                component_name: Swift.String,
                num_instances: Swift.Double,
                num_teams_using: Swift.Double,
                num_files_using: Swift.Double
            ) {
                self.component_key = component_key
                self.component_name = component_name
                self.num_instances = num_instances
                self.num_teams_using = num_teams_using
                self.num_files_using = num_files_using
            }
            public enum CodingKeys: String, CodingKey {
                case component_key
                case component_name
                case num_instances
                case num_teams_using
                case num_files_using
            }
        }
        /// Library analytics usage data broken down by file.
        ///
        /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByFile`.
        public struct LibraryAnalyticsUsagesByFile: Codable, Hashable, Sendable {
            /// The name of the file using the library.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByFile/file_name`.
            public var file_name: Swift.String
            /// The name of the team the file belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByFile/team_name`.
            public var team_name: Swift.String
            /// The name of the workspace that the file belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByFile/workspace_name`.
            public var workspace_name: Swift.String?
            /// The number of component instances from the library used within the file.
            ///
            /// - Remark: Generated from `#/components/schemas/LibraryAnalyticsUsagesByFile/num_instances`.
            public var num_instances: Swift.Double
            /// Creates a new `LibraryAnalyticsUsagesByFile`.
            ///
            /// - Parameters:
            ///   - file_name: The name of the file using the library.
            ///   - team_name: The name of the team the file belongs to.
            ///   - workspace_name: The name of the workspace that the file belongs to.
            ///   - num_instances: The number of component instances from the library used within the file.
            public init(
                file_name: Swift.String,
                team_name: Swift.String,
                workspace_name: Swift.String? = nil,
                num_instances: Swift.Double
            ) {
                self.file_name = file_name
                self.team_name = team_name
                self.workspace_name = workspace_name
                self.num_instances = num_instances
            }
            public enum CodingKeys: String, CodingKey {
                case file_name
                case team_name
                case workspace_name
                case num_instances
            }
        }
        /// If pagination is needed due to the length of the response, identifies the next and previous pages.
        ///
        /// - Remark: Generated from `#/components/schemas/ResponsePagination`.
        public struct ResponsePagination: Codable, Hashable, Sendable {
            /// A URL that calls the previous page of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/ResponsePagination/prev_page`.
            public var prev_page: Swift.String?
            /// A URL that calls the next page of the response.
            ///
            /// - Remark: Generated from `#/components/schemas/ResponsePagination/next_page`.
            public var next_page: Swift.String?
            /// Creates a new `ResponsePagination`.
            ///
            /// - Parameters:
            ///   - prev_page: A URL that calls the previous page of the response.
            ///   - next_page: A URL that calls the next page of the response.
            public init(
                prev_page: Swift.String? = nil,
                next_page: Swift.String? = nil
            ) {
                self.prev_page = prev_page
                self.next_page = next_page
            }
            public enum CodingKeys: String, CodingKey {
                case prev_page
                case next_page
            }
        }
        /// Pagination cursor
        ///
        /// - Remark: Generated from `#/components/schemas/ResponseCursor`.
        public struct ResponseCursor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ResponseCursor/before`.
            public var before: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ResponseCursor/after`.
            public var after: Swift.Double?
            /// Creates a new `ResponseCursor`.
            ///
            /// - Parameters:
            ///   - before:
            ///   - after:
            public init(
                before: Swift.Double? = nil,
                after: Swift.Double? = nil
            ) {
                self.before = before
                self.after = after
            }
            public enum CodingKeys: String, CodingKey {
                case before
                case after
            }
        }
        /// A response indicating an error occurred.
        ///
        /// - Remark: Generated from `#/components/schemas/ErrorResponsePayloadWithErrMessage`.
        public struct ErrorResponsePayloadWithErrMessage: Codable, Hashable, Sendable {
            /// Status code
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponsePayloadWithErrMessage/status`.
            public var status: Swift.Double
            /// A string describing the error
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponsePayloadWithErrMessage/err`.
            public var err: Swift.String
            /// Creates a new `ErrorResponsePayloadWithErrMessage`.
            ///
            /// - Parameters:
            ///   - status: Status code
            ///   - err: A string describing the error
            public init(
                status: Swift.Double,
                err: Swift.String
            ) {
                self.status = status
                self.err = err
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case err
            }
        }
        /// A response indicating an error occurred.
        ///
        /// - Remark: Generated from `#/components/schemas/ErrorResponsePayloadWithErrorBoolean`.
        public struct ErrorResponsePayloadWithErrorBoolean: Codable, Hashable, Sendable {
            /// For erroneous requests, this value is always `true`.
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponsePayloadWithErrorBoolean/error`.
            public var error: Swift.Bool
            /// Status code
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponsePayloadWithErrorBoolean/status`.
            public var status: Swift.Double
            /// A string describing the error
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponsePayloadWithErrorBoolean/message`.
            public var message: Swift.String
            /// Creates a new `ErrorResponsePayloadWithErrorBoolean`.
            ///
            /// - Parameters:
            ///   - error: For erroneous requests, this value is always `true`.
            ///   - status: Status code
            ///   - message: A string describing the error
            public init(
                error: Swift.Bool,
                status: Swift.Double,
                message: Swift.String
            ) {
                self.error = error
                self.status = status
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case status
                case message
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct GetFileResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetFileResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the file as it appears in the editor.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/name`.
                    public var name: Swift.String
                    /// The role of the user making the API request in relation to the file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/role`.
                    @frozen public enum rolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case owner = "owner"
                        case editor = "editor"
                        case viewer = "viewer"
                    }
                    /// The role of the user making the API request in relation to the file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/role`.
                    public var role: Components.Responses.GetFileResponse.Body.jsonPayload.rolePayload
                    /// The UTC ISO 8601 time at which the file was last modified.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/lastModified`.
                    public var lastModified: Foundation.Date
                    /// The type of editor associated with this file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/editorType`.
                    @frozen public enum editorTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case figma = "figma"
                        case figjam = "figjam"
                    }
                    /// The type of editor associated with this file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/editorType`.
                    public var editorType: Components.Responses.GetFileResponse.Body.jsonPayload.editorTypePayload
                    /// A URL to a thumbnail image of the file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/thumbnailUrl`.
                    public var thumbnailUrl: Swift.String?
                    /// The version number of the file. This number is incremented when a file is modified and can be used to check if the file has changed between requests.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/version`.
                    public var version: Swift.String
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/document`.
                    public var document: Components.Schemas.DocumentNode
                    /// A mapping from component IDs to component metadata.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/components`.
                    public struct componentsPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: [String: Components.Schemas.Component]
                        /// Creates a new `componentsPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: [String: Components.Schemas.Component] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// A mapping from component IDs to component metadata.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/components`.
                    public var components: Components.Responses.GetFileResponse.Body.jsonPayload.componentsPayload
                    /// A mapping from component set IDs to component set metadata.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/componentSets`.
                    public struct componentSetsPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: [String: Components.Schemas.ComponentSet]
                        /// Creates a new `componentSetsPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: [String: Components.Schemas.ComponentSet] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// A mapping from component set IDs to component set metadata.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/componentSets`.
                    public var componentSets: Components.Responses.GetFileResponse.Body.jsonPayload.componentSetsPayload
                    /// The version of the file schema that this file uses.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/schemaVersion`.
                    public var schemaVersion: Swift.Double
                    /// A mapping from style IDs to style metadata.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/styles`.
                    public struct stylesPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: [String: Components.Schemas.Style]
                        /// Creates a new `stylesPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: [String: Components.Schemas.Style] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// A mapping from style IDs to style metadata.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/styles`.
                    public var styles: Components.Responses.GetFileResponse.Body.jsonPayload.stylesPayload
                    /// The key of the main file for this file. If present, this file is a component or component set.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/mainFileKey`.
                    public var mainFileKey: Swift.String?
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/branchesPayload`.
                    public struct branchesPayloadPayload: Codable, Hashable, Sendable {
                        /// The key of the branch.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/branchesPayload/key`.
                        public var key: Swift.String
                        /// The name of the branch.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/branchesPayload/name`.
                        public var name: Swift.String
                        /// A URL to a thumbnail image of the branch.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/branchesPayload/thumbnail_url`.
                        public var thumbnail_url: Swift.String
                        /// The UTC ISO 8601 time at which the branch was last modified.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/branchesPayload/last_modified`.
                        public var last_modified: Foundation.Date
                        /// Creates a new `branchesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - key: The key of the branch.
                        ///   - name: The name of the branch.
                        ///   - thumbnail_url: A URL to a thumbnail image of the branch.
                        ///   - last_modified: The UTC ISO 8601 time at which the branch was last modified.
                        public init(
                            key: Swift.String,
                            name: Swift.String,
                            thumbnail_url: Swift.String,
                            last_modified: Foundation.Date
                        ) {
                            self.key = key
                            self.name = name
                            self.thumbnail_url = thumbnail_url
                            self.last_modified = last_modified
                        }
                        public enum CodingKeys: String, CodingKey {
                            case key
                            case name
                            case thumbnail_url
                            case last_modified
                        }
                    }
                    /// A list of branches for this file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/branches`.
                    public typealias branchesPayload = [Components.Responses.GetFileResponse.Body.jsonPayload.branchesPayloadPayload]
                    /// A list of branches for this file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileResponse/content/json/branches`.
                    public var branches: Components.Responses.GetFileResponse.Body.jsonPayload.branchesPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the file as it appears in the editor.
                    ///   - role: The role of the user making the API request in relation to the file.
                    ///   - lastModified: The UTC ISO 8601 time at which the file was last modified.
                    ///   - editorType: The type of editor associated with this file.
                    ///   - thumbnailUrl: A URL to a thumbnail image of the file.
                    ///   - version: The version number of the file. This number is incremented when a file is modified and can be used to check if the file has changed between requests.
                    ///   - document:
                    ///   - components: A mapping from component IDs to component metadata.
                    ///   - componentSets: A mapping from component set IDs to component set metadata.
                    ///   - schemaVersion: The version of the file schema that this file uses.
                    ///   - styles: A mapping from style IDs to style metadata.
                    ///   - mainFileKey: The key of the main file for this file. If present, this file is a component or component set.
                    ///   - branches: A list of branches for this file.
                    public init(
                        name: Swift.String,
                        role: Components.Responses.GetFileResponse.Body.jsonPayload.rolePayload,
                        lastModified: Foundation.Date,
                        editorType: Components.Responses.GetFileResponse.Body.jsonPayload.editorTypePayload,
                        thumbnailUrl: Swift.String? = nil,
                        version: Swift.String,
                        document: Components.Schemas.DocumentNode,
                        components: Components.Responses.GetFileResponse.Body.jsonPayload.componentsPayload,
                        componentSets: Components.Responses.GetFileResponse.Body.jsonPayload.componentSetsPayload,
                        schemaVersion: Swift.Double,
                        styles: Components.Responses.GetFileResponse.Body.jsonPayload.stylesPayload,
                        mainFileKey: Swift.String? = nil,
                        branches: Components.Responses.GetFileResponse.Body.jsonPayload.branchesPayload? = nil
                    ) {
                        self.name = name
                        self.role = role
                        self.lastModified = lastModified
                        self.editorType = editorType
                        self.thumbnailUrl = thumbnailUrl
                        self.version = version
                        self.document = document
                        self.components = components
                        self.componentSets = componentSets
                        self.schemaVersion = schemaVersion
                        self.styles = styles
                        self.mainFileKey = mainFileKey
                        self.branches = branches
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case role
                        case lastModified
                        case editorType
                        case thumbnailUrl
                        case version
                        case document
                        case components
                        case componentSets
                        case schemaVersion
                        case styles
                        case mainFileKey
                        case branches
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetFileResponse/content/application\/json`.
                case json(Components.Responses.GetFileResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetFileResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetFileResponse.Body
            /// Creates a new `GetFileResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetFileResponse.Body) {
                self.body = body
            }
        }
        public struct GetFileNodesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the file as it appears in the editor.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/name`.
                    public var name: Swift.String
                    /// The role of the user making the API request in relation to the file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/role`.
                    @frozen public enum rolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case owner = "owner"
                        case editor = "editor"
                        case viewer = "viewer"
                    }
                    /// The role of the user making the API request in relation to the file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/role`.
                    public var role: Components.Responses.GetFileNodesResponse.Body.jsonPayload.rolePayload
                    /// The UTC ISO 8601 time at which the file was last modified.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/lastModified`.
                    public var lastModified: Foundation.Date
                    /// The type of editor associated with this file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/editorType`.
                    @frozen public enum editorTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case figma = "figma"
                        case figjam = "figjam"
                    }
                    /// The type of editor associated with this file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/editorType`.
                    public var editorType: Components.Responses.GetFileNodesResponse.Body.jsonPayload.editorTypePayload
                    /// A URL to a thumbnail image of the file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/thumbnailUrl`.
                    public var thumbnailUrl: Swift.String
                    /// The version number of the file. This number is incremented when a file is modified and can be used to check if the file has changed between requests.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/version`.
                    public var version: Swift.String
                    /// A mapping from node IDs to node metadata.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes`.
                    public struct nodesPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes/additionalProperties`.
                        public struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes/additionalProperties/document`.
                            public var document: Components.Schemas.Node
                            /// A mapping from component IDs to component metadata.
                            ///
                            /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes/additionalProperties/components`.
                            public struct componentsPayload: Codable, Hashable, Sendable {
                                /// A container of undocumented properties.
                                public var additionalProperties: [String: Components.Schemas.Component]
                                /// Creates a new `componentsPayload`.
                                ///
                                /// - Parameters:
                                ///   - additionalProperties: A container of undocumented properties.
                                public init(additionalProperties: [String: Components.Schemas.Component] = .init()) {
                                    self.additionalProperties = additionalProperties
                                }
                                public init(from decoder: any Decoder) throws {
                                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                                }
                                public func encode(to encoder: any Encoder) throws {
                                    try encoder.encodeAdditionalProperties(additionalProperties)
                                }
                            }
                            /// A mapping from component IDs to component metadata.
                            ///
                            /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes/additionalProperties/components`.
                            public var components: Components.Responses.GetFileNodesResponse.Body.jsonPayload.nodesPayload.additionalPropertiesPayload.componentsPayload
                            /// A mapping from component set IDs to component set metadata.
                            ///
                            /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes/additionalProperties/componentSets`.
                            public struct componentSetsPayload: Codable, Hashable, Sendable {
                                /// A container of undocumented properties.
                                public var additionalProperties: [String: Components.Schemas.ComponentSet]
                                /// Creates a new `componentSetsPayload`.
                                ///
                                /// - Parameters:
                                ///   - additionalProperties: A container of undocumented properties.
                                public init(additionalProperties: [String: Components.Schemas.ComponentSet] = .init()) {
                                    self.additionalProperties = additionalProperties
                                }
                                public init(from decoder: any Decoder) throws {
                                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                                }
                                public func encode(to encoder: any Encoder) throws {
                                    try encoder.encodeAdditionalProperties(additionalProperties)
                                }
                            }
                            /// A mapping from component set IDs to component set metadata.
                            ///
                            /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes/additionalProperties/componentSets`.
                            public var componentSets: Components.Responses.GetFileNodesResponse.Body.jsonPayload.nodesPayload.additionalPropertiesPayload.componentSetsPayload
                            /// The version of the file schema that this file uses.
                            ///
                            /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes/additionalProperties/schemaVersion`.
                            public var schemaVersion: Swift.Double
                            /// A mapping from style IDs to style metadata.
                            ///
                            /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes/additionalProperties/styles`.
                            public struct stylesPayload: Codable, Hashable, Sendable {
                                /// A container of undocumented properties.
                                public var additionalProperties: [String: Components.Schemas.Style]
                                /// Creates a new `stylesPayload`.
                                ///
                                /// - Parameters:
                                ///   - additionalProperties: A container of undocumented properties.
                                public init(additionalProperties: [String: Components.Schemas.Style] = .init()) {
                                    self.additionalProperties = additionalProperties
                                }
                                public init(from decoder: any Decoder) throws {
                                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                                }
                                public func encode(to encoder: any Encoder) throws {
                                    try encoder.encodeAdditionalProperties(additionalProperties)
                                }
                            }
                            /// A mapping from style IDs to style metadata.
                            ///
                            /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes/additionalProperties/styles`.
                            public var styles: Components.Responses.GetFileNodesResponse.Body.jsonPayload.nodesPayload.additionalPropertiesPayload.stylesPayload
                            /// Creates a new `additionalPropertiesPayload`.
                            ///
                            /// - Parameters:
                            ///   - document:
                            ///   - components: A mapping from component IDs to component metadata.
                            ///   - componentSets: A mapping from component set IDs to component set metadata.
                            ///   - schemaVersion: The version of the file schema that this file uses.
                            ///   - styles: A mapping from style IDs to style metadata.
                            public init(
                                document: Components.Schemas.Node,
                                components: Components.Responses.GetFileNodesResponse.Body.jsonPayload.nodesPayload.additionalPropertiesPayload.componentsPayload,
                                componentSets: Components.Responses.GetFileNodesResponse.Body.jsonPayload.nodesPayload.additionalPropertiesPayload.componentSetsPayload,
                                schemaVersion: Swift.Double,
                                styles: Components.Responses.GetFileNodesResponse.Body.jsonPayload.nodesPayload.additionalPropertiesPayload.stylesPayload
                            ) {
                                self.document = document
                                self.components = components
                                self.componentSets = componentSets
                                self.schemaVersion = schemaVersion
                                self.styles = styles
                            }
                            public enum CodingKeys: String, CodingKey {
                                case document
                                case components
                                case componentSets
                                case schemaVersion
                                case styles
                            }
                        }
                        /// A container of undocumented properties.
                        public var additionalProperties: [String: Components.Responses.GetFileNodesResponse.Body.jsonPayload.nodesPayload.additionalPropertiesPayload]
                        /// Creates a new `nodesPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: [String: Components.Responses.GetFileNodesResponse.Body.jsonPayload.nodesPayload.additionalPropertiesPayload] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// A mapping from node IDs to node metadata.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/json/nodes`.
                    public var nodes: Components.Responses.GetFileNodesResponse.Body.jsonPayload.nodesPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the file as it appears in the editor.
                    ///   - role: The role of the user making the API request in relation to the file.
                    ///   - lastModified: The UTC ISO 8601 time at which the file was last modified.
                    ///   - editorType: The type of editor associated with this file.
                    ///   - thumbnailUrl: A URL to a thumbnail image of the file.
                    ///   - version: The version number of the file. This number is incremented when a file is modified and can be used to check if the file has changed between requests.
                    ///   - nodes: A mapping from node IDs to node metadata.
                    public init(
                        name: Swift.String,
                        role: Components.Responses.GetFileNodesResponse.Body.jsonPayload.rolePayload,
                        lastModified: Foundation.Date,
                        editorType: Components.Responses.GetFileNodesResponse.Body.jsonPayload.editorTypePayload,
                        thumbnailUrl: Swift.String,
                        version: Swift.String,
                        nodes: Components.Responses.GetFileNodesResponse.Body.jsonPayload.nodesPayload
                    ) {
                        self.name = name
                        self.role = role
                        self.lastModified = lastModified
                        self.editorType = editorType
                        self.thumbnailUrl = thumbnailUrl
                        self.version = version
                        self.nodes = nodes
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case role
                        case lastModified
                        case editorType
                        case thumbnailUrl
                        case version
                        case nodes
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetFileNodesResponse/content/application\/json`.
                case json(Components.Responses.GetFileNodesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetFileNodesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetFileNodesResponse.Body
            /// Creates a new `GetFileNodesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetFileNodesResponse.Body) {
                self.body = body
            }
        }
        public struct GetImagesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetImagesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetImagesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// For successful requests, this value is always `null`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetImagesResponse/content/json/err`.
                    public var err: OpenAPIRuntime.OpenAPIValueContainer
                    /// A map from node IDs to URLs of the rendered images.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetImagesResponse/content/json/images`.
                    public struct imagesPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: [String: Swift.String?]
                        /// Creates a new `imagesPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: [String: Swift.String?] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// A map from node IDs to URLs of the rendered images.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetImagesResponse/content/json/images`.
                    public var images: Components.Responses.GetImagesResponse.Body.jsonPayload.imagesPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - err: For successful requests, this value is always `null`.
                    ///   - images: A map from node IDs to URLs of the rendered images.
                    public init(
                        err: OpenAPIRuntime.OpenAPIValueContainer,
                        images: Components.Responses.GetImagesResponse.Body.jsonPayload.imagesPayload
                    ) {
                        self.err = err
                        self.images = images
                    }
                    public enum CodingKeys: String, CodingKey {
                        case err
                        case images
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetImagesResponse/content/application\/json`.
                case json(Components.Responses.GetImagesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetImagesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetImagesResponse.Body
            /// Creates a new `GetImagesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetImagesResponse.Body) {
                self.body = body
            }
        }
        public struct GetImageFillsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetImageFillsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetImageFillsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetImageFillsResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// Status code
                    ///
                    /// - Remark: Generated from `#/components/responses/GetImageFillsResponse/content/json/status`.
                    public var status: Swift.Double
                    /// - Remark: Generated from `#/components/responses/GetImageFillsResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// A map of image references to URLs of the image fills.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetImageFillsResponse/content/json/meta/images`.
                        public struct imagesPayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: [String: Swift.String]
                            /// Creates a new `imagesPayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: [String: Swift.String] = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// A map of image references to URLs of the image fills.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetImageFillsResponse/content/json/meta/images`.
                        public var images: Components.Responses.GetImageFillsResponse.Body.jsonPayload.metaPayload.imagesPayload
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - images: A map of image references to URLs of the image fills.
                        public init(images: Components.Responses.GetImageFillsResponse.Body.jsonPayload.metaPayload.imagesPayload) {
                            self.images = images
                        }
                        public enum CodingKeys: String, CodingKey {
                            case images
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetImageFillsResponse/content/json/meta`.
                    public var meta: Components.Responses.GetImageFillsResponse.Body.jsonPayload.metaPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - status: Status code
                    ///   - meta:
                    public init(
                        error: Swift.Bool,
                        status: Swift.Double,
                        meta: Components.Responses.GetImageFillsResponse.Body.jsonPayload.metaPayload
                    ) {
                        self.error = error
                        self.status = status
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case error
                        case status
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetImageFillsResponse/content/application\/json`.
                case json(Components.Responses.GetImageFillsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetImageFillsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetImageFillsResponse.Body
            /// Creates a new `GetImageFillsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetImageFillsResponse.Body) {
                self.body = body
            }
        }
        public struct GetTeamProjectsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetTeamProjectsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetTeamProjectsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The team's name.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetTeamProjectsResponse/content/json/name`.
                    public var name: Swift.String
                    /// An array of projects.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetTeamProjectsResponse/content/json/projects`.
                    public var projects: [Components.Schemas.Project]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The team's name.
                    ///   - projects: An array of projects.
                    public init(
                        name: Swift.String,
                        projects: [Components.Schemas.Project]
                    ) {
                        self.name = name
                        self.projects = projects
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case projects
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetTeamProjectsResponse/content/application\/json`.
                case json(Components.Responses.GetTeamProjectsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetTeamProjectsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetTeamProjectsResponse.Body
            /// Creates a new `GetTeamProjectsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetTeamProjectsResponse.Body) {
                self.body = body
            }
        }
        public struct GetProjectFilesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The project's name.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content/json/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content/json/filesPayload`.
                    public struct filesPayloadPayload: Codable, Hashable, Sendable {
                        /// The file's key.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content/json/filesPayload/key`.
                        public var key: Swift.String
                        /// The file's name.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content/json/filesPayload/name`.
                        public var name: Swift.String
                        /// The file's thumbnail URL.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content/json/filesPayload/thumbnail_url`.
                        public var thumbnail_url: Swift.String?
                        /// The UTC ISO 8601 time at which the file was last modified.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content/json/filesPayload/last_modified`.
                        public var last_modified: Foundation.Date
                        /// Creates a new `filesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - key: The file's key.
                        ///   - name: The file's name.
                        ///   - thumbnail_url: The file's thumbnail URL.
                        ///   - last_modified: The UTC ISO 8601 time at which the file was last modified.
                        public init(
                            key: Swift.String,
                            name: Swift.String,
                            thumbnail_url: Swift.String? = nil,
                            last_modified: Foundation.Date
                        ) {
                            self.key = key
                            self.name = name
                            self.thumbnail_url = thumbnail_url
                            self.last_modified = last_modified
                        }
                        public enum CodingKeys: String, CodingKey {
                            case key
                            case name
                            case thumbnail_url
                            case last_modified
                        }
                    }
                    /// An array of files.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content/json/files`.
                    public typealias filesPayload = [Components.Responses.GetProjectFilesResponse.Body.jsonPayload.filesPayloadPayload]
                    /// An array of files.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content/json/files`.
                    public var files: Components.Responses.GetProjectFilesResponse.Body.jsonPayload.filesPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The project's name.
                    ///   - files: An array of files.
                    public init(
                        name: Swift.String,
                        files: Components.Responses.GetProjectFilesResponse.Body.jsonPayload.filesPayload
                    ) {
                        self.name = name
                        self.files = files
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case files
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetProjectFilesResponse/content/application\/json`.
                case json(Components.Responses.GetProjectFilesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetProjectFilesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetProjectFilesResponse.Body
            /// Creates a new `GetProjectFilesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetProjectFilesResponse.Body) {
                self.body = body
            }
        }
        public struct GetFileVersionsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetFileVersionsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetFileVersionsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of versions.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileVersionsResponse/content/json/versions`.
                    public var versions: [Components.Schemas.Version]
                    /// - Remark: Generated from `#/components/responses/GetFileVersionsResponse/content/json/pagination`.
                    public var pagination: Components.Schemas.ResponsePagination
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - versions: An array of versions.
                    ///   - pagination:
                    public init(
                        versions: [Components.Schemas.Version],
                        pagination: Components.Schemas.ResponsePagination
                    ) {
                        self.versions = versions
                        self.pagination = pagination
                    }
                    public enum CodingKeys: String, CodingKey {
                        case versions
                        case pagination
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetFileVersionsResponse/content/application\/json`.
                case json(Components.Responses.GetFileVersionsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetFileVersionsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetFileVersionsResponse.Body
            /// Creates a new `GetFileVersionsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetFileVersionsResponse.Body) {
                self.body = body
            }
        }
        public struct GetCommentsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetCommentsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetCommentsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of comments.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetCommentsResponse/content/json/comments`.
                    public var comments: [Components.Schemas.Comment]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - comments: An array of comments.
                    public init(comments: [Components.Schemas.Comment]) {
                        self.comments = comments
                    }
                    public enum CodingKeys: String, CodingKey {
                        case comments
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetCommentsResponse/content/application\/json`.
                case json(Components.Responses.GetCommentsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetCommentsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetCommentsResponse.Body
            /// Creates a new `GetCommentsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetCommentsResponse.Body) {
                self.body = body
            }
        }
        public struct PostCommentResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/PostCommentResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/PostCommentResponse/content/application\/json`.
                case json(Components.Schemas.Comment)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.Comment {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.PostCommentResponse.Body
            /// Creates a new `PostCommentResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.PostCommentResponse.Body) {
                self.body = body
            }
        }
        public struct DeleteCommentResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/DeleteCommentResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/DeleteCommentResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/DeleteCommentResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/DeleteCommentResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool
                    ) {
                        self.status = status
                        self.error = error
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                    }
                }
                /// - Remark: Generated from `#/components/responses/DeleteCommentResponse/content/application\/json`.
                case json(Components.Responses.DeleteCommentResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.DeleteCommentResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.DeleteCommentResponse.Body
            /// Creates a new `DeleteCommentResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.DeleteCommentResponse.Body) {
                self.body = body
            }
        }
        public struct GetCommentReactionsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetCommentReactionsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetCommentReactionsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of reactions.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetCommentReactionsResponse/content/json/reactions`.
                    public var reactions: [Components.Schemas.Reaction]
                    /// - Remark: Generated from `#/components/responses/GetCommentReactionsResponse/content/json/pagination`.
                    public var pagination: Components.Schemas.ResponsePagination
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - reactions: An array of reactions.
                    ///   - pagination:
                    public init(
                        reactions: [Components.Schemas.Reaction],
                        pagination: Components.Schemas.ResponsePagination
                    ) {
                        self.reactions = reactions
                        self.pagination = pagination
                    }
                    public enum CodingKeys: String, CodingKey {
                        case reactions
                        case pagination
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetCommentReactionsResponse/content/application\/json`.
                case json(Components.Responses.GetCommentReactionsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetCommentReactionsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetCommentReactionsResponse.Body
            /// Creates a new `GetCommentReactionsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetCommentReactionsResponse.Body) {
                self.body = body
            }
        }
        public struct PostCommentReactionResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/PostCommentReactionResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/PostCommentReactionResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/PostCommentReactionResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/PostCommentReactionResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool
                    ) {
                        self.status = status
                        self.error = error
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                    }
                }
                /// - Remark: Generated from `#/components/responses/PostCommentReactionResponse/content/application\/json`.
                case json(Components.Responses.PostCommentReactionResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.PostCommentReactionResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.PostCommentReactionResponse.Body
            /// Creates a new `PostCommentReactionResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.PostCommentReactionResponse.Body) {
                self.body = body
            }
        }
        public struct DeleteCommentReactionResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/DeleteCommentReactionResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/DeleteCommentReactionResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/DeleteCommentReactionResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/DeleteCommentReactionResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool
                    ) {
                        self.status = status
                        self.error = error
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                    }
                }
                /// - Remark: Generated from `#/components/responses/DeleteCommentReactionResponse/content/application\/json`.
                case json(Components.Responses.DeleteCommentReactionResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.DeleteCommentReactionResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.DeleteCommentReactionResponse.Body
            /// Creates a new `DeleteCommentReactionResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.DeleteCommentReactionResponse.Body) {
                self.body = body
            }
        }
        public struct GetMeResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetMeResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetMeResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/GetMeResponse/content/json/value1`.
                    public var value1: Components.Schemas.User
                    /// - Remark: Generated from `#/components/responses/GetMeResponse/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Email associated with the user's account. This property is only present on the /v1/me endpoint.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetMeResponse/content/json/value2/email`.
                        public var email: Swift.String
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - email: Email associated with the user's account. This property is only present on the /v1/me endpoint.
                        public init(email: Swift.String) {
                            self.email = email
                        }
                        public enum CodingKeys: String, CodingKey {
                            case email
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetMeResponse/content/json/value2`.
                    public var value2: Components.Responses.GetMeResponse.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.User,
                        value2: Components.Responses.GetMeResponse.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetMeResponse/content/application\/json`.
                case json(Components.Responses.GetMeResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetMeResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetMeResponse.Body
            /// Creates a new `GetMeResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetMeResponse.Body) {
                self.body = body
            }
        }
        public struct GetTeamComponentsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetTeamComponentsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetTeamComponentsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetTeamComponentsResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetTeamComponentsResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetTeamComponentsResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/GetTeamComponentsResponse/content/json/meta/components`.
                        public var components: [Components.Schemas.PublishedComponent]
                        /// - Remark: Generated from `#/components/responses/GetTeamComponentsResponse/content/json/meta/cursor`.
                        public var cursor: Components.Schemas.ResponseCursor?
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - components:
                        ///   - cursor:
                        public init(
                            components: [Components.Schemas.PublishedComponent],
                            cursor: Components.Schemas.ResponseCursor? = nil
                        ) {
                            self.components = components
                            self.cursor = cursor
                        }
                        public enum CodingKeys: String, CodingKey {
                            case components
                            case cursor
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetTeamComponentsResponse/content/json/meta`.
                    public var meta: Components.Responses.GetTeamComponentsResponse.Body.jsonPayload.metaPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Responses.GetTeamComponentsResponse.Body.jsonPayload.metaPayload
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetTeamComponentsResponse/content/application\/json`.
                case json(Components.Responses.GetTeamComponentsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetTeamComponentsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetTeamComponentsResponse.Body
            /// Creates a new `GetTeamComponentsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetTeamComponentsResponse.Body) {
                self.body = body
            }
        }
        public struct GetFileComponentsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetFileComponentsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetFileComponentsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileComponentsResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileComponentsResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetFileComponentsResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/GetFileComponentsResponse/content/json/meta/components`.
                        public var components: [Components.Schemas.PublishedComponent]
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - components:
                        public init(components: [Components.Schemas.PublishedComponent]) {
                            self.components = components
                        }
                        public enum CodingKeys: String, CodingKey {
                            case components
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetFileComponentsResponse/content/json/meta`.
                    public var meta: Components.Responses.GetFileComponentsResponse.Body.jsonPayload.metaPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Responses.GetFileComponentsResponse.Body.jsonPayload.metaPayload
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetFileComponentsResponse/content/application\/json`.
                case json(Components.Responses.GetFileComponentsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetFileComponentsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetFileComponentsResponse.Body
            /// Creates a new `GetFileComponentsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetFileComponentsResponse.Body) {
                self.body = body
            }
        }
        public struct GetComponentResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetComponentResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetComponentResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetComponentResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetComponentResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetComponentResponse/content/json/meta`.
                    public var meta: Components.Schemas.PublishedComponent
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Schemas.PublishedComponent
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetComponentResponse/content/application\/json`.
                case json(Components.Responses.GetComponentResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetComponentResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetComponentResponse.Body
            /// Creates a new `GetComponentResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetComponentResponse.Body) {
                self.body = body
            }
        }
        public struct GetTeamComponentSetsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetTeamComponentSetsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetTeamComponentSetsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetTeamComponentSetsResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetTeamComponentSetsResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetTeamComponentSetsResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/GetTeamComponentSetsResponse/content/json/meta/component_sets`.
                        public var component_sets: [Components.Schemas.PublishedComponentSet]
                        /// - Remark: Generated from `#/components/responses/GetTeamComponentSetsResponse/content/json/meta/cursor`.
                        public var cursor: Components.Schemas.ResponseCursor?
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - component_sets:
                        ///   - cursor:
                        public init(
                            component_sets: [Components.Schemas.PublishedComponentSet],
                            cursor: Components.Schemas.ResponseCursor? = nil
                        ) {
                            self.component_sets = component_sets
                            self.cursor = cursor
                        }
                        public enum CodingKeys: String, CodingKey {
                            case component_sets
                            case cursor
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetTeamComponentSetsResponse/content/json/meta`.
                    public var meta: Components.Responses.GetTeamComponentSetsResponse.Body.jsonPayload.metaPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Responses.GetTeamComponentSetsResponse.Body.jsonPayload.metaPayload
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetTeamComponentSetsResponse/content/application\/json`.
                case json(Components.Responses.GetTeamComponentSetsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetTeamComponentSetsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetTeamComponentSetsResponse.Body
            /// Creates a new `GetTeamComponentSetsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetTeamComponentSetsResponse.Body) {
                self.body = body
            }
        }
        public struct GetFileComponentSetsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetFileComponentSetsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetFileComponentSetsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileComponentSetsResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileComponentSetsResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetFileComponentSetsResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/GetFileComponentSetsResponse/content/json/meta/component_sets`.
                        public var component_sets: [Components.Schemas.PublishedComponentSet]
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - component_sets:
                        public init(component_sets: [Components.Schemas.PublishedComponentSet]) {
                            self.component_sets = component_sets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case component_sets
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetFileComponentSetsResponse/content/json/meta`.
                    public var meta: Components.Responses.GetFileComponentSetsResponse.Body.jsonPayload.metaPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Responses.GetFileComponentSetsResponse.Body.jsonPayload.metaPayload
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetFileComponentSetsResponse/content/application\/json`.
                case json(Components.Responses.GetFileComponentSetsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetFileComponentSetsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetFileComponentSetsResponse.Body
            /// Creates a new `GetFileComponentSetsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetFileComponentSetsResponse.Body) {
                self.body = body
            }
        }
        public struct GetComponentSetResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetComponentSetResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetComponentSetResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetComponentSetResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetComponentSetResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetComponentSetResponse/content/json/meta`.
                    public var meta: Components.Schemas.PublishedComponentSet
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Schemas.PublishedComponentSet
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetComponentSetResponse/content/application\/json`.
                case json(Components.Responses.GetComponentSetResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetComponentSetResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetComponentSetResponse.Body
            /// Creates a new `GetComponentSetResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetComponentSetResponse.Body) {
                self.body = body
            }
        }
        public struct GetTeamStylesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetTeamStylesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetTeamStylesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetTeamStylesResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetTeamStylesResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetTeamStylesResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/GetTeamStylesResponse/content/json/meta/styles`.
                        public var styles: [Components.Schemas.PublishedStyle]
                        /// - Remark: Generated from `#/components/responses/GetTeamStylesResponse/content/json/meta/cursor`.
                        public var cursor: Components.Schemas.ResponseCursor?
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - styles:
                        ///   - cursor:
                        public init(
                            styles: [Components.Schemas.PublishedStyle],
                            cursor: Components.Schemas.ResponseCursor? = nil
                        ) {
                            self.styles = styles
                            self.cursor = cursor
                        }
                        public enum CodingKeys: String, CodingKey {
                            case styles
                            case cursor
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetTeamStylesResponse/content/json/meta`.
                    public var meta: Components.Responses.GetTeamStylesResponse.Body.jsonPayload.metaPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Responses.GetTeamStylesResponse.Body.jsonPayload.metaPayload
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetTeamStylesResponse/content/application\/json`.
                case json(Components.Responses.GetTeamStylesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetTeamStylesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetTeamStylesResponse.Body
            /// Creates a new `GetTeamStylesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetTeamStylesResponse.Body) {
                self.body = body
            }
        }
        public struct GetFileStylesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetFileStylesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetFileStylesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileStylesResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetFileStylesResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetFileStylesResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/GetFileStylesResponse/content/json/meta/styles`.
                        public var styles: [Components.Schemas.PublishedStyle]
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - styles:
                        public init(styles: [Components.Schemas.PublishedStyle]) {
                            self.styles = styles
                        }
                        public enum CodingKeys: String, CodingKey {
                            case styles
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetFileStylesResponse/content/json/meta`.
                    public var meta: Components.Responses.GetFileStylesResponse.Body.jsonPayload.metaPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Responses.GetFileStylesResponse.Body.jsonPayload.metaPayload
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetFileStylesResponse/content/application\/json`.
                case json(Components.Responses.GetFileStylesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetFileStylesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetFileStylesResponse.Body
            /// Creates a new `GetFileStylesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetFileStylesResponse.Body) {
                self.body = body
            }
        }
        public struct GetStyleResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetStyleResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetStyleResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The status of the request.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetStyleResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetStyleResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetStyleResponse/content/json/meta`.
                    public var meta: Components.Schemas.PublishedStyle
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The status of the request.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Schemas.PublishedStyle
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetStyleResponse/content/application\/json`.
                case json(Components.Responses.GetStyleResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetStyleResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetStyleResponse.Body
            /// Creates a new `GetStyleResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetStyleResponse.Body) {
                self.body = body
            }
        }
        public struct PostWebhookResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/PostWebhookResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/PostWebhookResponse/content/application\/json`.
                case json(Components.Schemas.WebhookV2)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.WebhookV2 {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.PostWebhookResponse.Body
            /// Creates a new `PostWebhookResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.PostWebhookResponse.Body) {
                self.body = body
            }
        }
        public struct GetWebhookResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetWebhookResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetWebhookResponse/content/application\/json`.
                case json(Components.Schemas.WebhookV2)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.WebhookV2 {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetWebhookResponse.Body
            /// Creates a new `GetWebhookResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetWebhookResponse.Body) {
                self.body = body
            }
        }
        public struct PutWebhookResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/PutWebhookResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/PutWebhookResponse/content/application\/json`.
                case json(Components.Schemas.WebhookV2)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.WebhookV2 {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.PutWebhookResponse.Body
            /// Creates a new `PutWebhookResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.PutWebhookResponse.Body) {
                self.body = body
            }
        }
        public struct DeleteWebhookResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/DeleteWebhookResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/DeleteWebhookResponse/content/application\/json`.
                case json(Components.Schemas.WebhookV2)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.WebhookV2 {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.DeleteWebhookResponse.Body
            /// Creates a new `DeleteWebhookResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.DeleteWebhookResponse.Body) {
                self.body = body
            }
        }
        public struct GetTeamWebhooksResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetTeamWebhooksResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetTeamWebhooksResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of webhooks.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetTeamWebhooksResponse/content/json/webhooks`.
                    public var webhooks: [Components.Schemas.WebhookV2]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - webhooks: An array of webhooks.
                    public init(webhooks: [Components.Schemas.WebhookV2]) {
                        self.webhooks = webhooks
                    }
                    public enum CodingKeys: String, CodingKey {
                        case webhooks
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetTeamWebhooksResponse/content/application\/json`.
                case json(Components.Responses.GetTeamWebhooksResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetTeamWebhooksResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetTeamWebhooksResponse.Body
            /// Creates a new `GetTeamWebhooksResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetTeamWebhooksResponse.Body) {
                self.body = body
            }
        }
        public struct GetWebhookRequestsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetWebhookRequestsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetWebhookRequestsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of webhook requests.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetWebhookRequestsResponse/content/json/requests`.
                    public var requests: [Components.Schemas.WebhookV2Request]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - requests: An array of webhook requests.
                    public init(requests: [Components.Schemas.WebhookV2Request]) {
                        self.requests = requests
                    }
                    public enum CodingKeys: String, CodingKey {
                        case requests
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetWebhookRequestsResponse/content/application\/json`.
                case json(Components.Responses.GetWebhookRequestsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetWebhookRequestsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetWebhookRequestsResponse.Body
            /// Creates a new `GetWebhookRequestsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetWebhookRequestsResponse.Body) {
                self.body = body
            }
        }
        public struct GetActivityLogsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetActivityLogsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetActivityLogsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The response status code.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetActivityLogsResponse/content/json/status`.
                    public var status: Swift.Double?
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetActivityLogsResponse/content/json/error`.
                    public var error: Swift.Bool?
                    /// - Remark: Generated from `#/components/responses/GetActivityLogsResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// An array of activity logs sorted by timestamp in ascending order by default.
                        ///
                        /// - Remark: Generated from `#/components/responses/GetActivityLogsResponse/content/json/meta/activity_logs`.
                        public var activity_logs: [Components.Schemas.ActivityLog]?
                        /// Encodes the last event (the most recent event)
                        ///
                        /// - Remark: Generated from `#/components/responses/GetActivityLogsResponse/content/json/meta/cursor`.
                        public var cursor: Swift.String?
                        /// Whether there is a next page of events
                        ///
                        /// - Remark: Generated from `#/components/responses/GetActivityLogsResponse/content/json/meta/next_page`.
                        public var next_page: Swift.Bool?
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - activity_logs: An array of activity logs sorted by timestamp in ascending order by default.
                        ///   - cursor: Encodes the last event (the most recent event)
                        ///   - next_page: Whether there is a next page of events
                        public init(
                            activity_logs: [Components.Schemas.ActivityLog]? = nil,
                            cursor: Swift.String? = nil,
                            next_page: Swift.Bool? = nil
                        ) {
                            self.activity_logs = activity_logs
                            self.cursor = cursor
                            self.next_page = next_page
                        }
                        public enum CodingKeys: String, CodingKey {
                            case activity_logs
                            case cursor
                            case next_page
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetActivityLogsResponse/content/json/meta`.
                    public var meta: Components.Responses.GetActivityLogsResponse.Body.jsonPayload.metaPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The response status code.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double? = nil,
                        error: Swift.Bool? = nil,
                        meta: Components.Responses.GetActivityLogsResponse.Body.jsonPayload.metaPayload? = nil
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetActivityLogsResponse/content/application\/json`.
                case json(Components.Responses.GetActivityLogsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetActivityLogsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetActivityLogsResponse.Body
            /// Creates a new `GetActivityLogsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetActivityLogsResponse.Body) {
                self.body = body
            }
        }
        public struct GetPaymentsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetPaymentsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetPaymentsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The response status code.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetPaymentsResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetPaymentsResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetPaymentsResponse/content/json/meta`.
                    public var meta: Components.Schemas.PaymentInformation
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The response status code.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Schemas.PaymentInformation
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetPaymentsResponse/content/application\/json`.
                case json(Components.Responses.GetPaymentsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetPaymentsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetPaymentsResponse.Body
            /// Creates a new `GetPaymentsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetPaymentsResponse.Body) {
                self.body = body
            }
        }
        public struct GetLocalVariablesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The response status code.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// A map of variable ids to variables
                        ///
                        /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content/json/meta/variables`.
                        public struct variablesPayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: [String: Components.Schemas.LocalVariable]
                            /// Creates a new `variablesPayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: [String: Components.Schemas.LocalVariable] = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// A map of variable ids to variables
                        ///
                        /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content/json/meta/variables`.
                        public var variables: Components.Responses.GetLocalVariablesResponse.Body.jsonPayload.metaPayload.variablesPayload
                        /// A map of variable collection ids to variable collections
                        ///
                        /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content/json/meta/variableCollections`.
                        public struct variableCollectionsPayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: [String: Components.Schemas.LocalVariableCollection]
                            /// Creates a new `variableCollectionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: [String: Components.Schemas.LocalVariableCollection] = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// A map of variable collection ids to variable collections
                        ///
                        /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content/json/meta/variableCollections`.
                        public var variableCollections: Components.Responses.GetLocalVariablesResponse.Body.jsonPayload.metaPayload.variableCollectionsPayload
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - variables: A map of variable ids to variables
                        ///   - variableCollections: A map of variable collection ids to variable collections
                        public init(
                            variables: Components.Responses.GetLocalVariablesResponse.Body.jsonPayload.metaPayload.variablesPayload,
                            variableCollections: Components.Responses.GetLocalVariablesResponse.Body.jsonPayload.metaPayload.variableCollectionsPayload
                        ) {
                            self.variables = variables
                            self.variableCollections = variableCollections
                        }
                        public enum CodingKeys: String, CodingKey {
                            case variables
                            case variableCollections
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content/json/meta`.
                    public var meta: Components.Responses.GetLocalVariablesResponse.Body.jsonPayload.metaPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The response status code.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Responses.GetLocalVariablesResponse.Body.jsonPayload.metaPayload
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetLocalVariablesResponse/content/application\/json`.
                case json(Components.Responses.GetLocalVariablesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetLocalVariablesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetLocalVariablesResponse.Body
            /// Creates a new `GetLocalVariablesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetLocalVariablesResponse.Body) {
                self.body = body
            }
        }
        public struct GetPublishedVariablesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The response status code.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// A map of variable ids to variables
                        ///
                        /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content/json/meta/variables`.
                        public struct variablesPayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: [String: Components.Schemas.PublishedVariable]
                            /// Creates a new `variablesPayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: [String: Components.Schemas.PublishedVariable] = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// A map of variable ids to variables
                        ///
                        /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content/json/meta/variables`.
                        public var variables: Components.Responses.GetPublishedVariablesResponse.Body.jsonPayload.metaPayload.variablesPayload
                        /// A map of variable collection ids to variable collections
                        ///
                        /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content/json/meta/variableCollections`.
                        public struct variableCollectionsPayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: [String: Components.Schemas.PublishedVariableCollection]
                            /// Creates a new `variableCollectionsPayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: [String: Components.Schemas.PublishedVariableCollection] = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// A map of variable collection ids to variable collections
                        ///
                        /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content/json/meta/variableCollections`.
                        public var variableCollections: Components.Responses.GetPublishedVariablesResponse.Body.jsonPayload.metaPayload.variableCollectionsPayload
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - variables: A map of variable ids to variables
                        ///   - variableCollections: A map of variable collection ids to variable collections
                        public init(
                            variables: Components.Responses.GetPublishedVariablesResponse.Body.jsonPayload.metaPayload.variablesPayload,
                            variableCollections: Components.Responses.GetPublishedVariablesResponse.Body.jsonPayload.metaPayload.variableCollectionsPayload
                        ) {
                            self.variables = variables
                            self.variableCollections = variableCollections
                        }
                        public enum CodingKeys: String, CodingKey {
                            case variables
                            case variableCollections
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content/json/meta`.
                    public var meta: Components.Responses.GetPublishedVariablesResponse.Body.jsonPayload.metaPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The response status code.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Responses.GetPublishedVariablesResponse.Body.jsonPayload.metaPayload
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetPublishedVariablesResponse/content/application\/json`.
                case json(Components.Responses.GetPublishedVariablesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetPublishedVariablesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetPublishedVariablesResponse.Body
            /// Creates a new `GetPublishedVariablesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetPublishedVariablesResponse.Body) {
                self.body = body
            }
        }
        public struct PostVariablesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/PostVariablesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/PostVariablesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The response status code.
                    ///
                    /// - Remark: Generated from `#/components/responses/PostVariablesResponse/content/json/status`.
                    public var status: Swift.Double
                    /// For successful requests, this value is always `false`.
                    ///
                    /// - Remark: Generated from `#/components/responses/PostVariablesResponse/content/json/error`.
                    public var error: Swift.Bool
                    /// - Remark: Generated from `#/components/responses/PostVariablesResponse/content/json/meta`.
                    public struct metaPayload: Codable, Hashable, Sendable {
                        /// A map of temporary ids in the request to the real ids of the newly created objects
                        ///
                        /// - Remark: Generated from `#/components/responses/PostVariablesResponse/content/json/meta/tempIdToRealId`.
                        public struct tempIdToRealIdPayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: [String: Swift.String]
                            /// Creates a new `tempIdToRealIdPayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: [String: Swift.String] = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// A map of temporary ids in the request to the real ids of the newly created objects
                        ///
                        /// - Remark: Generated from `#/components/responses/PostVariablesResponse/content/json/meta/tempIdToRealId`.
                        public var tempIdToRealId: Components.Responses.PostVariablesResponse.Body.jsonPayload.metaPayload.tempIdToRealIdPayload
                        /// Creates a new `metaPayload`.
                        ///
                        /// - Parameters:
                        ///   - tempIdToRealId: A map of temporary ids in the request to the real ids of the newly created objects
                        public init(tempIdToRealId: Components.Responses.PostVariablesResponse.Body.jsonPayload.metaPayload.tempIdToRealIdPayload) {
                            self.tempIdToRealId = tempIdToRealId
                        }
                        public enum CodingKeys: String, CodingKey {
                            case tempIdToRealId
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/PostVariablesResponse/content/json/meta`.
                    public var meta: Components.Responses.PostVariablesResponse.Body.jsonPayload.metaPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - status: The response status code.
                    ///   - error: For successful requests, this value is always `false`.
                    ///   - meta:
                    public init(
                        status: Swift.Double,
                        error: Swift.Bool,
                        meta: Components.Responses.PostVariablesResponse.Body.jsonPayload.metaPayload
                    ) {
                        self.status = status
                        self.error = error
                        self.meta = meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case status
                        case error
                        case meta
                    }
                }
                /// - Remark: Generated from `#/components/responses/PostVariablesResponse/content/application\/json`.
                case json(Components.Responses.PostVariablesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.PostVariablesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.PostVariablesResponse.Body
            /// Creates a new `PostVariablesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.PostVariablesResponse.Body) {
                self.body = body
            }
        }
        public struct GetDevResourcesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetDevResourcesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetDevResourcesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of dev resources.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetDevResourcesResponse/content/json/dev_resources`.
                    public var dev_resources: [Components.Schemas.DevResource]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - dev_resources: An array of dev resources.
                    public init(dev_resources: [Components.Schemas.DevResource]) {
                        self.dev_resources = dev_resources
                    }
                    public enum CodingKeys: String, CodingKey {
                        case dev_resources
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetDevResourcesResponse/content/application\/json`.
                case json(Components.Responses.GetDevResourcesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetDevResourcesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetDevResourcesResponse.Body
            /// Creates a new `GetDevResourcesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetDevResourcesResponse.Body) {
                self.body = body
            }
        }
        public struct PostDevResourcesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/PostDevResourcesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/PostDevResourcesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of links created.
                    ///
                    /// - Remark: Generated from `#/components/responses/PostDevResourcesResponse/content/json/links_created`.
                    public var links_created: [Components.Schemas.DevResource]
                    /// - Remark: Generated from `#/components/responses/PostDevResourcesResponse/content/json/errorsPayload`.
                    public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                        /// The file key.
                        ///
                        /// - Remark: Generated from `#/components/responses/PostDevResourcesResponse/content/json/errorsPayload/file_key`.
                        public var file_key: Swift.String?
                        /// The node id.
                        ///
                        /// - Remark: Generated from `#/components/responses/PostDevResourcesResponse/content/json/errorsPayload/node_id`.
                        public var node_id: Swift.String?
                        /// The error message.
                        ///
                        /// - Remark: Generated from `#/components/responses/PostDevResourcesResponse/content/json/errorsPayload/error`.
                        public var error: Swift.String
                        /// Creates a new `errorsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - file_key: The file key.
                        ///   - node_id: The node id.
                        ///   - error: The error message.
                        public init(
                            file_key: Swift.String? = nil,
                            node_id: Swift.String? = nil,
                            error: Swift.String
                        ) {
                            self.file_key = file_key
                            self.node_id = node_id
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case file_key
                            case node_id
                            case error
                        }
                    }
                    /// An array of errors.
                    ///
                    /// - Remark: Generated from `#/components/responses/PostDevResourcesResponse/content/json/errors`.
                    public typealias errorsPayload = [Components.Responses.PostDevResourcesResponse.Body.jsonPayload.errorsPayloadPayload]
                    /// An array of errors.
                    ///
                    /// - Remark: Generated from `#/components/responses/PostDevResourcesResponse/content/json/errors`.
                    public var errors: Components.Responses.PostDevResourcesResponse.Body.jsonPayload.errorsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - links_created: An array of links created.
                    ///   - errors: An array of errors.
                    public init(
                        links_created: [Components.Schemas.DevResource],
                        errors: Components.Responses.PostDevResourcesResponse.Body.jsonPayload.errorsPayload? = nil
                    ) {
                        self.links_created = links_created
                        self.errors = errors
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links_created
                        case errors
                    }
                }
                /// - Remark: Generated from `#/components/responses/PostDevResourcesResponse/content/application\/json`.
                case json(Components.Responses.PostDevResourcesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.PostDevResourcesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.PostDevResourcesResponse.Body
            /// Creates a new `PostDevResourcesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.PostDevResourcesResponse.Body) {
                self.body = body
            }
        }
        public struct PutDevResourcesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/PutDevResourcesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/PutDevResourcesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of links updated.
                    ///
                    /// - Remark: Generated from `#/components/responses/PutDevResourcesResponse/content/json/links_updated`.
                    public var links_updated: [Components.Schemas.DevResource]?
                    /// - Remark: Generated from `#/components/responses/PutDevResourcesResponse/content/json/errorsPayload`.
                    public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                        /// The id of the dev resource.
                        ///
                        /// - Remark: Generated from `#/components/responses/PutDevResourcesResponse/content/json/errorsPayload/id`.
                        public var id: Swift.String?
                        /// The error message.
                        ///
                        /// - Remark: Generated from `#/components/responses/PutDevResourcesResponse/content/json/errorsPayload/error`.
                        public var error: Swift.String
                        /// Creates a new `errorsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - id: The id of the dev resource.
                        ///   - error: The error message.
                        public init(
                            id: Swift.String? = nil,
                            error: Swift.String
                        ) {
                            self.id = id
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case error
                        }
                    }
                    /// An array of errors.
                    ///
                    /// - Remark: Generated from `#/components/responses/PutDevResourcesResponse/content/json/errors`.
                    public typealias errorsPayload = [Components.Responses.PutDevResourcesResponse.Body.jsonPayload.errorsPayloadPayload]
                    /// An array of errors.
                    ///
                    /// - Remark: Generated from `#/components/responses/PutDevResourcesResponse/content/json/errors`.
                    public var errors: Components.Responses.PutDevResourcesResponse.Body.jsonPayload.errorsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - links_updated: An array of links updated.
                    ///   - errors: An array of errors.
                    public init(
                        links_updated: [Components.Schemas.DevResource]? = nil,
                        errors: Components.Responses.PutDevResourcesResponse.Body.jsonPayload.errorsPayload? = nil
                    ) {
                        self.links_updated = links_updated
                        self.errors = errors
                    }
                    public enum CodingKeys: String, CodingKey {
                        case links_updated
                        case errors
                    }
                }
                /// - Remark: Generated from `#/components/responses/PutDevResourcesResponse/content/application\/json`.
                case json(Components.Responses.PutDevResourcesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.PutDevResourcesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.PutDevResourcesResponse.Body
            /// Creates a new `PutDevResourcesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.PutDevResourcesResponse.Body) {
                self.body = body
            }
        }
        public struct DeleteDevResourceResponse: Sendable, Hashable {
            /// Creates a new `DeleteDevResourceResponse`.
            public init() {}
        }
        public struct GetLibraryAnalyticsActionsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsActionsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsActionsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of analytics data.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsActionsResponse/content/json/rows`.
                    @frozen public enum rowsPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsActionsResponse/content/json/rows/case1`.
                        case case1([Components.Schemas.LibraryAnalyticsActionsByComponent])
                        /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsActionsResponse/content/json/rows/case2`.
                        case case2([Components.Schemas.LibraryAnalyticsActionsByTeam])
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// An array of analytics data.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsActionsResponse/content/json/rows`.
                    public var rows: Components.Responses.GetLibraryAnalyticsActionsResponse.Body.jsonPayload.rowsPayload
                    /// Whether there is a next page of data that can be fetched.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsActionsResponse/content/json/next_page`.
                    public var next_page: Swift.Bool
                    /// The cursor to use to fetch the next page of data.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsActionsResponse/content/json/cursor`.
                    public var cursor: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - rows: An array of analytics data.
                    ///   - next_page: Whether there is a next page of data that can be fetched.
                    ///   - cursor: The cursor to use to fetch the next page of data.
                    public init(
                        rows: Components.Responses.GetLibraryAnalyticsActionsResponse.Body.jsonPayload.rowsPayload,
                        next_page: Swift.Bool,
                        cursor: Swift.String? = nil
                    ) {
                        self.rows = rows
                        self.next_page = next_page
                        self.cursor = cursor
                    }
                    public enum CodingKeys: String, CodingKey {
                        case rows
                        case next_page
                        case cursor
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsActionsResponse/content/application\/json`.
                case json(Components.Responses.GetLibraryAnalyticsActionsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetLibraryAnalyticsActionsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetLibraryAnalyticsActionsResponse.Body
            /// Creates a new `GetLibraryAnalyticsActionsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetLibraryAnalyticsActionsResponse.Body) {
                self.body = body
            }
        }
        public struct GetLibraryAnalyticsUsagesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsUsagesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsUsagesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of analytics data when breaking down usage by component.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsUsagesResponse/content/json/components`.
                    public var components: [Components.Schemas.LibraryAnalyticsUsagesByComponent]?
                    /// An array of analytics data when breaking down usage by file.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsUsagesResponse/content/json/files`.
                    public var files: [Components.Schemas.LibraryAnalyticsUsagesByFile]?
                    /// Whether there is a next page of data that can be fetched.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsUsagesResponse/content/json/next_page`.
                    public var next_page: Swift.Bool
                    /// The cursor to use to fetch the next page of data.
                    ///
                    /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsUsagesResponse/content/json/cursor`.
                    public var cursor: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - components: An array of analytics data when breaking down usage by component.
                    ///   - files: An array of analytics data when breaking down usage by file.
                    ///   - next_page: Whether there is a next page of data that can be fetched.
                    ///   - cursor: The cursor to use to fetch the next page of data.
                    public init(
                        components: [Components.Schemas.LibraryAnalyticsUsagesByComponent]? = nil,
                        files: [Components.Schemas.LibraryAnalyticsUsagesByFile]? = nil,
                        next_page: Swift.Bool,
                        cursor: Swift.String? = nil
                    ) {
                        self.components = components
                        self.files = files
                        self.next_page = next_page
                        self.cursor = cursor
                    }
                    public enum CodingKeys: String, CodingKey {
                        case components
                        case files
                        case next_page
                        case cursor
                    }
                }
                /// - Remark: Generated from `#/components/responses/GetLibraryAnalyticsUsagesResponse/content/application\/json`.
                case json(Components.Responses.GetLibraryAnalyticsUsagesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.GetLibraryAnalyticsUsagesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GetLibraryAnalyticsUsagesResponse.Body
            /// Creates a new `GetLibraryAnalyticsUsagesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GetLibraryAnalyticsUsagesResponse.Body) {
                self.body = body
            }
        }
        public struct BadRequestErrorResponseWithErrMessage: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrMessage/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrMessage/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrMessage/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrMessage
                    /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrMessage/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrMessage/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrMessage/content/json/value2`.
                    public var value2: Components.Responses.BadRequestErrorResponseWithErrMessage.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrMessage,
                        value2: Components.Responses.BadRequestErrorResponseWithErrMessage.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrMessage/content/application\/json`.
                case json(Components.Responses.BadRequestErrorResponseWithErrMessage.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.BadRequestErrorResponseWithErrMessage.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.BadRequestErrorResponseWithErrMessage.Body
            /// Creates a new `BadRequestErrorResponseWithErrMessage`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.BadRequestErrorResponseWithErrMessage.Body) {
                self.body = body
            }
        }
        public struct BadRequestErrorResponseWithErrorBoolean: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrorBoolean/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrorBoolean/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrorBoolean/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean
                    /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrorBoolean/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrorBoolean/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrorBoolean/content/json/value2`.
                    public var value2: Components.Responses.BadRequestErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean,
                        value2: Components.Responses.BadRequestErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/BadRequestErrorResponseWithErrorBoolean/content/application\/json`.
                case json(Components.Responses.BadRequestErrorResponseWithErrorBoolean.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.BadRequestErrorResponseWithErrorBoolean.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.BadRequestErrorResponseWithErrorBoolean.Body
            /// Creates a new `BadRequestErrorResponseWithErrorBoolean`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.BadRequestErrorResponseWithErrorBoolean.Body) {
                self.body = body
            }
        }
        public struct UnauthorizedErrorResponseWithErrorBoolean: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/UnauthorizedErrorResponseWithErrorBoolean/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/UnauthorizedErrorResponseWithErrorBoolean/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/UnauthorizedErrorResponseWithErrorBoolean/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean
                    /// - Remark: Generated from `#/components/responses/UnauthorizedErrorResponseWithErrorBoolean/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/UnauthorizedErrorResponseWithErrorBoolean/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/UnauthorizedErrorResponseWithErrorBoolean/content/json/value2`.
                    public var value2: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean,
                        value2: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/UnauthorizedErrorResponseWithErrorBoolean/content/application\/json`.
                case json(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean.Body
            /// Creates a new `UnauthorizedErrorResponseWithErrorBoolean`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean.Body) {
                self.body = body
            }
        }
        public struct ForbiddenErrorResponseWithErrMessage: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrMessage/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrMessage/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrMessage/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrMessage
                    /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrMessage/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrMessage/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrMessage/content/json/value2`.
                    public var value2: Components.Responses.ForbiddenErrorResponseWithErrMessage.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrMessage,
                        value2: Components.Responses.ForbiddenErrorResponseWithErrMessage.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrMessage/content/application\/json`.
                case json(Components.Responses.ForbiddenErrorResponseWithErrMessage.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.ForbiddenErrorResponseWithErrMessage.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.ForbiddenErrorResponseWithErrMessage.Body
            /// Creates a new `ForbiddenErrorResponseWithErrMessage`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.ForbiddenErrorResponseWithErrMessage.Body) {
                self.body = body
            }
        }
        public struct ForbiddenErrorResponseWithErrorBoolean: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrorBoolean/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrorBoolean/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrorBoolean/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean
                    /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrorBoolean/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrorBoolean/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrorBoolean/content/json/value2`.
                    public var value2: Components.Responses.ForbiddenErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean,
                        value2: Components.Responses.ForbiddenErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/ForbiddenErrorResponseWithErrorBoolean/content/application\/json`.
                case json(Components.Responses.ForbiddenErrorResponseWithErrorBoolean.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.ForbiddenErrorResponseWithErrorBoolean.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.ForbiddenErrorResponseWithErrorBoolean.Body
            /// Creates a new `ForbiddenErrorResponseWithErrorBoolean`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.ForbiddenErrorResponseWithErrorBoolean.Body) {
                self.body = body
            }
        }
        public struct NotFoundErrorResponseWithErrMessage: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrMessage/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrMessage/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrMessage/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrMessage
                    /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrMessage/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrMessage/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrMessage/content/json/value2`.
                    public var value2: Components.Responses.NotFoundErrorResponseWithErrMessage.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrMessage,
                        value2: Components.Responses.NotFoundErrorResponseWithErrMessage.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrMessage/content/application\/json`.
                case json(Components.Responses.NotFoundErrorResponseWithErrMessage.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.NotFoundErrorResponseWithErrMessage.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.NotFoundErrorResponseWithErrMessage.Body
            /// Creates a new `NotFoundErrorResponseWithErrMessage`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.NotFoundErrorResponseWithErrMessage.Body) {
                self.body = body
            }
        }
        public struct NotFoundErrorResponseWithErrorBoolean: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrorBoolean/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrorBoolean/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrorBoolean/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean
                    /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrorBoolean/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrorBoolean/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrorBoolean/content/json/value2`.
                    public var value2: Components.Responses.NotFoundErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean,
                        value2: Components.Responses.NotFoundErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/NotFoundErrorResponseWithErrorBoolean/content/application\/json`.
                case json(Components.Responses.NotFoundErrorResponseWithErrorBoolean.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.NotFoundErrorResponseWithErrorBoolean.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.NotFoundErrorResponseWithErrorBoolean.Body
            /// Creates a new `NotFoundErrorResponseWithErrorBoolean`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.NotFoundErrorResponseWithErrorBoolean.Body) {
                self.body = body
            }
        }
        public struct TooManyRequestsErrorResponseWithErrMessage: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrMessage/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrMessage/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrMessage/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrMessage
                    /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrMessage/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrMessage/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrMessage/content/json/value2`.
                    public var value2: Components.Responses.TooManyRequestsErrorResponseWithErrMessage.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrMessage,
                        value2: Components.Responses.TooManyRequestsErrorResponseWithErrMessage.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrMessage/content/application\/json`.
                case json(Components.Responses.TooManyRequestsErrorResponseWithErrMessage.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.TooManyRequestsErrorResponseWithErrMessage.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.TooManyRequestsErrorResponseWithErrMessage.Body
            /// Creates a new `TooManyRequestsErrorResponseWithErrMessage`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.TooManyRequestsErrorResponseWithErrMessage.Body) {
                self.body = body
            }
        }
        public struct TooManyRequestsErrorResponseWithErrorBoolean: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean
                    /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean/content/json/value2`.
                    public var value2: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean,
                        value2: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean/content/application\/json`.
                case json(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean.Body
            /// Creates a new `TooManyRequestsErrorResponseWithErrorBoolean`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean.Body) {
                self.body = body
            }
        }
        public struct InternalServerErrorResponseWithErrMessage: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrMessage/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrMessage/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrMessage/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrMessage
                    /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrMessage/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrMessage/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrMessage/content/json/value2`.
                    public var value2: Components.Responses.InternalServerErrorResponseWithErrMessage.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrMessage,
                        value2: Components.Responses.InternalServerErrorResponseWithErrMessage.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrMessage/content/application\/json`.
                case json(Components.Responses.InternalServerErrorResponseWithErrMessage.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.InternalServerErrorResponseWithErrMessage.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InternalServerErrorResponseWithErrMessage.Body
            /// Creates a new `InternalServerErrorResponseWithErrMessage`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InternalServerErrorResponseWithErrMessage.Body) {
                self.body = body
            }
        }
        public struct InternalServerErrorResponseWithErrorBoolean: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrorBoolean/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrorBoolean/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrorBoolean/content/json/value1`.
                    public var value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean
                    /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrorBoolean/content/json/value2`.
                    public struct Value2Payload: Codable, Hashable, Sendable {
                        /// Status code
                        ///
                        /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrorBoolean/content/json/value2/status`.
                        public var status: Swift.Double
                        /// Creates a new `Value2Payload`.
                        ///
                        /// - Parameters:
                        ///   - status: Status code
                        public init(status: Swift.Double) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrorBoolean/content/json/value2`.
                    public var value2: Components.Responses.InternalServerErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.ErrorResponsePayloadWithErrorBoolean,
                        value2: Components.Responses.InternalServerErrorResponseWithErrorBoolean.Body.jsonPayload.Value2Payload
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        value1 = try .init(from: decoder)
                        value2 = try .init(from: decoder)
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try value1.encode(to: encoder)
                        try value2.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/responses/InternalServerErrorResponseWithErrorBoolean/content/application\/json`.
                case json(Components.Responses.InternalServerErrorResponseWithErrorBoolean.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.InternalServerErrorResponseWithErrorBoolean.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InternalServerErrorResponseWithErrorBoolean.Body
            /// Creates a new `InternalServerErrorResponseWithErrorBoolean`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InternalServerErrorResponseWithErrorBoolean.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get file JSON
    ///
    /// Returns the document identified by `file_key` as a JSON object. The file key can be parsed from any Figma file url: `https://www.figma.com/file/{file_key}/{title}`.
    ///
    /// The `document` property contains a node of type `DOCUMENT`.
    ///
    /// The `components` property contains a mapping from node IDs to component metadata. This is to help you determine which components each instance comes from.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/get(getFile)`.
    public enum getFile {
        public static let id: Swift.String = "getFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to export JSON from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to export JSON from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getFile.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A specific version ID to get. Omitting this will get the current version of the file.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/GET/query/version`.
                public var version: Swift.String?
                /// Comma separated list of nodes that you care about in the document. If specified, only a subset of the document will be returned corresponding to the nodes listed, their children, and everything between the root node and the listed nodes.
                ///
                /// Note: There may be other nodes included in the returned JSON that are outside the ancestor chains of the desired nodes. The response may also include dependencies of anything in the nodes' subtrees. For example, if a node subtree contains an instance of a local component that lives elsewhere in that file, that component and its ancestor chain will also be included.
                ///
                /// For historical reasons, top-level canvas nodes are always returned, regardless of whether they are listed in the `ids` parameter. This quirk may be removed in a future version of the API.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/GET/query/ids`.
                public var ids: Swift.String?
                /// Positive integer representing how deep into the document tree to traverse. For example, setting this to 1 returns only Pages, setting it to 2 returns Pages and all top level objects on each page. Not setting this parameter returns all nodes.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/GET/query/depth`.
                public var depth: Swift.Double?
                /// Set to "paths" to export vector data.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/GET/query/geometry`.
                public var geometry: Swift.String?
                /// A comma separated list of plugin IDs and/or the string "shared". Any data present in the document written by those plugins will be included in the result in the `pluginData` and `sharedPluginData` properties.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/GET/query/plugin_data`.
                public var plugin_data: Swift.String?
                /// Returns branch metadata for the requested file. If the file is a branch, the main file's key will be included in the returned response. If the file has branches, their metadata will be included in the returned response. Default: false.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/GET/query/branch_data`.
                public var branch_data: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - version: A specific version ID to get. Omitting this will get the current version of the file.
                ///   - ids: Comma separated list of nodes that you care about in the document. If specified, only a subset of the document will be returned corresponding to the nodes listed, their children, and everything between the root node and the listed nodes.
                ///   - depth: Positive integer representing how deep into the document tree to traverse. For example, setting this to 1 returns only Pages, setting it to 2 returns Pages and all top level objects on each page. Not setting this parameter returns all nodes.
                ///   - geometry: Set to "paths" to export vector data.
                ///   - plugin_data: A comma separated list of plugin IDs and/or the string "shared". Any data present in the document written by those plugins will be included in the result in the `pluginData` and `sharedPluginData` properties.
                ///   - branch_data: Returns branch metadata for the requested file. If the file is a branch, the main file's key will be included in the returned response. If the file has branches, their metadata will be included in the returned response. Default: false.
                public init(
                    version: Swift.String? = nil,
                    ids: Swift.String? = nil,
                    depth: Swift.Double? = nil,
                    geometry: Swift.String? = nil,
                    plugin_data: Swift.String? = nil,
                    branch_data: Swift.Bool? = nil
                ) {
                    self.version = version
                    self.ids = ids
                    self.depth = depth
                    self.geometry = geometry
                    self.plugin_data = plugin_data
                    self.branch_data = branch_data
                }
            }
            public var query: Operations.getFile.Input.Query
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getFile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getFile.Input.Path,
                query: Operations.getFile.Input.Query = .init(),
                headers: Operations.getFile.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key} endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/get(getFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetFileResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetFileResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/get(getFile)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/get(getFile)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/get(getFile)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/get(getFile)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/get(getFile)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get file JSON for specific nodes
    ///
    /// Returns the nodes referenced to by `ids` as a JSON object. The nodes are retrieved from the Figma file referenced to by `file_key`.
    ///
    /// The node ID and file key can be parsed from any Figma node url: `https://www.figma.com/file/{file_key}/{title}?node-id={id}`
    ///
    /// The `name`, `lastModified`, `thumbnailUrl`, `editorType`, and `version` attributes are all metadata of the specified file.
    ///
    /// The `linkAccess` field describes the file link share permission level. There are 5 types of permissions a shared link can have: `"inherit"`, `"view"`, `"edit"`, `"org_view"`, and `"org_edit"`. `"inherit"` is the default permission applied to files created in a team project, and will inherit the project's permissions. `"org_view"` and `"org_edit"` restrict the link to org users.
    ///
    /// The `document` attribute contains a Node of type `DOCUMENT`.
    ///
    /// The `components` key contains a mapping from node IDs to component metadata. This is to help you determine which components each instance comes from.
    ///
    /// By default, no vector data is returned. To return vector data, pass the geometry=paths parameter to the endpoint.
    /// Each node can also inherit properties from applicable styles. The styles key contains a mapping from style IDs to style metadata.
    ///
    /// Important: the nodes map may contain values that are `null`. This may be due to the node id not existing within the specified file.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/nodes`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/nodes/get(getFileNodes)`.
    public enum getFileNodes {
        public static let id: Swift.String = "getFileNodes"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/nodes/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to export JSON from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/nodes/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to export JSON from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getFileNodes.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/nodes/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A comma separated list of node IDs to retrieve and convert.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/nodes/GET/query/ids`.
                public var ids: Swift.String
                /// A specific version ID to get. Omitting this will get the current version of the file.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/nodes/GET/query/version`.
                public var version: Swift.String?
                /// Positive integer representing how deep into the node tree to traverse. For example, setting this to 1 will return only the children directly underneath the desired nodes. Not setting this parameter returns all nodes.
                ///
                /// Note: this parameter behaves differently from the same parameter in the `GET /v1/files/:key` endpoint. In this endpoint, the depth will be counted starting from the desired node rather than the document root node.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/nodes/GET/query/depth`.
                public var depth: Swift.Double?
                /// Set to "paths" to export vector data.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/nodes/GET/query/geometry`.
                public var geometry: Swift.String?
                /// A comma separated list of plugin IDs and/or the string "shared". Any data present in the document written by those plugins will be included in the result in the `pluginData` and `sharedPluginData` properties.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/nodes/GET/query/plugin_data`.
                public var plugin_data: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids: A comma separated list of node IDs to retrieve and convert.
                ///   - version: A specific version ID to get. Omitting this will get the current version of the file.
                ///   - depth: Positive integer representing how deep into the node tree to traverse. For example, setting this to 1 will return only the children directly underneath the desired nodes. Not setting this parameter returns all nodes.
                ///   - geometry: Set to "paths" to export vector data.
                ///   - plugin_data: A comma separated list of plugin IDs and/or the string "shared". Any data present in the document written by those plugins will be included in the result in the `pluginData` and `sharedPluginData` properties.
                public init(
                    ids: Swift.String,
                    version: Swift.String? = nil,
                    depth: Swift.Double? = nil,
                    geometry: Swift.String? = nil,
                    plugin_data: Swift.String? = nil
                ) {
                    self.ids = ids
                    self.version = version
                    self.depth = depth
                    self.geometry = geometry
                    self.plugin_data = plugin_data
                }
            }
            public var query: Operations.getFileNodes.Input.Query
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/nodes/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFileNodes.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFileNodes.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getFileNodes.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getFileNodes.Input.Path,
                query: Operations.getFileNodes.Input.Query,
                headers: Operations.getFileNodes.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/nodes endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/nodes/get(getFileNodes)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetFileNodesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetFileNodesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/nodes/get(getFileNodes)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/nodes/get(getFileNodes)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/nodes/get(getFileNodes)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/nodes/get(getFileNodes)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/nodes/get(getFileNodes)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Render images of file nodes
    ///
    /// Renders images from a file.
    ///
    /// If no error occurs, `"images"` will be populated with a map from node IDs to URLs of the rendered images, and `"status"` will be omitted. The image assets will expire after 30 days. Images up to 32 megapixels can be exported. Any images that are larger will be scaled down.
    ///
    /// Important: the image map may contain values that are `null`. This indicates that rendering of that specific node has failed. This may be due to the node id not existing, or other reasons such has the node having no renderable components. It is guaranteed that any node that was requested for rendering will be represented in this map whether or not the render succeeded.
    ///
    /// To render multiple images from the same file, use the `ids` query parameter to specify multiple node ids.
    ///
    /// ```
    /// GET /v1/images/:key?ids=1:2,1:3,1:4
    /// ```
    ///
    ///
    /// - Remark: HTTP `GET /v1/images/{file_key}`.
    /// - Remark: Generated from `#/paths//v1/images/{file_key}/get(getImages)`.
    public enum getImages {
        public static let id: Swift.String = "getImages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to export images from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to export images from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getImages.Input.Path
            /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A comma separated list of node IDs to render.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/ids`.
                public var ids: Swift.String
                /// A specific version ID to get. Omitting this will get the current version of the file.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/version`.
                public var version: Swift.String?
                /// A number between 0.01 and 4, the image scaling factor.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/scale`.
                public var scale: Swift.Double?
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/format`.
                @frozen public enum formatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case jpg = "jpg"
                    case png = "png"
                    case svg = "svg"
                    case pdf = "pdf"
                }
                /// A string enum for the image output format.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/format`.
                public var format: Operations.getImages.Input.Query.formatPayload?
                /// Whether text elements are rendered as outlines (vector paths) or as `<text>` elements in SVGs.
                ///
                /// Rendering text elements as outlines guarantees that the text looks exactly the same in the SVG as it does in the browser/inside Figma.
                ///
                /// Exporting as `<text>` allows text to be selectable inside SVGs and generally makes the SVG easier to read. However, this relies on the browser's rendering engine which can vary between browsers and/or operating systems. As such, visual accuracy is not guaranteed as the result could look different than in Figma.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/svg_outline_text`.
                public var svg_outline_text: Swift.Bool?
                /// Whether to include id attributes for all SVG elements. Adds the layer name to the `id` attribute of an svg element.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/svg_include_id`.
                public var svg_include_id: Swift.Bool?
                /// Whether to include node id attributes for all SVG elements. Adds the node id to a `data-node-id` attribute of an svg element.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/svg_include_node_id`.
                public var svg_include_node_id: Swift.Bool?
                /// Whether to simplify inside/outside strokes and use stroke attribute if possible instead of `<mask>`.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/svg_simplify_stroke`.
                public var svg_simplify_stroke: Swift.Bool?
                /// Whether content that overlaps the node should be excluded from rendering. Passing false (i.e., rendering overlaps) may increase processing time, since more of the document must be included in rendering.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/contents_only`.
                public var contents_only: Swift.Bool?
                /// Use the full dimensions of the node regardless of whether or not it is cropped or the space around it is empty. Use this to export text nodes without cropping.
                ///
                /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/query/use_absolute_bounds`.
                public var use_absolute_bounds: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids: A comma separated list of node IDs to render.
                ///   - version: A specific version ID to get. Omitting this will get the current version of the file.
                ///   - scale: A number between 0.01 and 4, the image scaling factor.
                ///   - format: A string enum for the image output format.
                ///   - svg_outline_text: Whether text elements are rendered as outlines (vector paths) or as `<text>` elements in SVGs.
                ///   - svg_include_id: Whether to include id attributes for all SVG elements. Adds the layer name to the `id` attribute of an svg element.
                ///   - svg_include_node_id: Whether to include node id attributes for all SVG elements. Adds the node id to a `data-node-id` attribute of an svg element.
                ///   - svg_simplify_stroke: Whether to simplify inside/outside strokes and use stroke attribute if possible instead of `<mask>`.
                ///   - contents_only: Whether content that overlaps the node should be excluded from rendering. Passing false (i.e., rendering overlaps) may increase processing time, since more of the document must be included in rendering.
                ///   - use_absolute_bounds: Use the full dimensions of the node regardless of whether or not it is cropped or the space around it is empty. Use this to export text nodes without cropping.
                public init(
                    ids: Swift.String,
                    version: Swift.String? = nil,
                    scale: Swift.Double? = nil,
                    format: Operations.getImages.Input.Query.formatPayload? = nil,
                    svg_outline_text: Swift.Bool? = nil,
                    svg_include_id: Swift.Bool? = nil,
                    svg_include_node_id: Swift.Bool? = nil,
                    svg_simplify_stroke: Swift.Bool? = nil,
                    contents_only: Swift.Bool? = nil,
                    use_absolute_bounds: Swift.Bool? = nil
                ) {
                    self.ids = ids
                    self.version = version
                    self.scale = scale
                    self.format = format
                    self.svg_outline_text = svg_outline_text
                    self.svg_include_id = svg_include_id
                    self.svg_include_node_id = svg_include_node_id
                    self.svg_simplify_stroke = svg_simplify_stroke
                    self.contents_only = contents_only
                    self.use_absolute_bounds = use_absolute_bounds
                }
            }
            public var query: Operations.getImages.Input.Query
            /// - Remark: Generated from `#/paths/v1/images/{file_key}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getImages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getImages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getImages.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getImages.Input.Path,
                query: Operations.getImages.Input.Query,
                headers: Operations.getImages.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/images/{file_key} endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/images/{file_key}/get(getImages)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetImagesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetImagesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/images/{file_key}/get(getImages)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/images/{file_key}/get(getImages)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/images/{file_key}/get(getImages)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/images/{file_key}/get(getImages)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/images/{file_key}/get(getImages)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get image fills
    ///
    /// Returns download links for all images present in image fills in a document. Image fills are how Figma represents any user supplied images. When you drag an image into Figma, we create a rectangle with a single fill that represents the image, and the user is able to transform the rectangle (and properties on the fill) as they wish.
    ///
    /// This endpoint returns a mapping from image references to the URLs at which the images may be download. Image URLs will expire after no more than 14 days. Image references are located in the output of the GET files endpoint under the `imageRef` attribute in a `Paint`.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/images`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/images/get(getImageFills)`.
    public enum getImageFills {
        public static let id: Swift.String = "getImageFills"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/images/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to get image URLs from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/images/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to get image URLs from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getImageFills.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/images/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getImageFills.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getImageFills.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getImageFills.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getImageFills.Input.Path,
                headers: Operations.getImageFills.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/images endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/images/get(getImageFills)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetImageFillsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetImageFillsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/images/get(getImageFills)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/images/get(getImageFills)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/images/get(getImageFills)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/images/get(getImageFills)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/images/get(getImageFills)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get projects in a team
    ///
    /// You can use this endpoint to get a list of all the Projects within the specified team. This will only return projects visible to the authenticated user or owner of the developer token. Note: it is not currently possible to programmatically obtain the team id of a user just from a token. To obtain a team id, navigate to a team page of a team you are a part of. The team id will be present in the URL after the word team and before your team name.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/projects`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/projects/get(getTeamProjects)`.
    public enum getTeamProjects {
        public static let id: Swift.String = "getTeamProjects"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/projects/GET/path`.
            public struct Path: Sendable, Hashable {
                /// ID of the team to list projects from
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/projects/GET/path/team_id`.
                public var team_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: ID of the team to list projects from
                public init(team_id: Swift.String) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.getTeamProjects.Input.Path
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/projects/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTeamProjects.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTeamProjects.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getTeamProjects.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getTeamProjects.Input.Path,
                headers: Operations.getTeamProjects.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/teams/{team_id}/projects endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/projects/get(getTeamProjects)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetTeamProjectsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetTeamProjectsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/projects/get(getTeamProjects)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/projects/get(getTeamProjects)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/projects/get(getTeamProjects)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/projects/get(getTeamProjects)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get files in a project
    ///
    /// Get a list of all the Files within the specified project.
    ///
    /// - Remark: HTTP `GET /v1/projects/{project_id}/files`.
    /// - Remark: Generated from `#/paths//v1/projects/{project_id}/files/get(getProjectFiles)`.
    public enum getProjectFiles {
        public static let id: Swift.String = "getProjectFiles"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/projects/{project_id}/files/GET/path`.
            public struct Path: Sendable, Hashable {
                /// ID of the project to list files from
                ///
                /// - Remark: Generated from `#/paths/v1/projects/{project_id}/files/GET/path/project_id`.
                public var project_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - project_id: ID of the project to list files from
                public init(project_id: Swift.String) {
                    self.project_id = project_id
                }
            }
            public var path: Operations.getProjectFiles.Input.Path
            /// - Remark: Generated from `#/paths/v1/projects/{project_id}/files/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Returns branch metadata in the response for each main file with a branch inside the project.
                ///
                /// - Remark: Generated from `#/paths/v1/projects/{project_id}/files/GET/query/branch_data`.
                public var branch_data: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - branch_data: Returns branch metadata in the response for each main file with a branch inside the project.
                public init(branch_data: Swift.Bool? = nil) {
                    self.branch_data = branch_data
                }
            }
            public var query: Operations.getProjectFiles.Input.Query
            /// - Remark: Generated from `#/paths/v1/projects/{project_id}/files/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getProjectFiles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getProjectFiles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getProjectFiles.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getProjectFiles.Input.Path,
                query: Operations.getProjectFiles.Input.Query = .init(),
                headers: Operations.getProjectFiles.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/projects/{project_id}/files endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/projects/{project_id}/files/get(getProjectFiles)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetProjectFilesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetProjectFilesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/projects/{project_id}/files/get(getProjectFiles)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/projects/{project_id}/files/get(getProjectFiles)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/projects/{project_id}/files/get(getProjectFiles)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/projects/{project_id}/files/get(getProjectFiles)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get versions of a file
    ///
    /// This endpoint fetches the version history of a file, allowing you to see the progression of a file over time. You can then use this information to render a specific version of the file, via another endpoint.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/versions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/versions/get(getFileVersions)`.
    public enum getFileVersions {
        public static let id: Swift.String = "getFileVersions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/versions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to get version history from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/versions/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to get version history from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getFileVersions.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/versions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of items returned in a page of the response. If not included, `page_size` is `30`.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/versions/GET/query/page_size`.
                public var page_size: Swift.Double?
                /// A version ID for one of the versions in the history. Gets versions before this ID. Used for paginating. If the response is not paginated, this link returns the same data in the current response.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/versions/GET/query/before`.
                public var before: Swift.Double?
                /// A version ID for one of the versions in the history. Gets versions after this ID. Used for paginating. If the response is not paginated, this property is not included.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/versions/GET/query/after`.
                public var after: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page_size: The number of items returned in a page of the response. If not included, `page_size` is `30`.
                ///   - before: A version ID for one of the versions in the history. Gets versions before this ID. Used for paginating. If the response is not paginated, this link returns the same data in the current response.
                ///   - after: A version ID for one of the versions in the history. Gets versions after this ID. Used for paginating. If the response is not paginated, this property is not included.
                public init(
                    page_size: Swift.Double? = nil,
                    before: Swift.Double? = nil,
                    after: Swift.Double? = nil
                ) {
                    self.page_size = page_size
                    self.before = before
                    self.after = after
                }
            }
            public var query: Operations.getFileVersions.Input.Query
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/versions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFileVersions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFileVersions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getFileVersions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getFileVersions.Input.Path,
                query: Operations.getFileVersions.Input.Query = .init(),
                headers: Operations.getFileVersions.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/versions endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/versions/get(getFileVersions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetFileVersionsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetFileVersionsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/versions/get(getFileVersions)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/versions/get(getFileVersions)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/versions/get(getFileVersions)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/versions/get(getFileVersions)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get comments in a file
    ///
    /// Gets a list of comments left on the file.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/comments`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/get(getComments)`.
    public enum getComments {
        public static let id: Swift.String = "getComments"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to get comments from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to get comments from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getComments.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// If enabled, will return comments as their markdown equivalents when applicable.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/GET/query/as_md`.
                public var as_md: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - as_md: If enabled, will return comments as their markdown equivalents when applicable.
                public init(as_md: Swift.Bool? = nil) {
                    self.as_md = as_md
                }
            }
            public var query: Operations.getComments.Input.Query
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getComments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getComments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getComments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getComments.Input.Path,
                query: Operations.getComments.Input.Query = .init(),
                headers: Operations.getComments.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/comments endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/get(getComments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetCommentsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetCommentsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/get(getComments)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/get(getComments)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/get(getComments)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/get(getComments)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add a comment to a file
    ///
    /// Posts a new comment on the file.
    ///
    /// - Remark: HTTP `POST /v1/files/{file_key}/comments`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/post(postComment)`.
    public enum postComment {
        public static let id: Swift.String = "postComment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/path`.
            public struct Path: Sendable, Hashable {
                /// File to add comments in. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to add comments in. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.postComment.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postComment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postComment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.postComment.Input.Headers
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The text contents of the comment to post.
                    ///
                    /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody/json/message`.
                    public var message: Swift.String
                    /// The ID of the comment to reply to, if any. This must be a root comment. You cannot reply to other replies (a comment that has a parent_id).
                    ///
                    /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody/json/comment_id`.
                    public var comment_id: Swift.String?
                    /// The position where to place the comment.
                    ///
                    /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody/json/client_meta`.
                    @frozen public enum client_metaPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody/json/client_meta/case1`.
                        case Vector(Components.Schemas.Vector)
                        /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody/json/client_meta/case2`.
                        case FrameOffset(Components.Schemas.FrameOffset)
                        /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody/json/client_meta/case3`.
                        case Region(Components.Schemas.Region)
                        /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody/json/client_meta/case4`.
                        case FrameOffsetRegion(Components.Schemas.FrameOffsetRegion)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .Vector(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .FrameOffset(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .Region(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .FrameOffsetRegion(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .Vector(value):
                                try value.encode(to: encoder)
                            case let .FrameOffset(value):
                                try value.encode(to: encoder)
                            case let .Region(value):
                                try value.encode(to: encoder)
                            case let .FrameOffsetRegion(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// The position where to place the comment.
                    ///
                    /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody/json/client_meta`.
                    public var client_meta: Operations.postComment.Input.Body.jsonPayload.client_metaPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - message: The text contents of the comment to post.
                    ///   - comment_id: The ID of the comment to reply to, if any. This must be a root comment. You cannot reply to other replies (a comment that has a parent_id).
                    ///   - client_meta: The position where to place the comment.
                    public init(
                        message: Swift.String,
                        comment_id: Swift.String? = nil,
                        client_meta: Operations.postComment.Input.Body.jsonPayload.client_metaPayload? = nil
                    ) {
                        self.message = message
                        self.comment_id = comment_id
                        self.client_meta = client_meta
                    }
                    public enum CodingKeys: String, CodingKey {
                        case message
                        case comment_id
                        case client_meta
                    }
                }
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/POST/requestBody/content/application\/json`.
                case json(Operations.postComment.Input.Body.jsonPayload)
            }
            public var body: Operations.postComment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.postComment.Input.Path,
                headers: Operations.postComment.Input.Headers = .init(),
                body: Operations.postComment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the POST /v1/files/{file_key}/comments endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/post(postComment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.PostCommentResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.PostCommentResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/post(postComment)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/post(postComment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/post(postComment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/post(postComment)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/post(postComment)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a comment
    ///
    /// Deletes a specific comment. Only the person who made the comment is allowed to delete it.
    ///
    /// - Remark: HTTP `DELETE /v1/files/{file_key}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/delete(deleteComment)`.
    public enum deleteComment {
        public static let id: Swift.String = "deleteComment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// File to delete comment from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/DELETE/path/file_key`.
                public var file_key: Swift.String
                /// Comment id of comment to delete
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/DELETE/path/comment_id`.
                public var comment_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to delete comment from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///   - comment_id: Comment id of comment to delete
                public init(
                    file_key: Swift.String,
                    comment_id: Swift.String
                ) {
                    self.file_key = file_key
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.deleteComment.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteComment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteComment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteComment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteComment.Input.Path,
                headers: Operations.deleteComment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the DELETE /v1/files/{file_key}/comments/{comment_id} endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/delete(deleteComment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.DeleteCommentResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.DeleteCommentResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/delete(deleteComment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/delete(deleteComment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/delete(deleteComment)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/delete(deleteComment)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get reactions for a comment
    ///
    /// Gets a paginated list of reactions left on the comment.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/comments/{comment_id}/reactions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/get(getCommentReactions)`.
    public enum getCommentReactions {
        public static let id: Swift.String = "getCommentReactions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to get comment containing reactions from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/GET/path/file_key`.
                public var file_key: Swift.String
                /// ID of comment to get reactions from.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/GET/path/comment_id`.
                public var comment_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to get comment containing reactions from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///   - comment_id: ID of comment to get reactions from.
                public init(
                    file_key: Swift.String,
                    comment_id: Swift.String
                ) {
                    self.file_key = file_key
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.getCommentReactions.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Cursor for pagination, retrieved from the response of the previous call.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/GET/query/cursor`.
                public var cursor: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cursor: Cursor for pagination, retrieved from the response of the previous call.
                public init(cursor: Swift.String? = nil) {
                    self.cursor = cursor
                }
            }
            public var query: Operations.getCommentReactions.Input.Query
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCommentReactions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCommentReactions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getCommentReactions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getCommentReactions.Input.Path,
                query: Operations.getCommentReactions.Input.Query = .init(),
                headers: Operations.getCommentReactions.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/comments/{comment_id}/reactions endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/get(getCommentReactions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetCommentReactionsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetCommentReactionsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/get(getCommentReactions)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/get(getCommentReactions)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/get(getCommentReactions)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/get(getCommentReactions)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add a reaction to a comment
    ///
    /// Posts a new comment reaction on a file comment.
    ///
    /// - Remark: HTTP `POST /v1/files/{file_key}/comments/{comment_id}/reactions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/post(postCommentReaction)`.
    public enum postCommentReaction {
        public static let id: Swift.String = "postCommentReaction"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/POST/path`.
            public struct Path: Sendable, Hashable {
                /// File to post comment reactions to. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/POST/path/file_key`.
                public var file_key: Swift.String
                /// ID of comment to react to.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/POST/path/comment_id`.
                public var comment_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to post comment reactions to. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///   - comment_id: ID of comment to react to.
                public init(
                    file_key: Swift.String,
                    comment_id: Swift.String
                ) {
                    self.file_key = file_key
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.postCommentReaction.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postCommentReaction.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postCommentReaction.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.postCommentReaction.Input.Headers
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/POST/requestBody/json/emoji`.
                    public var emoji: Components.Schemas.Emoji
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - emoji:
                    public init(emoji: Components.Schemas.Emoji) {
                        self.emoji = emoji
                    }
                    public enum CodingKeys: String, CodingKey {
                        case emoji
                    }
                }
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/POST/requestBody/content/application\/json`.
                case json(Operations.postCommentReaction.Input.Body.jsonPayload)
            }
            public var body: Operations.postCommentReaction.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.postCommentReaction.Input.Path,
                headers: Operations.postCommentReaction.Input.Headers = .init(),
                body: Operations.postCommentReaction.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the POST /v1/files/{file_key}/comments/{comment_id}/reactions endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/post(postCommentReaction)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.PostCommentReactionResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.PostCommentReactionResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/post(postCommentReaction)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/post(postCommentReaction)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/post(postCommentReaction)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/post(postCommentReaction)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/post(postCommentReaction)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a reaction
    ///
    /// Deletes a specific comment reaction. Only the person who made the reaction is allowed to delete it.
    ///
    /// - Remark: HTTP `DELETE /v1/files/{file_key}/comments/{comment_id}/reactions`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/delete(deleteCommentReaction)`.
    public enum deleteCommentReaction {
        public static let id: Swift.String = "deleteCommentReaction"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// File to delete comment reaction from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/DELETE/path/file_key`.
                public var file_key: Swift.String
                /// ID of comment to delete reaction from.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/DELETE/path/comment_id`.
                public var comment_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to delete comment reaction from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///   - comment_id: ID of comment to delete reaction from.
                public init(
                    file_key: Swift.String,
                    comment_id: Swift.String
                ) {
                    self.file_key = file_key
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.deleteCommentReaction.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/DELETE/query/emoji`.
                public var emoji: Components.Schemas.Emoji
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - emoji:
                public init(emoji: Components.Schemas.Emoji) {
                    self.emoji = emoji
                }
            }
            public var query: Operations.deleteCommentReaction.Input.Query
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/comments/{comment_id}/reactions/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteCommentReaction.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteCommentReaction.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteCommentReaction.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.deleteCommentReaction.Input.Path,
                query: Operations.deleteCommentReaction.Input.Query,
                headers: Operations.deleteCommentReaction.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the DELETE /v1/files/{file_key}/comments/{comment_id}/reactions endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/delete(deleteCommentReaction)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.DeleteCommentReactionResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.DeleteCommentReactionResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/delete(deleteCommentReaction)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/delete(deleteCommentReaction)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/delete(deleteCommentReaction)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/comments/{comment_id}/reactions/delete(deleteCommentReaction)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get current user
    ///
    /// Returns the user information for the currently authenticated user.
    ///
    /// - Remark: HTTP `GET /v1/me`.
    /// - Remark: Generated from `#/paths//v1/me/get(getMe)`.
    public enum getMe {
        public static let id: Swift.String = "getMe"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/me/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getMe.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getMe.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getMe.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getMe.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/me endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/me/get(getMe)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetMeResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetMeResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/me/get(getMe)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/me/get(getMe)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/me/get(getMe)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get team components
    ///
    /// Get a paginated list of published components within a team library.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/components`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/components/get(getTeamComponents)`.
    public enum getTeamComponents {
        public static let id: Swift.String = "getTeamComponents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/components/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Id of the team to list components from.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/components/GET/path/team_id`.
                public var team_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: Id of the team to list components from.
                public init(team_id: Swift.String) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.getTeamComponents.Input.Path
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/components/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Number of items to return in a paged list of results. Defaults to 30.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/components/GET/query/page_size`.
                public var page_size: Swift.Double?
                /// Cursor indicating which id after which to start retrieving components for. Exclusive with before. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/components/GET/query/after`.
                public var after: Swift.Double?
                /// Cursor indicating which id before which to start retrieving components for. Exclusive with after. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/components/GET/query/before`.
                public var before: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page_size: Number of items to return in a paged list of results. Defaults to 30.
                ///   - after: Cursor indicating which id after which to start retrieving components for. Exclusive with before. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                ///   - before: Cursor indicating which id before which to start retrieving components for. Exclusive with after. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                public init(
                    page_size: Swift.Double? = nil,
                    after: Swift.Double? = nil,
                    before: Swift.Double? = nil
                ) {
                    self.page_size = page_size
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.getTeamComponents.Input.Query
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/components/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTeamComponents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTeamComponents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getTeamComponents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getTeamComponents.Input.Path,
                query: Operations.getTeamComponents.Input.Query = .init(),
                headers: Operations.getTeamComponents.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/teams/{team_id}/components endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/components/get(getTeamComponents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetTeamComponentsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetTeamComponentsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/components/get(getTeamComponents)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/components/get(getTeamComponents)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/components/get(getTeamComponents)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/components/get(getTeamComponents)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/components/get(getTeamComponents)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get file components
    ///
    /// Get a list of published components within a file library.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/components`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/components/get(getFileComponents)`.
    public enum getFileComponents {
        public static let id: Swift.String = "getFileComponents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/components/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to list components from. This must be a main file key, not a branch key, as it is not possible to publish from branches.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/components/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to list components from. This must be a main file key, not a branch key, as it is not possible to publish from branches.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getFileComponents.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/components/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFileComponents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFileComponents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getFileComponents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getFileComponents.Input.Path,
                headers: Operations.getFileComponents.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/components endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/components/get(getFileComponents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetFileComponentsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetFileComponentsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/components/get(getFileComponents)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/components/get(getFileComponents)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/components/get(getFileComponents)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/components/get(getFileComponents)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/components/get(getFileComponents)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get component
    ///
    /// Get metadata on a component by key.
    ///
    /// - Remark: HTTP `GET /v1/components/{key}`.
    /// - Remark: Generated from `#/paths//v1/components/{key}/get(getComponent)`.
    public enum getComponent {
        public static let id: Swift.String = "getComponent"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/components/{key}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the component.
                ///
                /// - Remark: Generated from `#/paths/v1/components/{key}/GET/path/key`.
                public var key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - key: The unique identifier of the component.
                public init(key: Swift.String) {
                    self.key = key
                }
            }
            public var path: Operations.getComponent.Input.Path
            /// - Remark: Generated from `#/paths/v1/components/{key}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getComponent.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getComponent.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getComponent.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getComponent.Input.Path,
                headers: Operations.getComponent.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/components/{key} endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/components/{key}/get(getComponent)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetComponentResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetComponentResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/components/{key}/get(getComponent)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/components/{key}/get(getComponent)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/components/{key}/get(getComponent)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/components/{key}/get(getComponent)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/components/{key}/get(getComponent)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get team component sets
    ///
    /// Get a paginated list of published component sets within a team library.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/component_sets`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/component_sets/get(getTeamComponentSets)`.
    public enum getTeamComponentSets {
        public static let id: Swift.String = "getTeamComponentSets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/component_sets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Id of the team to list component sets from.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/component_sets/GET/path/team_id`.
                public var team_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: Id of the team to list component sets from.
                public init(team_id: Swift.String) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.getTeamComponentSets.Input.Path
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/component_sets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Number of items to return in a paged list of results. Defaults to 30.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/component_sets/GET/query/page_size`.
                public var page_size: Swift.Double?
                /// Cursor indicating which id after which to start retrieving component sets for. Exclusive with before. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/component_sets/GET/query/after`.
                public var after: Swift.Double?
                /// Cursor indicating which id before which to start retrieving component sets for. Exclusive with after. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/component_sets/GET/query/before`.
                public var before: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page_size: Number of items to return in a paged list of results. Defaults to 30.
                ///   - after: Cursor indicating which id after which to start retrieving component sets for. Exclusive with before. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                ///   - before: Cursor indicating which id before which to start retrieving component sets for. Exclusive with after. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                public init(
                    page_size: Swift.Double? = nil,
                    after: Swift.Double? = nil,
                    before: Swift.Double? = nil
                ) {
                    self.page_size = page_size
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.getTeamComponentSets.Input.Query
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/component_sets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTeamComponentSets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTeamComponentSets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getTeamComponentSets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getTeamComponentSets.Input.Path,
                query: Operations.getTeamComponentSets.Input.Query = .init(),
                headers: Operations.getTeamComponentSets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/teams/{team_id}/component_sets endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/component_sets/get(getTeamComponentSets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetTeamComponentSetsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetTeamComponentSetsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/component_sets/get(getTeamComponentSets)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/component_sets/get(getTeamComponentSets)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/component_sets/get(getTeamComponentSets)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/component_sets/get(getTeamComponentSets)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/component_sets/get(getTeamComponentSets)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get file component sets
    ///
    /// Get a list of published component sets within a file library.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/component_sets`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/component_sets/get(getFileComponentSets)`.
    public enum getFileComponentSets {
        public static let id: Swift.String = "getFileComponentSets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/component_sets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to list component sets from. This must be a main file key, not a branch key, as it is not possible to publish from branches.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/component_sets/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to list component sets from. This must be a main file key, not a branch key, as it is not possible to publish from branches.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getFileComponentSets.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/component_sets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFileComponentSets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFileComponentSets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getFileComponentSets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getFileComponentSets.Input.Path,
                headers: Operations.getFileComponentSets.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/component_sets endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/component_sets/get(getFileComponentSets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetFileComponentSetsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetFileComponentSetsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/component_sets/get(getFileComponentSets)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/component_sets/get(getFileComponentSets)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/component_sets/get(getFileComponentSets)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/component_sets/get(getFileComponentSets)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/component_sets/get(getFileComponentSets)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get component set
    ///
    /// Get metadata on a component set by key.
    ///
    /// - Remark: HTTP `GET /v1/component_sets/{key}`.
    /// - Remark: Generated from `#/paths//v1/component_sets/{key}/get(getComponentSet)`.
    public enum getComponentSet {
        public static let id: Swift.String = "getComponentSet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/component_sets/{key}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the component set.
                ///
                /// - Remark: Generated from `#/paths/v1/component_sets/{key}/GET/path/key`.
                public var key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - key: The unique identifier of the component set.
                public init(key: Swift.String) {
                    self.key = key
                }
            }
            public var path: Operations.getComponentSet.Input.Path
            /// - Remark: Generated from `#/paths/v1/component_sets/{key}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getComponentSet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getComponentSet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getComponentSet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getComponentSet.Input.Path,
                headers: Operations.getComponentSet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/component_sets/{key} endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/component_sets/{key}/get(getComponentSet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetComponentSetResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetComponentSetResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/component_sets/{key}/get(getComponentSet)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/component_sets/{key}/get(getComponentSet)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/component_sets/{key}/get(getComponentSet)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/component_sets/{key}/get(getComponentSet)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/component_sets/{key}/get(getComponentSet)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get team styles
    ///
    /// Get a paginated list of published styles within a team library.
    ///
    /// - Remark: HTTP `GET /v1/teams/{team_id}/styles`.
    /// - Remark: Generated from `#/paths//v1/teams/{team_id}/styles/get(getTeamStyles)`.
    public enum getTeamStyles {
        public static let id: Swift.String = "getTeamStyles"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/styles/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Id of the team to list styles from.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/styles/GET/path/team_id`.
                public var team_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: Id of the team to list styles from.
                public init(team_id: Swift.String) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.getTeamStyles.Input.Path
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/styles/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Number of items to return in a paged list of results. Defaults to 30.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/styles/GET/query/page_size`.
                public var page_size: Swift.Double?
                /// Cursor indicating which id after which to start retrieving styles for. Exclusive with before. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/styles/GET/query/after`.
                public var after: Swift.Double?
                /// Cursor indicating which id before which to start retrieving styles for. Exclusive with after. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                ///
                /// - Remark: Generated from `#/paths/v1/teams/{team_id}/styles/GET/query/before`.
                public var before: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page_size: Number of items to return in a paged list of results. Defaults to 30.
                ///   - after: Cursor indicating which id after which to start retrieving styles for. Exclusive with before. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                ///   - before: Cursor indicating which id before which to start retrieving styles for. Exclusive with after. The cursor value is an internally tracked integer that doesn't correspond to any Ids.
                public init(
                    page_size: Swift.Double? = nil,
                    after: Swift.Double? = nil,
                    before: Swift.Double? = nil
                ) {
                    self.page_size = page_size
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.getTeamStyles.Input.Query
            /// - Remark: Generated from `#/paths/v1/teams/{team_id}/styles/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTeamStyles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTeamStyles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getTeamStyles.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getTeamStyles.Input.Path,
                query: Operations.getTeamStyles.Input.Query = .init(),
                headers: Operations.getTeamStyles.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/teams/{team_id}/styles endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/styles/get(getTeamStyles)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetTeamStylesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetTeamStylesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/styles/get(getTeamStyles)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/styles/get(getTeamStyles)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/styles/get(getTeamStyles)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/styles/get(getTeamStyles)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/teams/{team_id}/styles/get(getTeamStyles)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get file styles
    ///
    /// Get a list of published styles within a file library.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/styles`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/styles/get(getFileStyles)`.
    public enum getFileStyles {
        public static let id: Swift.String = "getFileStyles"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/styles/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to list styles from. This must be a main file key, not a branch key, as it is not possible to publish from branches.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/styles/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to list styles from. This must be a main file key, not a branch key, as it is not possible to publish from branches.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getFileStyles.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/styles/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFileStyles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFileStyles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getFileStyles.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getFileStyles.Input.Path,
                headers: Operations.getFileStyles.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/styles endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/styles/get(getFileStyles)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetFileStylesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetFileStylesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/styles/get(getFileStyles)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/styles/get(getFileStyles)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/styles/get(getFileStyles)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/styles/get(getFileStyles)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/styles/get(getFileStyles)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get style
    ///
    /// Get metadata on a style by key.
    ///
    /// - Remark: HTTP `GET /v1/styles/{key}`.
    /// - Remark: Generated from `#/paths//v1/styles/{key}/get(getStyle)`.
    public enum getStyle {
        public static let id: Swift.String = "getStyle"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/styles/{key}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the style.
                ///
                /// - Remark: Generated from `#/paths/v1/styles/{key}/GET/path/key`.
                public var key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - key: The unique identifier of the style.
                public init(key: Swift.String) {
                    self.key = key
                }
            }
            public var path: Operations.getStyle.Input.Path
            /// - Remark: Generated from `#/paths/v1/styles/{key}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStyle.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStyle.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getStyle.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getStyle.Input.Path,
                headers: Operations.getStyle.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/styles/{key} endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/styles/{key}/get(getStyle)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetStyleResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetStyleResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/styles/{key}/get(getStyle)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/styles/{key}/get(getStyle)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/styles/{key}/get(getStyle)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/styles/{key}/get(getStyle)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/styles/{key}/get(getStyle)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a webhook
    ///
    /// Create a new webhook which will call the specified endpoint when the event triggers. By default, this webhook will automatically send a PING event to the endpoint when it is created. If this behavior is not desired, you can create the webhook and set the status to PAUSED and reactivate it later.
    ///
    /// - Remark: HTTP `POST /v2/webhooks`.
    /// - Remark: Generated from `#/paths//v2/webhooks/post(postWebhook)`.
    public enum postWebhook {
        public static let id: Swift.String = "postWebhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/webhooks/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postWebhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postWebhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.postWebhook.Input.Headers
            /// - Remark: Generated from `#/paths/v2/webhooks/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/webhooks/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/v2/webhooks/POST/requestBody/json/event_type`.
                    public var event_type: Components.Schemas.WebhookV2Event
                    /// Team id to receive updates about
                    ///
                    /// - Remark: Generated from `#/paths/v2/webhooks/POST/requestBody/json/team_id`.
                    public var team_id: Swift.String
                    /// The HTTP endpoint that will receive a POST request when the event triggers. Max length 2048 characters.
                    ///
                    /// - Remark: Generated from `#/paths/v2/webhooks/POST/requestBody/json/endpoint`.
                    public var endpoint: Swift.String
                    /// String that will be passed back to your webhook endpoint to verify that it is being called by Figma. Max length 100 characters.
                    ///
                    /// - Remark: Generated from `#/paths/v2/webhooks/POST/requestBody/json/passcode`.
                    public var passcode: Swift.String
                    /// State of the webhook, including any error state it may be in
                    ///
                    /// - Remark: Generated from `#/paths/v2/webhooks/POST/requestBody/json/status`.
                    public var status: Components.Schemas.WebhookV2Status?
                    /// User provided description or name for the webhook. Max length 150 characters.
                    ///
                    /// - Remark: Generated from `#/paths/v2/webhooks/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - event_type:
                    ///   - team_id: Team id to receive updates about
                    ///   - endpoint: The HTTP endpoint that will receive a POST request when the event triggers. Max length 2048 characters.
                    ///   - passcode: String that will be passed back to your webhook endpoint to verify that it is being called by Figma. Max length 100 characters.
                    ///   - status: State of the webhook, including any error state it may be in
                    ///   - description: User provided description or name for the webhook. Max length 150 characters.
                    public init(
                        event_type: Components.Schemas.WebhookV2Event,
                        team_id: Swift.String,
                        endpoint: Swift.String,
                        passcode: Swift.String,
                        status: Components.Schemas.WebhookV2Status? = nil,
                        description: Swift.String? = nil
                    ) {
                        self.event_type = event_type
                        self.team_id = team_id
                        self.endpoint = endpoint
                        self.passcode = passcode
                        self.status = status
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case event_type
                        case team_id
                        case endpoint
                        case passcode
                        case status
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/v2/webhooks/POST/requestBody/content/application\/json`.
                case json(Operations.postWebhook.Input.Body.jsonPayload)
            }
            public var body: Operations.postWebhook.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.postWebhook.Input.Headers = .init(),
                body: Operations.postWebhook.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the POST /v2/webhooks endpoint.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/post(postWebhook)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.PostWebhookResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.PostWebhookResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/post(postWebhook)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/post(postWebhook)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/post(postWebhook)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/post(postWebhook)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a webhook
    ///
    /// Get a webhook by ID.
    ///
    /// - Remark: HTTP `GET /v2/webhooks/{webhook_id}`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/get(getWebhook)`.
    public enum getWebhook {
        public static let id: Swift.String = "getWebhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// ID of webhook to get
                ///
                /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/GET/path/webhook_id`.
                public var webhook_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - webhook_id: ID of webhook to get
                public init(webhook_id: Swift.String) {
                    self.webhook_id = webhook_id
                }
            }
            public var path: Operations.getWebhook.Input.Path
            /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWebhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWebhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getWebhook.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getWebhook.Input.Path,
                headers: Operations.getWebhook.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v2/webhooks/{webhook_id} endpoint.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/get(getWebhook)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetWebhookResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetWebhookResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/get(getWebhook)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/get(getWebhook)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/get(getWebhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/get(getWebhook)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/get(getWebhook)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a webhook
    ///
    /// Update a webhook by ID.
    ///
    /// - Remark: HTTP `PUT /v2/webhooks/{webhook_id}`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/put(putWebhook)`.
    public enum putWebhook {
        public static let id: Swift.String = "putWebhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// ID of webhook to update
                ///
                /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/path/webhook_id`.
                public var webhook_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - webhook_id: ID of webhook to update
                public init(webhook_id: Swift.String) {
                    self.webhook_id = webhook_id
                }
            }
            public var path: Operations.putWebhook.Input.Path
            /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.putWebhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.putWebhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.putWebhook.Input.Headers
            /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/requestBody/json/event_type`.
                    public var event_type: Components.Schemas.WebhookV2Event
                    /// The HTTP endpoint that will receive a POST request when the event triggers. Max length 2048 characters.
                    ///
                    /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/requestBody/json/endpoint`.
                    public var endpoint: Swift.String
                    /// String that will be passed back to your webhook endpoint to verify that it is being called by Figma. Max length 100 characters.
                    ///
                    /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/requestBody/json/passcode`.
                    public var passcode: Swift.String
                    /// State of the webhook, including any error state it may be in
                    ///
                    /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/requestBody/json/status`.
                    public var status: Components.Schemas.WebhookV2Status?
                    /// User provided description or name for the webhook. Max length 150 characters.
                    ///
                    /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - event_type:
                    ///   - endpoint: The HTTP endpoint that will receive a POST request when the event triggers. Max length 2048 characters.
                    ///   - passcode: String that will be passed back to your webhook endpoint to verify that it is being called by Figma. Max length 100 characters.
                    ///   - status: State of the webhook, including any error state it may be in
                    ///   - description: User provided description or name for the webhook. Max length 150 characters.
                    public init(
                        event_type: Components.Schemas.WebhookV2Event,
                        endpoint: Swift.String,
                        passcode: Swift.String,
                        status: Components.Schemas.WebhookV2Status? = nil,
                        description: Swift.String? = nil
                    ) {
                        self.event_type = event_type
                        self.endpoint = endpoint
                        self.passcode = passcode
                        self.status = status
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case event_type
                        case endpoint
                        case passcode
                        case status
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/PUT/requestBody/content/application\/json`.
                case json(Operations.putWebhook.Input.Body.jsonPayload)
            }
            public var body: Operations.putWebhook.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.putWebhook.Input.Path,
                headers: Operations.putWebhook.Input.Headers = .init(),
                body: Operations.putWebhook.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the PUT /v2/webhooks/{webhook_id} endpoint.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/put(putWebhook)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.PutWebhookResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.PutWebhookResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/put(putWebhook)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/put(putWebhook)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/put(putWebhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/put(putWebhook)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/put(putWebhook)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a webhook
    ///
    /// Deletes the specified webhook. This operation cannot be reversed.
    ///
    /// - Remark: HTTP `DELETE /v2/webhooks/{webhook_id}`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/delete(deleteWebhook)`.
    public enum deleteWebhook {
        public static let id: Swift.String = "deleteWebhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// ID of webhook to delete
                ///
                /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/DELETE/path/webhook_id`.
                public var webhook_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - webhook_id: ID of webhook to delete
                public init(webhook_id: Swift.String) {
                    self.webhook_id = webhook_id
                }
            }
            public var path: Operations.deleteWebhook.Input.Path
            /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteWebhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteWebhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteWebhook.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteWebhook.Input.Path,
                headers: Operations.deleteWebhook.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the DELETE /v2/webhooks/{webhook_id} endpoint.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/delete(deleteWebhook)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.DeleteWebhookResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.DeleteWebhookResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/delete(deleteWebhook)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/delete(deleteWebhook)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/delete(deleteWebhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/delete(deleteWebhook)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/delete(deleteWebhook)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get team webhooks
    ///
    /// Returns all webhooks registered under the specified team.
    ///
    /// - Remark: HTTP `GET /v2/teams/{team_id}/webhooks`.
    /// - Remark: Generated from `#/paths//v2/teams/{team_id}/webhooks/get(getTeamWebhooks)`.
    public enum getTeamWebhooks {
        public static let id: Swift.String = "getTeamWebhooks"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/teams/{team_id}/webhooks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// ID of team to get webhooks for
                ///
                /// - Remark: Generated from `#/paths/v2/teams/{team_id}/webhooks/GET/path/team_id`.
                public var team_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: ID of team to get webhooks for
                public init(team_id: Swift.String) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.getTeamWebhooks.Input.Path
            /// - Remark: Generated from `#/paths/v2/teams/{team_id}/webhooks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTeamWebhooks.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTeamWebhooks.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getTeamWebhooks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getTeamWebhooks.Input.Path,
                headers: Operations.getTeamWebhooks.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v2/teams/{team_id}/webhooks endpoint.
            ///
            /// - Remark: Generated from `#/paths//v2/teams/{team_id}/webhooks/get(getTeamWebhooks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetTeamWebhooksResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetTeamWebhooksResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v2/teams/{team_id}/webhooks/get(getTeamWebhooks)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v2/teams/{team_id}/webhooks/get(getTeamWebhooks)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v2/teams/{team_id}/webhooks/get(getTeamWebhooks)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v2/teams/{team_id}/webhooks/get(getTeamWebhooks)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get webhook requests
    ///
    /// Returns all webhook requests sent within the last week. Useful for debugging.
    ///
    /// - Remark: HTTP `GET /v2/webhooks/{webhook_id}/requests`.
    /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/requests/get(getWebhookRequests)`.
    public enum getWebhookRequests {
        public static let id: Swift.String = "getWebhookRequests"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/requests/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The id of the webhook subscription you want to see events from
                ///
                /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/requests/GET/path/webhook_id`.
                public var webhook_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - webhook_id: The id of the webhook subscription you want to see events from
                public init(webhook_id: Swift.String) {
                    self.webhook_id = webhook_id
                }
            }
            public var path: Operations.getWebhookRequests.Input.Path
            /// - Remark: Generated from `#/paths/v2/webhooks/{webhook_id}/requests/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWebhookRequests.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWebhookRequests.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getWebhookRequests.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getWebhookRequests.Input.Path,
                headers: Operations.getWebhookRequests.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v2/webhooks/{webhook_id}/requests endpoint.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/requests/get(getWebhookRequests)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetWebhookRequestsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetWebhookRequestsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/requests/get(getWebhookRequests)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/requests/get(getWebhookRequests)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/requests/get(getWebhookRequests)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/requests/get(getWebhookRequests)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrMessage)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrMessage {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v2/webhooks/{webhook_id}/requests/get(getWebhookRequests)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get activity logs
    ///
    /// Returns a list of activity log events
    ///
    /// - Remark: HTTP `GET /v1/activity_logs`.
    /// - Remark: Generated from `#/paths//v1/activity_logs/get(getActivityLogs)`.
    public enum getActivityLogs {
        public static let id: Swift.String = "getActivityLogs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/activity_logs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Event type(s) to include in the response. Can have multiple values separated by comma. All events are returned by default.
                ///
                /// - Remark: Generated from `#/paths/v1/activity_logs/GET/query/events`.
                public var events: Swift.String?
                /// Unix timestamp of the least recent event to include. This param defaults to one year ago if unspecified. Events prior to one year ago are not available.
                ///
                /// - Remark: Generated from `#/paths/v1/activity_logs/GET/query/start_time`.
                public var start_time: Swift.Double?
                /// Unix timestamp of the most recent event to include. This param defaults to the current timestamp if unspecified.
                ///
                /// - Remark: Generated from `#/paths/v1/activity_logs/GET/query/end_time`.
                public var end_time: Swift.Double?
                /// Maximum number of events to return. This param defaults to 1000 if unspecified.
                ///
                /// - Remark: Generated from `#/paths/v1/activity_logs/GET/query/limit`.
                public var limit: Swift.Double?
                /// - Remark: Generated from `#/paths/v1/activity_logs/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Event order by timestamp. This param can be either "asc" (default) or "desc".
                ///
                /// - Remark: Generated from `#/paths/v1/activity_logs/GET/query/order`.
                public var order: Operations.getActivityLogs.Input.Query.orderPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - events: Event type(s) to include in the response. Can have multiple values separated by comma. All events are returned by default.
                ///   - start_time: Unix timestamp of the least recent event to include. This param defaults to one year ago if unspecified. Events prior to one year ago are not available.
                ///   - end_time: Unix timestamp of the most recent event to include. This param defaults to the current timestamp if unspecified.
                ///   - limit: Maximum number of events to return. This param defaults to 1000 if unspecified.
                ///   - order: Event order by timestamp. This param can be either "asc" (default) or "desc".
                public init(
                    events: Swift.String? = nil,
                    start_time: Swift.Double? = nil,
                    end_time: Swift.Double? = nil,
                    limit: Swift.Double? = nil,
                    order: Operations.getActivityLogs.Input.Query.orderPayload? = nil
                ) {
                    self.events = events
                    self.start_time = start_time
                    self.end_time = end_time
                    self.limit = limit
                    self.order = order
                }
            }
            public var query: Operations.getActivityLogs.Input.Query
            /// - Remark: Generated from `#/paths/v1/activity_logs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getActivityLogs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getActivityLogs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getActivityLogs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getActivityLogs.Input.Query = .init(),
                headers: Operations.getActivityLogs.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/activity_logs endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/activity_logs/get(getActivityLogs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetActivityLogsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetActivityLogsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/activity_logs/get(getActivityLogs)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/activity_logs/get(getActivityLogs)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/activity_logs/get(getActivityLogs)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/activity_logs/get(getActivityLogs)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/activity_logs/get(getActivityLogs)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get payments
    ///
    /// There are two methods to query for a user's payment information on a plugin, widget, or Community file. The first method, using plugin payment tokens, is typically used when making queries from a plugin's or widget's code. The second method, providing a user ID and resource ID, is typically used when making queries from anywhere else.
    ///
    /// Note that you can only query for resources that you own. In most cases, this means that you can only query resources that you originally created.
    ///
    /// - Remark: HTTP `GET /v1/payments`.
    /// - Remark: Generated from `#/paths//v1/payments/get(getPayments)`.
    public enum getPayments {
        public static let id: Swift.String = "getPayments"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/payments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Short-lived token returned from "getPluginPaymentTokenAsync" in the plugin payments API and used to authenticate to this endpoint. Read more about generating this token through "Calling the Payments REST API from a plugin or widget" below.
                ///
                /// - Remark: Generated from `#/paths/v1/payments/GET/query/plugin_payment_token`.
                public var plugin_payment_token: Swift.String?
                /// The ID of the user to query payment information about. You can get the user ID by having the user OAuth2 to the Figma REST API.
                ///
                /// - Remark: Generated from `#/paths/v1/payments/GET/query/user_id`.
                public var user_id: Swift.Double?
                /// The ID of the Community file to query a user's payment information on. You can get the Community file ID from the file's Community page (look for the number after "file/" in the URL). Provide exactly one of "community_file_id", "plugin_id", or "widget_id".
                ///
                /// - Remark: Generated from `#/paths/v1/payments/GET/query/community_file_id`.
                public var community_file_id: Swift.Double?
                /// The ID of the plugin to query a user's payment information on. You can get the plugin ID from the plugin's manifest, or from the plugin's Community page (look for the number after "plugin/" in the URL). Provide exactly one of "community_file_id", "plugin_id", or "widget_id".
                ///
                /// - Remark: Generated from `#/paths/v1/payments/GET/query/plugin_id`.
                public var plugin_id: Swift.Double?
                /// The ID of the widget to query a user's payment information on. You can get the widget ID from the widget's manifest, or from the widget's Community page (look for the number after "widget/" in the URL). Provide exactly one of "community_file_id", "plugin_id", or "widget_id".
                ///
                /// - Remark: Generated from `#/paths/v1/payments/GET/query/widget_id`.
                public var widget_id: Swift.Double?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - plugin_payment_token: Short-lived token returned from "getPluginPaymentTokenAsync" in the plugin payments API and used to authenticate to this endpoint. Read more about generating this token through "Calling the Payments REST API from a plugin or widget" below.
                ///   - user_id: The ID of the user to query payment information about. You can get the user ID by having the user OAuth2 to the Figma REST API.
                ///   - community_file_id: The ID of the Community file to query a user's payment information on. You can get the Community file ID from the file's Community page (look for the number after "file/" in the URL). Provide exactly one of "community_file_id", "plugin_id", or "widget_id".
                ///   - plugin_id: The ID of the plugin to query a user's payment information on. You can get the plugin ID from the plugin's manifest, or from the plugin's Community page (look for the number after "plugin/" in the URL). Provide exactly one of "community_file_id", "plugin_id", or "widget_id".
                ///   - widget_id: The ID of the widget to query a user's payment information on. You can get the widget ID from the widget's manifest, or from the widget's Community page (look for the number after "widget/" in the URL). Provide exactly one of "community_file_id", "plugin_id", or "widget_id".
                public init(
                    plugin_payment_token: Swift.String? = nil,
                    user_id: Swift.Double? = nil,
                    community_file_id: Swift.Double? = nil,
                    plugin_id: Swift.Double? = nil,
                    widget_id: Swift.Double? = nil
                ) {
                    self.plugin_payment_token = plugin_payment_token
                    self.user_id = user_id
                    self.community_file_id = community_file_id
                    self.plugin_id = plugin_id
                    self.widget_id = widget_id
                }
            }
            public var query: Operations.getPayments.Input.Query
            /// - Remark: Generated from `#/paths/v1/payments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPayments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPayments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getPayments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getPayments.Input.Query = .init(),
                headers: Operations.getPayments.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/payments endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/payments/get(getPayments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetPaymentsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetPaymentsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/payments/get(getPayments)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/payments/get(getPayments)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/payments/get(getPayments)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get local variables
    ///
    /// **This API is available to full members of Enterprise orgs.**
    ///
    /// The `GET /v1/files/:file_key/variables/local` endpoint lets you enumerate local variables created in the file and remote variables used in the file. Remote variables are referenced by their `subscribed_id`.
    ///
    /// As a part of the Variables related API additions, the `GET /v1/files/:file_key` endpoint now returns a `boundVariables` property, containing the `variableId` of the bound variable. The `GET /v1/files/:file_key/variables/local` endpoint can be used to get the full variable or variable collection object.
    ///
    /// Note that `GET /v1/files/:file_key/variables/published` does not return modes. Instead, you will need to use the `GET /v1/files/:file_key/variables/local` endpoint, in the same file, to examine the mode values.
    ///         
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/variables/local`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/local/get(getLocalVariables)`.
    public enum getLocalVariables {
        public static let id: Swift.String = "getLocalVariables"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/local/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to get variables from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/local/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to get variables from. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getLocalVariables.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/local/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLocalVariables.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLocalVariables.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getLocalVariables.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getLocalVariables.Input.Path,
                headers: Operations.getLocalVariables.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/variables/local endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/local/get(getLocalVariables)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetLocalVariablesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetLocalVariablesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/local/get(getLocalVariables)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/local/get(getLocalVariables)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/local/get(getLocalVariables)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/local/get(getLocalVariables)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/local/get(getLocalVariables)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get published variables
    ///
    /// **This API is available to full members of Enterprise orgs.**
    ///
    /// The `GET /v1/files/:file_key/variables/published` endpoint returns the variables that are published from the given file.
    ///
    /// The response for this endpoint contains some key differences compared to the `GET /v1/files/:file_key/variables/local` endpoint:
    ///
    /// - Each variable and variable collection contains a `subscribed_id`.
    /// - Modes are omitted for published variable collections
    ///
    /// Published variables have two ids: an id that is assigned in the file where it is created (`id`), and an id that is used by subscribing files (`subscribed_id`). The `id` and `key` are stable over the lifetime of the variable. The `subscribed_id` changes every time the variable is modified and published. The same is true for variable collections.
    ///
    /// The `updatedAt` fields are ISO 8601 timestamps that indicate the last time that a change to a variable was published. For variable collections, this timestamp will change any time a variable in the collection is changed.
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/variables/published`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/published/get(getPublishedVariables)`.
    public enum getPublishedVariables {
        public static let id: Swift.String = "getPublishedVariables"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/published/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File to get variables from. This must be a main file key, not a branch key, as it is not possible to publish from branches.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/published/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to get variables from. This must be a main file key, not a branch key, as it is not possible to publish from branches.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getPublishedVariables.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/published/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPublishedVariables.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPublishedVariables.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getPublishedVariables.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getPublishedVariables.Input.Path,
                headers: Operations.getPublishedVariables.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/variables/published endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/published/get(getPublishedVariables)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetPublishedVariablesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetPublishedVariablesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/published/get(getPublishedVariables)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/published/get(getPublishedVariables)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/published/get(getPublishedVariables)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/published/get(getPublishedVariables)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/published/get(getPublishedVariables)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create/modify/delete variables
    ///
    /// **This API is available to full members of Enterprise orgs with Editor seats.**
    ///
    /// The `POST /v1/files/:file_key/variables` endpoint lets you bulk create, update, and delete variables and variable collections.
    ///
    /// The request body supports the following 4 top-level arrays. Changes from these arrays will be applied in the below order, and within each array, by array order.
    ///
    /// - **variableCollections**: For creating, updating, and deleting variable collections
    /// - **variableModes**: For creating, updating, and deleting modes within variable collections
    ///   - Each collection can have a maximum of 40 modes
    ///   - Mode names cannot be longer than 40 characters
    /// - **variables**: For creating, updating, and deleting variables
    ///   - Each collection can have a maximum of 5000 variables
    ///   - Variable names must be unique within a collection and cannot contain certain special characters such as `.{}`
    /// - **variableModeValues**: For setting a variable value under a specific mode.
    ///   - When setting aliases, a variable cannot be aliased to itself or form an alias cycle
    ///
    /// Temporary ids can be used to reference an object later in the same POST request body. They can be used at create time in the `id` property of variable collections, modes, variables, and in the `initialModeId` property of variable collections. They are scoped to a single request body, and must be unique within the body. The mapping of temporary ids to real ids is returned in the response.
    ///
    /// This endpoint has the following key behaviors:
    ///
    /// - The request body must be 4MB or less.
    /// - Must include an `action` property for collections, modes, and variables to tell the API whether to create, update, or delete the object.
    /// - When creating a collection, mode, or variable, you can include a temporary `id` that can be referenced in dependent objects in the same request. For example, you can create a new collection with the id `"my_new_collection"`. You can then set `variableCollectionId` to `"my_new_collection"` in new modes or variables. Temporary ids must be unique in the request body.
    /// - New collections always come with one mode. You can reference this mode by setting `initialModeId` to a temporary id in the request body. This is useful if you want to set values for variables in the mode in the `variableModeValues` array.
    ///   - The `tempIdToRealId` array returns a mapping of the temporary ids in the request, to the real ids of the newly created objects.
    /// - When adding new modes or variables, default variable values will be applied, consistent with what happens in the UI.
    /// - Everything to be created, updated, and deleted in the request body is treated as one atomic operation. If there is any validation failure, you will get a 400 status code response, and no changes will be persisted.
    /// - You will not be able to update remote variables or variable collections. You can only update variables in the file where they were originally created.
    ///
    /// - Remark: HTTP `POST /v1/files/{file_key}/variables`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/post(postVariables)`.
    public enum postVariables {
        public static let id: Swift.String = "postVariables"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/POST/path`.
            public struct Path: Sendable, Hashable {
                /// File to modify variables in. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/POST/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File to modify variables in. This can be a file key or branch key. Use `GET /v1/files/:key` with the `branch_data` query param to get the branch key.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.postVariables.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postVariables.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postVariables.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.postVariables.Input.Headers
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// For creating, updating, and deleting variable collections.
                    ///
                    /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/POST/requestBody/json/variableCollections`.
                    public var variableCollections: [Components.Schemas.VariableCollectionChange]?
                    /// For creating, updating, and deleting modes within variable collections.
                    ///
                    /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/POST/requestBody/json/variableModes`.
                    public var variableModes: [Components.Schemas.VariableModeChange]?
                    /// For creating, updating, and deleting variables.
                    ///
                    /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/POST/requestBody/json/variables`.
                    public var variables: [Components.Schemas.VariableChange]?
                    /// For setting a specific value, given a variable and a mode.
                    ///
                    /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/POST/requestBody/json/variableModeValues`.
                    public var variableModeValues: [Components.Schemas.VariableModeValue]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - variableCollections: For creating, updating, and deleting variable collections.
                    ///   - variableModes: For creating, updating, and deleting modes within variable collections.
                    ///   - variables: For creating, updating, and deleting variables.
                    ///   - variableModeValues: For setting a specific value, given a variable and a mode.
                    public init(
                        variableCollections: [Components.Schemas.VariableCollectionChange]? = nil,
                        variableModes: [Components.Schemas.VariableModeChange]? = nil,
                        variables: [Components.Schemas.VariableChange]? = nil,
                        variableModeValues: [Components.Schemas.VariableModeValue]? = nil
                    ) {
                        self.variableCollections = variableCollections
                        self.variableModes = variableModes
                        self.variables = variables
                        self.variableModeValues = variableModeValues
                    }
                    public enum CodingKeys: String, CodingKey {
                        case variableCollections
                        case variableModes
                        case variables
                        case variableModeValues
                    }
                }
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/variables/POST/requestBody/content/application\/json`.
                case json(Operations.postVariables.Input.Body.jsonPayload)
            }
            public var body: Operations.postVariables.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.postVariables.Input.Path,
                headers: Operations.postVariables.Input.Headers = .init(),
                body: Operations.postVariables.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the POST /v1/files/{file_key}/variables endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/post(postVariables)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.PostVariablesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.PostVariablesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/post(postVariables)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/post(postVariables)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/post(postVariables)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/post(postVariables)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/post(postVariables)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/variables/post(postVariables)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get dev resources
    ///
    /// Get dev resources in a file
    ///
    /// - Remark: HTTP `GET /v1/files/{file_key}/dev_resources`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/get(getDevResources)`.
    public enum getDevResources {
        public static let id: Swift.String = "getDevResources"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/dev_resources/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The file to get the dev resources from. This must be a main file key, not a branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/dev_resources/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: The file to get the dev resources from. This must be a main file key, not a branch key.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getDevResources.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/dev_resources/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Comma separated list of nodes that you care about in the document. If specified, only dev resources attached to these nodes will be returned. If not specified, all dev resources in the file will be returned.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/dev_resources/GET/query/node_ids`.
                public var node_ids: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - node_ids: Comma separated list of nodes that you care about in the document. If specified, only dev resources attached to these nodes will be returned. If not specified, all dev resources in the file will be returned.
                public init(node_ids: Swift.String? = nil) {
                    self.node_ids = node_ids
                }
            }
            public var query: Operations.getDevResources.Input.Query
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/dev_resources/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getDevResources.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getDevResources.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getDevResources.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getDevResources.Input.Path,
                query: Operations.getDevResources.Input.Query = .init(),
                headers: Operations.getDevResources.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/files/{file_key}/dev_resources endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/get(getDevResources)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetDevResourcesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetDevResourcesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/get(getDevResources)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/get(getDevResources)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/get(getDevResources)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/get(getDevResources)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/get(getDevResources)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/get(getDevResources)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create dev resources
    ///
    /// Bulk create dev resources across multiple files.
    /// Dev resources that are successfully created will show up in the links_created array in the response.
    ///
    /// If there are any dev resources that cannot be created, you may still get a 200 response. These resources will show up in the errors array. Some reasons a dev resource cannot be created include:
    ///
    /// - Resource points to a `file_key` that cannot be found.
    /// - The node already has the maximum of 10 dev resources.
    /// - Another dev resource for the node has the same url.
    ///
    /// - Remark: HTTP `POST /v1/dev_resources`.
    /// - Remark: Generated from `#/paths//v1/dev_resources/post(postDevResources)`.
    public enum postDevResources {
        public static let id: Swift.String = "postDevResources"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/dev_resources/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postDevResources.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postDevResources.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.postDevResources.Input.Headers
            /// - Remark: Generated from `#/paths/v1/dev_resources/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/dev_resources/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/v1/dev_resources/POST/requestBody/json/dev_resourcesPayload`.
                    public struct dev_resourcesPayloadPayload: Codable, Hashable, Sendable {
                        /// The name of the dev resource.
                        ///
                        /// - Remark: Generated from `#/paths/v1/dev_resources/POST/requestBody/json/dev_resourcesPayload/name`.
                        public var name: Swift.String
                        /// The URL of the dev resource.
                        ///
                        /// - Remark: Generated from `#/paths/v1/dev_resources/POST/requestBody/json/dev_resourcesPayload/url`.
                        public var url: Swift.String
                        /// The file key where the dev resource belongs.
                        ///
                        /// - Remark: Generated from `#/paths/v1/dev_resources/POST/requestBody/json/dev_resourcesPayload/file_key`.
                        public var file_key: Swift.String
                        /// The target node to attach the dev resource to.
                        ///
                        /// - Remark: Generated from `#/paths/v1/dev_resources/POST/requestBody/json/dev_resourcesPayload/node_id`.
                        public var node_id: Swift.String
                        /// Creates a new `dev_resourcesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - name: The name of the dev resource.
                        ///   - url: The URL of the dev resource.
                        ///   - file_key: The file key where the dev resource belongs.
                        ///   - node_id: The target node to attach the dev resource to.
                        public init(
                            name: Swift.String,
                            url: Swift.String,
                            file_key: Swift.String,
                            node_id: Swift.String
                        ) {
                            self.name = name
                            self.url = url
                            self.file_key = file_key
                            self.node_id = node_id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case name
                            case url
                            case file_key
                            case node_id
                        }
                    }
                    /// An array of dev resources.
                    ///
                    /// - Remark: Generated from `#/paths/v1/dev_resources/POST/requestBody/json/dev_resources`.
                    public typealias dev_resourcesPayload = [Operations.postDevResources.Input.Body.jsonPayload.dev_resourcesPayloadPayload]
                    /// An array of dev resources.
                    ///
                    /// - Remark: Generated from `#/paths/v1/dev_resources/POST/requestBody/json/dev_resources`.
                    public var dev_resources: Operations.postDevResources.Input.Body.jsonPayload.dev_resourcesPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - dev_resources: An array of dev resources.
                    public init(dev_resources: Operations.postDevResources.Input.Body.jsonPayload.dev_resourcesPayload) {
                        self.dev_resources = dev_resources
                    }
                    public enum CodingKeys: String, CodingKey {
                        case dev_resources
                    }
                }
                /// - Remark: Generated from `#/paths/v1/dev_resources/POST/requestBody/content/application\/json`.
                case json(Operations.postDevResources.Input.Body.jsonPayload)
            }
            public var body: Operations.postDevResources.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.postDevResources.Input.Headers = .init(),
                body: Operations.postDevResources.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the POST /v1/dev_resources endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/post(postDevResources)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.PostDevResourcesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.PostDevResourcesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/post(postDevResources)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/post(postDevResources)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/post(postDevResources)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/post(postDevResources)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/post(postDevResources)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update dev resources
    ///
    /// Bulk update dev resources across multiple files.
    ///
    /// Ids for dev resources that are successfully updated will show up in the `links_updated` array in the response.
    ///
    /// If there are any dev resources that cannot be updated, you may still get a 200 response. These resources will show up in the `errors` array.
    ///
    /// - Remark: HTTP `PUT /v1/dev_resources`.
    /// - Remark: Generated from `#/paths//v1/dev_resources/put(putDevResources)`.
    public enum putDevResources {
        public static let id: Swift.String = "putDevResources"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/dev_resources/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.putDevResources.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.putDevResources.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.putDevResources.Input.Headers
            /// - Remark: Generated from `#/paths/v1/dev_resources/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/dev_resources/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/v1/dev_resources/PUT/requestBody/json/dev_resourcesPayload`.
                    public struct dev_resourcesPayloadPayload: Codable, Hashable, Sendable {
                        /// Unique identifier of the dev resource
                        ///
                        /// - Remark: Generated from `#/paths/v1/dev_resources/PUT/requestBody/json/dev_resourcesPayload/id`.
                        public var id: Swift.String
                        /// The name of the dev resource.
                        ///
                        /// - Remark: Generated from `#/paths/v1/dev_resources/PUT/requestBody/json/dev_resourcesPayload/name`.
                        public var name: Swift.String?
                        /// The URL of the dev resource.
                        ///
                        /// - Remark: Generated from `#/paths/v1/dev_resources/PUT/requestBody/json/dev_resourcesPayload/url`.
                        public var url: Swift.String?
                        /// Creates a new `dev_resourcesPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - id: Unique identifier of the dev resource
                        ///   - name: The name of the dev resource.
                        ///   - url: The URL of the dev resource.
                        public init(
                            id: Swift.String,
                            name: Swift.String? = nil,
                            url: Swift.String? = nil
                        ) {
                            self.id = id
                            self.name = name
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case name
                            case url
                        }
                    }
                    /// An array of dev resources.
                    ///
                    /// - Remark: Generated from `#/paths/v1/dev_resources/PUT/requestBody/json/dev_resources`.
                    public typealias dev_resourcesPayload = [Operations.putDevResources.Input.Body.jsonPayload.dev_resourcesPayloadPayload]
                    /// An array of dev resources.
                    ///
                    /// - Remark: Generated from `#/paths/v1/dev_resources/PUT/requestBody/json/dev_resources`.
                    public var dev_resources: Operations.putDevResources.Input.Body.jsonPayload.dev_resourcesPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - dev_resources: An array of dev resources.
                    public init(dev_resources: Operations.putDevResources.Input.Body.jsonPayload.dev_resourcesPayload) {
                        self.dev_resources = dev_resources
                    }
                    public enum CodingKeys: String, CodingKey {
                        case dev_resources
                    }
                }
                /// - Remark: Generated from `#/paths/v1/dev_resources/PUT/requestBody/content/application\/json`.
                case json(Operations.putDevResources.Input.Body.jsonPayload)
            }
            public var body: Operations.putDevResources.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.putDevResources.Input.Headers = .init(),
                body: Operations.putDevResources.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the PUT /v1/dev_resources endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/put(putDevResources)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.PutDevResourcesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.PutDevResourcesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/put(putDevResources)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/put(putDevResources)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/put(putDevResources)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/put(putDevResources)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/dev_resources/put(putDevResources)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete dev resource
    ///
    /// Delete a dev resource from a file
    ///
    /// - Remark: HTTP `DELETE /v1/files/{file_key}/dev_resources/{dev_resource_id}`.
    /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/{dev_resource_id}/delete(deleteDevResource)`.
    public enum deleteDevResource {
        public static let id: Swift.String = "deleteDevResource"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/dev_resources/{dev_resource_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The file to delete the dev resource from. This must be a main file key, not a branch key.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/dev_resources/{dev_resource_id}/DELETE/path/file_key`.
                public var file_key: Swift.String
                /// The id of the dev resource to delete.
                ///
                /// - Remark: Generated from `#/paths/v1/files/{file_key}/dev_resources/{dev_resource_id}/DELETE/path/dev_resource_id`.
                public var dev_resource_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: The file to delete the dev resource from. This must be a main file key, not a branch key.
                ///   - dev_resource_id: The id of the dev resource to delete.
                public init(
                    file_key: Swift.String,
                    dev_resource_id: Swift.String
                ) {
                    self.file_key = file_key
                    self.dev_resource_id = dev_resource_id
                }
            }
            public var path: Operations.deleteDevResource.Input.Path
            /// - Remark: Generated from `#/paths/v1/files/{file_key}/dev_resources/{dev_resource_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteDevResource.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteDevResource.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteDevResource.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteDevResource.Input.Path,
                headers: Operations.deleteDevResource.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the DELETE /v1/files/{file_key}/dev_resources/{dev_resource_id} endpoint.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/{dev_resource_id}/delete(deleteDevResource)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.DeleteDevResourceResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.DeleteDevResourceResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/{dev_resource_id}/delete(deleteDevResource)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/{dev_resource_id}/delete(deleteDevResource)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// The requested file or resource was not found.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/{dev_resource_id}/delete(deleteDevResource)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/{dev_resource_id}/delete(deleteDevResource)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/files/{file_key}/dev_resources/{dev_resource_id}/delete(deleteDevResource)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get library analytics action data.
    ///
    /// Returns a list of library analytics actions data broken down by the requested dimension.
    ///
    /// - Remark: HTTP `GET /v1/analytics/libraries/{file_key}/actions`.
    /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/actions/get(getLibraryAnalyticsActions)`.
    public enum getLibraryAnalyticsActions {
        public static let id: Swift.String = "getLibraryAnalyticsActions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File key of the library to fetch analytics data for.
                ///
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File key of the library to fetch analytics data for.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getLibraryAnalyticsActions.Input.Path
            /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Cursor indicating what page of data to fetch. Obtained from prior API call.
                ///
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/query/cursor`.
                public var cursor: Swift.String?
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/query/group_by`.
                @frozen public enum group_byPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case component = "component"
                    case team = "team"
                }
                /// A dimension to group returned analytics data by. Accepts "component" or "team".
                ///
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/query/group_by`.
                public var group_by: Operations.getLibraryAnalyticsActions.Input.Query.group_byPayload
                /// ISO 8601 date string (YYYY-MM-DD) of the earliest week to include. Dates are rounded back to the nearest start of a week. Defaults to one year prior.
                ///
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/query/start_date`.
                public var start_date: Swift.String?
                /// ISO 8601 date string (YYYY-MM-DD) of the latest week to include. Dates are rounded forward to the nearest end of a week. Defaults to the latest computed week.
                ///
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/query/end_date`.
                public var end_date: Swift.String?
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// How to order response rows by week. This param can be either "asc" or "desc" (default).
                ///
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/query/order`.
                public var order: Operations.getLibraryAnalyticsActions.Input.Query.orderPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cursor: Cursor indicating what page of data to fetch. Obtained from prior API call.
                ///   - group_by: A dimension to group returned analytics data by. Accepts "component" or "team".
                ///   - start_date: ISO 8601 date string (YYYY-MM-DD) of the earliest week to include. Dates are rounded back to the nearest start of a week. Defaults to one year prior.
                ///   - end_date: ISO 8601 date string (YYYY-MM-DD) of the latest week to include. Dates are rounded forward to the nearest end of a week. Defaults to the latest computed week.
                ///   - order: How to order response rows by week. This param can be either "asc" or "desc" (default).
                public init(
                    cursor: Swift.String? = nil,
                    group_by: Operations.getLibraryAnalyticsActions.Input.Query.group_byPayload,
                    start_date: Swift.String? = nil,
                    end_date: Swift.String? = nil,
                    order: Operations.getLibraryAnalyticsActions.Input.Query.orderPayload? = nil
                ) {
                    self.cursor = cursor
                    self.group_by = group_by
                    self.start_date = start_date
                    self.end_date = end_date
                    self.order = order
                }
            }
            public var query: Operations.getLibraryAnalyticsActions.Input.Query
            /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/actions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLibraryAnalyticsActions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLibraryAnalyticsActions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getLibraryAnalyticsActions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getLibraryAnalyticsActions.Input.Path,
                query: Operations.getLibraryAnalyticsActions.Input.Query,
                headers: Operations.getLibraryAnalyticsActions.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the GET /v1/analytics/libraries/{file_key}/actions.
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/actions/get(getLibraryAnalyticsActions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetLibraryAnalyticsActionsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetLibraryAnalyticsActionsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/actions/get(getLibraryAnalyticsActions)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/actions/get(getLibraryAnalyticsActions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/actions/get(getLibraryAnalyticsActions)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/actions/get(getLibraryAnalyticsActions)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/actions/get(getLibraryAnalyticsActions)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get library analytics usage data.
    ///
    /// Returns a list of library analytics usage data broken down by the requested dimension.
    ///
    /// - Remark: HTTP `GET /v1/analytics/libraries/{file_key}/usages`.
    /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/usages/get(getLibraryAnalyticsUsages)`.
    public enum getLibraryAnalyticsUsages {
        public static let id: Swift.String = "getLibraryAnalyticsUsages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/usages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// File key of the library to fetch analytics data for.
                ///
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/usages/GET/path/file_key`.
                public var file_key: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_key: File key of the library to fetch analytics data for.
                public init(file_key: Swift.String) {
                    self.file_key = file_key
                }
            }
            public var path: Operations.getLibraryAnalyticsUsages.Input.Path
            /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/usages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Cursor indicating what page of data to fetch. Obtained from prior API call.
                ///
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/usages/GET/query/cursor`.
                public var cursor: Swift.String?
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/usages/GET/query/group_by`.
                @frozen public enum group_byPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case component = "component"
                    case file = "file"
                }
                /// A dimension to group returned analytics data by. Accepts "component" or "file".
                ///
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/usages/GET/query/group_by`.
                public var group_by: Operations.getLibraryAnalyticsUsages.Input.Query.group_byPayload
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/usages/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// How to order response rows by number of instances. This param can be either "asc" or "desc" (default).
                ///
                /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/usages/GET/query/order`.
                public var order: Operations.getLibraryAnalyticsUsages.Input.Query.orderPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cursor: Cursor indicating what page of data to fetch. Obtained from prior API call.
                ///   - group_by: A dimension to group returned analytics data by. Accepts "component" or "file".
                ///   - order: How to order response rows by number of instances. This param can be either "asc" or "desc" (default).
                public init(
                    cursor: Swift.String? = nil,
                    group_by: Operations.getLibraryAnalyticsUsages.Input.Query.group_byPayload,
                    order: Operations.getLibraryAnalyticsUsages.Input.Query.orderPayload? = nil
                ) {
                    self.cursor = cursor
                    self.group_by = group_by
                    self.order = order
                }
            }
            public var query: Operations.getLibraryAnalyticsUsages.Input.Query
            /// - Remark: Generated from `#/paths/v1/analytics/libraries/{file_key}/usages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLibraryAnalyticsUsages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLibraryAnalyticsUsages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getLibraryAnalyticsUsages.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getLibraryAnalyticsUsages.Input.Path,
                query: Operations.getLibraryAnalyticsUsages.Input.Query,
                headers: Operations.getLibraryAnalyticsUsages.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response from the PUT /v1/analytics/libraries/{file_key}/usages.
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/usages/get(getLibraryAnalyticsUsages)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.GetLibraryAnalyticsUsagesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.GetLibraryAnalyticsUsagesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request. Parameters are invalid or malformed. Please check the input formats. This error can also happen if the requested resources are too large to complete the request, which results in a timeout. Please reduce the number and size of objects requested.
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/usages/get(getLibraryAnalyticsUsages)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Token is missing or incorrect.
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/usages/get(getLibraryAnalyticsUsages)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/usages/get(getLibraryAnalyticsUsages)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// In some cases API requests may be throttled or rate limited. Please wait a while before attempting the request again (typically a minute).
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/usages/get(getLibraryAnalyticsUsages)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.TooManyRequestsErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// An internal server error occurred.
            ///
            /// - Remark: Generated from `#/paths//v1/analytics/libraries/{file_key}/usages/get(getLibraryAnalyticsUsages)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponseWithErrorBoolean)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponseWithErrorBoolean {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
